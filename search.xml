<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JavaWeb</title>
      <link href="/2024/08/08/javaweb/"/>
      <url>/2024/08/08/javaweb/</url>
      
        <content type="html"><![CDATA[<h1 id="javaweb学习"><a class="markdownIt-Anchor" href="#javaweb学习"></a> JavaWeb学习</h1><h2 id="1初识web前端"><a class="markdownIt-Anchor" href="#1初识web前端"></a> 1.初识web前端</h2><p><strong>Web标准</strong><br />Web标准也称为网页标准，由一系列的标准组成，大部分由W3C（World Wide Web Consortium，万维网联盟）组织制定。</p><ul><li>三个组成部分：<ul><li><strong>HTML</strong>：负责<strong>网页的结构</strong>（页面元素和内容）</li><li><strong>CSS</strong>：负责<strong>页面的表现</strong>（页面元素的外观，位置等页面样式，如：颜色、大小等）</li><li><strong>JavaScript</strong>：负责<strong>页面的行为</strong>（页面元素的交互，如：鼠标点击、滑动等）</li></ul></li></ul><h3 id="11-html"><a class="markdownIt-Anchor" href="#11-html"></a> 1.1 HTML</h3><p>HTML（HyperText Markup Language）：超文本标记语言。</p><ul><li><strong>超文本</strong>：超越了文本的限制，比普通文本更强大。除了文字信息，还可以定义图片、音频、视频等内容。</li><li><strong>标记语言</strong>：由标签构成的语言。<ul><li>HTML标签都是<strong>预定义</strong>好的。例如：使用&lt;a&gt;展示超链接，使用&lt;img&gt;展示图片、&lt;video&gt;展示视频等。</li><li>HTML代码直接在浏览器中运行，HTML标签由浏览器解析。</li></ul></li></ul><p><strong>HTML结构标签</strong>：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 这里设置了HTML文档的基本结构，包括文档类型、语言、字符编码和视口设置 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 这里是网页的主体部分，内容将显示在这里 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>语言特点</strong>：</p><ul><li>HTML标签不区分大小写</li><li>HTML标签属性值单双引号都可以</li><li>HTML语法松散</li><li>在HTML中无论输入多少个空格，只会显示一个，可以使用空格占位符：<code>&amp;nbsp;</code></li></ul><h4 id="111-标题标签"><a class="markdownIt-Anchor" href="#111-标题标签"></a> 1.1.1 标题标签</h4><ul><li><strong>标签</strong>：&lt;h1&gt;…&lt;h1&gt; (h1 -&gt; h6 重要程度依次降低)</li><li><strong>示例</strong>：<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>标题1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>标题2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>标题3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="112-水平线标签"><a class="markdownIt-Anchor" href="#112-水平线标签"></a> 1.1.2 水平线标签</h4><ul><li><strong>标签</strong>：&lt;hr&gt;</li></ul><h4 id="113-换行标签"><a class="markdownIt-Anchor" href="#113-换行标签"></a> 1.1.3 换行标签</h4><ul><li><strong>标签</strong>：&lt;br&gt;</li></ul><h4 id="114-段落标签"><a class="markdownIt-Anchor" href="#114-段落标签"></a> 1.1.4 段落标签</h4><ul><li><strong>标签</strong>：&lt;p&gt;…&lt;p&gt;</li></ul><h4 id="115-文本加粗标签"><a class="markdownIt-Anchor" href="#115-文本加粗标签"></a> 1.1.5 文本加粗标签</h4><ul><li><strong>标签</strong>：&lt;b&gt;…&lt;/b&gt; 或者 &lt;strong&gt;…&lt;/strong&gt;</li></ul><h4 id="116-图片标签"><a class="markdownIt-Anchor" href="#116-图片标签"></a> 1.1.6 图片标签</h4><ul><li><strong>标签</strong>：&lt;img src=“图片路径” width=“宽度” height=“高度” alt=“替代文本”&gt;<ul><li><code>src</code>：指定图像的路径url（绝对路径/相对路径）</li><li><code>width</code>：指定图像的宽度（像素/相对于父元素的百分比）</li><li><code>height</code>：指定图像的高度（像素/相对于父元素的百分比）</li><li><code>alt</code>：指定图像的替代文本<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240808220223.png" alt="" /></li></ul></li></ul><h4 id="117-视频标签"><a class="markdownIt-Anchor" href="#117-视频标签"></a> 1.1.7 视频标签</h4><ul><li><strong>标签</strong>：&lt;video src=“视频路径” controls width=“宽度” height=“高度”&gt;<ul><li><code>src</code>：指定视频文件的路径url（绝对路径/相对路径）</li><li><code>controls</code>：指定是否显示播放控件</li><li><code>width</code>：指定视频的宽度（像素/相对于父元素的百分比）</li><li><code>height</code>：指定视频的高度（像素/相对于父元素的百分比）</li></ul></li></ul><h4 id="118-音频标签"><a class="markdownIt-Anchor" href="#118-音频标签"></a> 1.1.8 音频标签</h4><ul><li><strong>标签</strong>：&lt;audio src=“音频路径” controls&gt;<ul><li><code>src</code>：指定音频文件的路径url（绝对路径/相对路径）</li><li><code>controls</code>：指定是否显示播放控件</li></ul></li></ul><h4 id="119-超链接标签"><a class="markdownIt-Anchor" href="#119-超链接标签"></a> 1.1.9 超链接标签</h4><ul><li><strong>标签</strong>：&lt;a href=“链接地址” target=“…”&gt;链接文本&lt;/a&gt;<ul><li><code>href</code>：指定链接地址url（绝对路径/相对路径）</li><li><code>target</code>：指定链接打开方式（_self：默认值，当前窗口打开；_blank：新窗口打开）</li></ul></li></ul><h4 id="1110-布局标签"><a class="markdownIt-Anchor" href="#1110-布局标签"></a> 1.1.10 布局标签</h4><p>实际开发网页中，会大量频繁的使用div和span这两个没有<strong>语义</strong>的布局标签。</p><ul><li><strong>标签</strong>：&lt;div&gt;…&lt;/div&gt; 或者 &lt;span&gt;…&lt;/span&gt;</li><li><strong>特点</strong>：<ul><li><code>div标签</code>:<ul><li>一行只显示一个（独占一行）</li><li>宽度默认是父元素的宽度，高度默认由内容撑开</li><li>可以设置宽高（width、height）</li></ul></li><li><code>span标签</code>：<ul><li>一行可以显示多个（不独占一行）</li><li>宽度和高度默认由内容撑开</li><li>可以设置宽高（width、height）</li></ul></li></ul></li></ul><h4 id="1111-表格标签"><a class="markdownIt-Anchor" href="#1111-表格标签"></a> 1.1.11 表格标签</h4><ul><li><strong>标签</strong>：<ul><li>&lt;table&gt;…&lt;/table&gt;：定义表格</li><li>&lt;tr&gt;…&lt;/tr&gt;：定义表格中的行，一个&lt;tr&gt;表示一行</li><li>&lt;th&gt;…&lt;/th&gt;：表示表头单元格，具有加粗居中效果</li><li>&lt;td&gt;…&lt;/td&gt;：表示普通单元格</li></ul></li><li><strong>场景</strong>：在网页中以表格（行、列）形式整齐展示数据，如：班级表。<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240808222416.png" alt="" /></li></ul><h4 id="1112-表单标签"><a class="markdownIt-Anchor" href="#1112-表单标签"></a> 1.1.12 表单标签</h4><ul><li><strong>标签</strong>：&lt;form action=“提交地址” method=“提交方式”&gt;<ul><li><code>action</code>：指定表单提交的地址url（绝对路径/相对路径）</li><li><code>method</code>：指定表单提交的方式（get/post）<ul><li><code>get</code>：表单数据拼接在url后面，大小有限制。eg：?username=java</li><li><code>post</code>：表单数据放在请求体中，大小无限制。eg：username=java</li></ul></li></ul></li><li><strong>表单项</strong>：<ul><li><code>&lt;input type=&quot;…&quot;&gt;</code>：定义表单项，通过type属性控制输入形式</li><li><code>&lt;select&gt;…&lt;/select&gt;</code>：定义下拉列表，&lt;option&gt;定义列表项</li><li><code>&lt;textarea&gt;…&lt;/textarea&gt;</code>：定义多行文本输入框<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240808223456.png" alt="" /></li></ul></li></ul><blockquote><p><strong>注意</strong>：表单项必须有name属性才可以提交。<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240808224516.png" alt="" /></p></blockquote><h3 id="12-css"><a class="markdownIt-Anchor" href="#12-css"></a> 1.2 CSS</h3><p>CSS（Cascading Style Sheets）：层叠样式表，用于控制页面的样式（表现）。</p><h4 id="121-盒子模型"><a class="markdownIt-Anchor" href="#121-盒子模型"></a> 1.2.1 盒子模型</h4><ul><li><strong>盒子</strong>：页面中的所有元素（标签），都可以看做是一个<span style="color: red;"><strong>盒子</strong></span>，由盒子将页面中的元素包含在一个矩形区域内，通过盒子的视角更方便的进行页面布局</li><li><strong>盒子模型</strong>：盒子由<span style="color: red;"><strong>内容区域（content）</strong>、<strong>内边距区域（padding）</strong>、<strong>边框区域（border）</strong>、<strong>外边距区域（margin）</strong></span>组成。<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240808230724.png" alt="" /></li><li><strong>属性</strong>：<ul><li><code>width</code>：设置盒子的宽度</li><li><code>height</code>：设置盒子的高度</li><li><code>border</code>：设置盒子的边框属性，如：border: 1px solid red/#000/……;</li><li><code>padding</code>：设置盒子的内边距</li><li><code>margin</code>：设置盒子的外边距</li></ul></li></ul><blockquote><p><strong>注意</strong>：如果只需要设置某一个方位的边框、内边距、外边距，可以在属性名后加上 -位置，如：border-top、padding-left、margin-right。</p></blockquote><h4 id="122-css引入方式"><a class="markdownIt-Anchor" href="#122-css引入方式"></a> 1.2.2 CSS引入方式</h4><ul><li><strong>行内样式</strong>：写在标签的style属性中（不推荐）<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>…<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><strong>内嵌模式</strong>：写在style标签中（可以写在页面任何位置，但通常约定写在head标签中）<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">h1</span> <span class="token punctuation">&#123;</span>        &lt;--!属性名：属性值<span class="token punctuation">;</span>-->        <span class="token property">xxx</span><span class="token punctuation">:</span> xxx<span class="token punctuation">;</span>         <span class="token property">xxx</span><span class="token punctuation">:</span> xxx<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><strong>外联模式</strong>：写在外部一个单独的.css文件中（需要通过 link 标签在网页中引入）<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>css/style.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="123-css选择器"><a class="markdownIt-Anchor" href="#123-css选择器"></a> 1.2.3 CSS选择器</h4><ul><li>元素选择器：标签名 {…}</li><li>id选择器：#id属性值 {…}</li><li>类选择器：.class属性值 {…}<br /><strong>优先级</strong>：id选择器 &gt; 类选择器 &gt; 元素选择器<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240808234246.png" alt="" /></li></ul><h4 id="124-css属性"><a class="markdownIt-Anchor" href="#124-css属性"></a> 1.2.4 CSS属性</h4><ul><li><p><strong>颜色和背景</strong></p><ul><li><code>color</code>：设置文本颜色。</li><li><code>background-color</code>：设置背景颜色。</li><li><code>background-image</code>：设置背景图片。</li><li><code>background-repeat</code>：设置背景图片的重复方式。</li><li><code>background-size</code>：设置背景图片的大小。</li></ul></li><li><p><strong>字体和文本</strong></p><ul><li><code>font-family</code>：设置字体系列。</li><li><code>font-size</code>：设置字体大小（记得加px）</li><li><code>font-weight</code>：设置字体粗细。</li><li><code>font-style</code>：设置字体样式（例如：italic）。</li><li><code>text-transform</code>：设置文本的大小写（uppercase, lowercase, capitalize）。</li><li><code>text-decoration</code>：设置文本的装饰（underline, overline, line-through, none）。</li><li><code>letter-spacing</code>：设置字母间距。</li><li><code>word-spacing</code>：设置单词间距。</li></ul></li><li><p><strong>边距和填充</strong></p><ul><li><code>margin</code>：设置外边距。</li><li><code>padding</code>：设置内边距。</li></ul></li><li><p><strong>边框</strong></p><ul><li><code>border</code>：设置边框。</li><li><code>border-width</code>：设置边框宽度。</li><li><code>border-style</code>：设置边框样式（solid, dashed, dotted）。</li><li><code>border-color</code>：设置边框颜色。</li><li><code>border-radius</code>：设置圆角边框。</li></ul></li><li><p><strong>布局</strong></p><ul><li><code>display</code>：设置元素的显示类型（block, inline, flex, grid, none）。</li><li><code>position</code>：设置元素的定位类型（static, relative, absolute, fixed, sticky）。</li><li><code>top</code>, <code>right</code>, <code>bottom</code>, <code>left</code>：设置定位偏移。</li><li><code>z-index</code>：设置元素的堆叠顺序。</li><li><code>overflow</code>：设置溢出内容的处理方式（visible, hidden, scroll, auto）。</li></ul></li><li><p><strong>尺寸</strong></p><ul><li><code>width</code>：设置元素的宽度。</li><li><code>height</code>：设置元素的高度。</li><li><code>max-width</code>：设置元素的最大宽度。</li><li><code>max-height</code>：设置元素的最大高度。</li><li><code>min-width</code>：设置元素的最小宽度。</li><li><code>min-height</code>：设置元素的最小高度。</li></ul></li><li><p><strong>浮动和清除</strong></p><ul><li><code>float</code>：设置元素的浮动（left, right, none）。</li><li><code>clear</code>：设置浮动的清除（left, right, both, none）。</li></ul></li><li><p><strong>表格</strong></p><ul><li><code>border-collapse</code>：设置是否合并表格边框。</li><li><code>border-spacing</code>：设置表格单元之间的边框间距。</li><li><code>caption-side</code>：设置表格标题的位置（top, bottom）。</li><li><code>empty-cells</code>：设置是否显示空单元格（show, hide）。</li></ul></li><li><p><strong>其它</strong></p><ul><li><code>line-height</code>：设置行高</li><li><code>text-indent</code>：设置首行的缩进</li><li><code>text-align</code>：设置元素中文本的水平对齐方式（left/center/right/justify）</li></ul></li></ul><h3 id="13-javascript"><a class="markdownIt-Anchor" href="#13-javascript"></a> 1.3 JavaScript</h3><ul><li>JavaScript（简称：JS）是一门跨平台、面向对象的脚本语言。是用来控制网页行为的语言，它能使网页可交互。</li><li>JavaScript和Java是完全不同的语言，不论是概念还是设计，但是基础语法类似。</li><li>JavaScript在1995年由Brendan Eich发明，并于1997年成为ECMA标准。</li><li>ECMAScript 6（ES6）是最新的JavaScript版本。</li></ul><blockquote><p><strong>ECMA</strong>：ECMA国际（前身为欧洲计算机制造商协会），制定了标准化的脚本程序设计语言 ECMAScript，这种语言得到广泛应用。而JavaScript是遵守ECMAScript标准的脚本语言。</p></blockquote><h4 id="131-js引入方式"><a class="markdownIt-Anchor" href="#131-js引入方式"></a> 1.3.1 JS引入方式</h4><ul><li><strong>内部脚本</strong>：将JS代码定义在HTML页面中<ul><li>JavaScript代码必须位于<code>&lt;script&gt;……&lt;/script&gt;</code>标签之间</li><li>在HTML文档中，可以在任意地方，放置任意数量的&lt;script&gt;标签</li><li>一般会把脚本置于&lt;body&gt;标签中，这样，脚本会在页面加载后执行，改善显示速度。</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Hello JavaScript!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><strong>外部脚本</strong>：将JS代码定义在外部单独的JS文件中，然后引入到HTML页面中<ul><li>外部JS文件中，只包含JS代码，不包含&lt;script&gt;标签,也不包含HTML代码</li><li>&lt;script&gt;标签不能自闭合</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>js/demo.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// demo.js文件</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Hello JavaScript!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h4 id="132-基础语法"><a class="markdownIt-Anchor" href="#132-基础语法"></a> 1.3.2 基础语法</h4><p><strong>1.书写语法</strong>:</p><ul><li><strong>区分大小写</strong>：JavaScript区分大小写，变量名、函数名、关键字等必须使用正确的大小写。</li><li>每行结尾的分号可有可无</li><li><strong>注释</strong>：<ul><li>单行注释：// 注释内容</li><li>多行注释：/* 注释内容 */</li></ul></li><li><strong>大括号表示代码块</strong>：<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 判断</span><span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">alter</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>2.输出语句</strong>：</p><ul><li>使用 <code>window.alert()</code> 函数输出警告框【window可以省略】</li><li>使用<code>document.write()</code> 函数输出到页面</li><li>使用 <code>console.log()</code> 函数输出到浏览器控制台</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">window<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Hello JavaScript!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 浏览器弹出警告框</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"Hello JavaScript!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 写入HTML，在浏览器中显示</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Hello JavaScript!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 写入浏览器控制台</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3.变量</strong>：</p><ul><li>JavaScript中用 <code>var</code> 关键字（variable的缩写）声明变量。<ul><li>var 声明的变量在其所在的函数或全局范围内有效，具有<strong>函数作用域</strong>，而不是块级作用域。这意味着即使 var 声明在块（如 if 或 for 循环）内部，变量仍然在函数范围内或全局范围内有效。</li><li>var声明的变量可以被重复声明，这可能导致意外的行为，因此在现代JavaScript中通常不推荐使用。</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">"A"</span><span class="token punctuation">;</span> <span class="token comment">// 允许重复声明</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 "A"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>JavaScript是一门<strong>弱类型</strong>语言，变量<font color="red">可以存放不同类型的值</font>。<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token string">"张三"</span><span class="token punctuation">;</span><span class="token comment">// 变量 `a` 的类型从数字变成了字符串</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>变量名需要遵循如下规则：<ul><li>组成字符可以是任何字母、下划线、$符号</li><li>不能以数字开头</li><li>建议使用驼峰命名</li></ul></li></ul><blockquote><p><strong>注意</strong>：</p><ul><li>ECMAScript 6（ES6）中，新增了<code>let</code>关键字来定义变量。它的作用类似于var，但是所声明的变量具有<strong>块级作用域</strong>，只在let关键字所在的代码块中有效，且不能重复声明。</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">// let b = 20; // 会抛出错误，因为 `b` 已经在同一块级作用域中声明过</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>ECMAScript 6（ES6）中，新增了<code>const</code>关键字，用来声明一个只读的常量，常量的值一旦声明就不能改变。<font color="red">【但是，const 并不意味着所引用的对象是不可变的。如果 const 引用的是一个对象（包括数组），对象的内容是可以改变的】</font></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">// c = 20; // 会抛出错误，因为 `c` 是常量</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"张三"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"李四"</span><span class="token punctuation">;</span> <span class="token comment">// 允许改变对象内部属性的值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p><strong>4.数据类型</strong>：<br />JavaScript中的数据类型分为：<strong>原始类型</strong>和<strong>引用类型</strong>。</p><ul><li><strong>原始类型</strong>：<ul><li><code>number</code>：表示数字类型，可以是整数、浮点数和 NaN（Not a Number）。</li><li><code>string</code>：表示字符串类型，单引号和双引号都可以。</li><li><code>boolean</code>：表示布尔类型，只能是 true 或 false。</li><li><code>null</code>：表示空值，表示一个空对象。</li><li><code>undefined</code>：表示未定义的值，表示一个未初始化的变量。</li></ul></li><li><strong>引用类型</strong>：<ul><li><code>object</code>：用于存储键值对的集合。对象的键（属性）可以是字符串或符号，值可以是任何类型的数据，包括其它对象。</li><li><code>array</code>：用于存储有序列表的集合。数组的元素可以是任何类型的数据，包括其它数组。可以通过索引（从0开始）访问数组的元素。</li><li><code>function</code>：表示函数类型。函数在JavaScript中是&quot;一等公民&quot;，意味着函数可以作为变量的值，作为参数传递给其他函数，也可以作为返回值。</li><li>……</li></ul></li></ul><blockquote><p>使用<code>typeof</code>关键字可以获取变量的类型。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token function">alter</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote><p><strong>5.运算符</strong>：</p><ul><li><strong>算术运算符</strong>：+，-，*，/，%，++，–</li><li><strong>赋值运算符</strong>：=，+=，-=，*=，/=，%=</li><li><strong>比较运算符</strong>：==，!=，<code>===</code>，<code>!==</code>，&gt;，&lt;，&gt;=，&lt;=</li><li><strong>逻辑运算符</strong>：&amp;&amp;，||，!</li><li><strong>三元运算符</strong>：条件表达式? true_value: false_value，</li></ul><blockquote><p><code>==</code>与<code>===</code>的区别：</p><ul><li><code>==</code>：比较两个值是否相等，忽略类型。【会进行类型转换】</li><li><code>===</code>：比较两个值是否相等，同时比较类型。【不会进行类型转换】</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token function">alter</span><span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token function">alter</span><span class="token punctuation">(</span>a <span class="token operator">===</span> <span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span class="token function">alter</span><span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>类型转换</strong>：</p><ul><li><strong>字符串类型转为数字</strong>：<ul><li>将字符串面值转为数字。如果字面值不是数字，则返回NaN。</li></ul></li><li><strong>其它类型转为boolean</strong>：<ul><li>Number：0和NAN为false，其它为true。</li><li>String：空字符串为false，其它为true。</li><li>Null和Undefined为false。</li></ul></li></ul></blockquote><p><strong>parseInt()</strong>：将字符串转为整数的函数。它的语法如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">parseInt</span><span class="token punctuation">(</span>string<span class="token punctuation">,</span> radix<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p><strong>string</strong>: 你想要解析的字符串。这个字符串的开头可以包含空格，但在遇到第一个无法转换为数字的字符时，<code>parseInt</code> 会停止解析并返回已经解析的部分。字符串中的非数字字符会导致解析停止。</p></li><li><p><strong>radix</strong>: 可选参数，表示进制数。它的值可以在 2 到 36 之间。如果不指定 <code>radix</code>，<code>parseInt</code> 会根据字符串的内容自动确定进制：</p><ul><li>如果字符串以 “0x” 或 “0X” 开头，<code>parseInt</code> 会将其视为 16 进制。</li><li>如果字符串以 “0” 开头，<code>parseInt</code> 会将其视为 8 进制（在老版本的 JavaScript 中，现代浏览器已经不再这么处理）。</li><li>否则，<code>parseInt</code> 会将其视为 10 进制。</li></ul></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"42"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// 返回 42</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"101"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 返回 5 (二进制的 101 为十进制的 5)</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"0xF"</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 返回 15 (16 进制的 F 为十进制的 15)</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 返回 8 (8 进制的 10 为十进制的 8)</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 返回 10 (十进制的 10 为十进制的 10)</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"abc123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 返回 NaN (因为 "abc" 不是数字)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注意事项</strong></p><ul><li>如果 <code>string</code> 的第一个字符无法转换为数字，那么 <code>parseInt</code> 将返回 <code>NaN</code>。</li><li><code>NaN</code> (Not a Number) 是 JavaScript 中表示一个非数字的特殊值。</li><li>你可以使用 <code>isNaN()</code> 函数来检查 <code>parseInt</code> 的返回值是否是 <code>NaN</code>。</li></ul></blockquote><p><strong>6.流程控制语句</strong>：</p><ul><li><strong>if…else</strong>：用于条件判断。</li><li><strong>switch</strong>：用于多分支判断。</li><li><strong>for</strong>：用于循环。</li><li><strong>while</strong>：用于循环。</li><li><strong>do…while</strong>：用于循环。</li></ul><p><a href="https://www.w3school.com.cn/jsref/jsref_statements.asp">参考官方文档</a></p><h4 id="133-js函数"><a class="markdownIt-Anchor" href="#133-js函数"></a> 1.3.3 JS函数</h4><ul><li><strong>介绍</strong>：函数（方法）是被设计为执行特定任务的代码块。</li><li><strong>定义</strong>：JavaScript 函数通过 <code>function</code> 关键字来定义。语法为：<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 方式一：</span><span class="token keyword">function</span> <span class="token function">functionName</span><span class="token punctuation">(</span><span class="token parameter">parameter1<span class="token punctuation">,</span> parameter2<span class="token punctuation">,</span> <span class="token operator">...</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 要执行的代码</span><span class="token punctuation">&#125;</span><span class="token comment">// 方式二：</span><span class="token keyword">var</span> <span class="token function-variable function">functionName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">parameter1<span class="token punctuation">,</span> parameter2<span class="token punctuation">,</span> <span class="token operator">...</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 要执行的代码</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><strong>注意</strong>：<ul><li>形式参数不需要类型。因为JavaScript 是弱类型语言，参数类型由调用者决定。</li><li>函数可以返回值。如果函数没有返回值 或者 return 后没有跟随任何值，则返回 <code>undefined</code>。</li><li>返回值也不需要定义类型，可以在函数内部直接使用return返回值即可</li></ul></li><li><strong>调用</strong>：函数名称（实际参数列表）</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 方式一：</span><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 方式二：</span><span class="token keyword">var</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注意事项</strong>：<br />JS中，函数调用可以传递任意个数的参数。<font color="red">但只会截取需要的前几个</font></p></blockquote><h4 id="134-js对象"><a class="markdownIt-Anchor" href="#134-js对象"></a> 1.3.4 JS对象</h4><p><strong>1.Array</strong></p><ul><li><strong>介绍</strong>：JavaScript 数组是一种特殊的对象，用于存储多个值。</li><li><strong>定义</strong>：<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 方式一：</span><span class="token keyword">var</span> 变量名 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>元素列表<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 方式二：</span><span class="token keyword">var</span> 变量名 <span class="token operator">=</span> <span class="token punctuation">[</span>元素列表<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><strong>赋值/访问</strong>：<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">arr<span class="token punctuation">[</span>索引<span class="token punctuation">]</span> <span class="token operator">=</span> 值<span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token function">alter</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 警告框输出hello</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><blockquote><p><strong>注意事项</strong>：<br />JavaScript 中的数组相当于 Java 中的集合，数组的长度是可变的，而JavaScript是弱类型，所以可以存储任意的类型的数据。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// hello</span>arr<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"A"</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><ul><li><strong>属性</strong>：<ul><li><strong><code>length</code></strong>：表示数组中元素的数量。你可以读取这个属性来获取数组的长度，也可以设置它来改变数组的长度。<ul><li><strong>设置 <code>length</code></strong>：如果设置 <code>length</code> 为比当前长度小的值，数组将被截断。如果设置为更大的值，数组会用 <code>undefined</code> 填充新的位置。</li></ul></li></ul></li><li><strong>方法</strong>：<ul><li><strong><code>toString()</code></strong>：将数组转换为字符串，元素之间用逗号分隔。</li><li><strong><code>join(separator)</code></strong>：将数组转换为字符串，元素之间用指定的 <code>separator</code> 分隔。如果不提供 <code>separator</code>，则使用逗号作为默认分隔符。</li><li><strong><code>forEach(callback)</code></strong>：对数组中的每个元素执行一次提供的函数 <code>callback</code>。<code>callback</code> 接受三个参数：当前元素值、当前元素的索引、整个数组。<code>forEach</code> 不会改变原数组。</li><li><strong><code>push(element1, ..., elementN)</code></strong>：将一个或多个新元素添加到数组的末尾，并返回数组的新长度。</li><li><strong><code>splice(start, deleteCount, item1, ..., itemN)</code></strong>：用于在数组中添加或删除元素。<code>start</code> 是开始位置的索引，<code>deleteCount</code> 指定要删除的元素数量，<code>item1, ..., itemN</code> 是要添加的新元素。这个方法会直接修改原数组，并返回被删除的元素。</li></ul></li></ul><p><strong>代码示例：</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 创建一个数组</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// length 属性</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出: 3</span>arr<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出: [1, 2, 3, undefined, undefined]</span><span class="token comment">// toString() 方法</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出: "1,2,3,,"</span><span class="token comment">// join() 方法</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出: "1-2-3--"</span><span class="token comment">// forEach() 方法</span>arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Index </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>index<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>element<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 或者 console.log("Index " + index + ": " + element);</span>  <span class="token comment">// $&#123;&#125; 是模板字符串（template literals）中的一种语法，用于在字符串中插入变量或表达式的值。模板字符串使用反引号（`）括起来，并允许在字符串中嵌入表达式。</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 输出:</span><span class="token comment">// Index 0: 1</span><span class="token comment">// Index 1: 2</span><span class="token comment">// Index 2: 3</span><span class="token comment">// Index 3: undefined</span><span class="token comment">// Index 4: undefined</span><span class="token comment">// push() 方法</span>arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出: [1, 2, 3, undefined, undefined, 6]</span><span class="token comment">// splice() 方法</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出: [1, 2, "a", "b", undefined, 6]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>箭头函数(ES6)：是用来简化函数定义语法的，具体形式为：(……) =&gt; {…}，如果需要给箭头函数起名字：var func = (……) =&gt; {…}</p></blockquote><p><strong>2.String</strong></p><ul><li><p><strong>介绍</strong>：JavaScript 字符串是一种特殊类型的对象，用于存储和操作文本。</p></li><li><p><strong>定义</strong>：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 方式一：</span><span class="token keyword">var</span> 变量名 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"……"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"Hello, World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 方式二：</span><span class="token keyword">var</span> 变量名 <span class="token operator">=</span> <span class="token string">"……"</span><span class="token punctuation">;</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"Hello, World!"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>属性</strong>：</p><ul><li><strong><code>length</code></strong>：返回字符串的长度，表示字符串中字符的个数。</li></ul></li><li><p><strong>方法</strong>：</p><ul><li><strong><code>charAt(index)</code></strong>：返回指定位置的字符。<code>index</code> 从 0 开始计算。</li><li><strong><code>indexOf(substring)</code></strong>：返回子字符串在字符串中第一次出现的位置，如果没有找到，则返回 <code>-1</code>。</li><li><strong><code>trim()</code></strong>：去除字符串两边的空格（包括换行符和制表符）。</li><li><strong><code>substring(startIndex, endIndex)</code></strong>：提取字符串中从 <code>startIndex</code> 到 <code>endIndex</code> 之间的字符，<code>endIndex</code> 处的字符不包括在内。【包左不包右】</li></ul></li></ul><p><strong>代码示例：</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// length 属性</span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">"Hello, world!"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出: 13</span><span class="token comment">// charAt() 方法</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出: "w"</span><span class="token comment">// indexOf() 方法</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出: 7</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 输出: -1</span><span class="token comment">// trim() 方法</span><span class="token keyword">let</span> strWithSpaces <span class="token operator">=</span> <span class="token string">"   Hello, world!   "</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>strWithSpaces<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出: "Hello, world!"</span><span class="token comment">// substring() 方法</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出: "Hello"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: "world"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3.自定义对象</strong></p><ul><li><strong>介绍</strong>：JavaScript 中的对象是一种复杂的数据类型，可以包含多个属性和方法。</li><li><strong>定义</strong>：<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* var 对象名 = &#123;    属性名1: 值1,    属性名2: 值2,    属性名3: 值3,    函数名称：function(参数列表) &#123;&#125; ,可以省略"：function"&#125;; */</span><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"John"</span><span class="token punctuation">,</span>  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>  <span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token string">"Male"</span><span class="token punctuation">,</span>  <span class="token function-variable function">eat</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Eating..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token operator">==</span>      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Eating..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>                             <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><strong>调用</strong>：<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* 对象名.属性名;对象名.方法名(); */</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>person<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>4.JSON</strong></p><ul><li><strong>介绍</strong>：<ul><li>JSON是通过JavaScript对象标记法书写的文本。</li><li>JSON（JavaScript Object Notation）是一种轻量级的数据交换格式，主要用于在网络传输数据。</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"John"</span><span class="token punctuation">,</span>  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>  <span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token string">"Male"</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240810004428.png" alt="" /></li><li><strong>定义</strong>：<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> 变量名 <span class="token operator">=</span> <span class="token string">'&#123;"属性名1":"值1","属性名2":"值2","属性名3":"值3"&#125;'</span><span class="token punctuation">;</span><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token string">'&#123;"name":"John","age":30,"gender":"Male","addr":["北京","上海","广州"]&#125;'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>值的数据类型为：<ul><li>数字（整数或浮点数）</li><li>字符串（在双引号中）</li><li>逻辑值（true 或 false）</li><li>数组（在方括号中）</li><li>对象（在花括号中）</li><li>null</li></ul></li><li><strong>方法</strong>：<ul><li><strong><code>JSON.parse(json)</code></strong>：将 JSON 字符串转换为 JavaScript 对象。</li><li><strong><code>JSON.stringify(obj)</code></strong>：将 JavaScript 对象转换为 JSON 字符串。</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> jsObject <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> jsonStr <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>jsObject<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><p><strong>5.BOM</strong></p><ul><li><strong>介绍</strong>：BOM（Browser Object Model）是浏览器对象模型的缩写，它提供了与浏览器窗口交互的接口。JavaScript 将浏览器的各个组成部分封装为对象。</li><li><strong>组成</strong>：<ul><li><strong><code>Window</code></strong>：浏览器窗口对象</li><li><strong><code>Navigator</code></strong>：浏览器信息对象</li><li><strong><code>Screen</code></strong>：屏幕信息对象</li><li><strong><code>History</code></strong>：历史记录对象</li><li><strong><code>Location</code></strong>：地址栏对象</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240810005713.png" alt="" /></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 获取</span>window<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Hello BOM"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Hello BOM Window"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 方法</span><span class="token comment">// confirm - 对话框 -- 确认: true，取消: false</span><span class="token keyword">var</span> flag <span class="token operator">=</span> <span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">"您确认删除该记录吗？"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 定时器 - setInterval -- 周期性地执行某个函数</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    i<span class="token operator">++</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"定时器执行了"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"次"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 定时器 - setTimeout -- 延迟指定时间执行一次</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"JS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240810005918.png" alt="" /></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// location</span><span class="token function">alter</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>href<span class="token punctuation">)</span><span class="token punctuation">;</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">"https://www.baidu.com"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>6.DOM</strong><br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240810010120.png" alt="" /><br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240810010134.png" alt="" /></p><ul><li>HTML中的Element对象可以通过<code>Document</code>对象获取，而<code>Document</code>对象可以通过<code>window</code>对象获取。</li><li><code>Document</code>对象中提供了以下获取Element元素对象的函数：<ul><li><strong><code>getElementById(id)</code></strong>：根据元素的id属性值获取元素对象，返回单个Element对象。</li><li><strong><code>getElementsByTagName(tagName)</code></strong>：根据元素的标签名获取元素对象，返回一个Element对象的<font color="red">数组</font>。</li><li><strong><code>getElementsByName(name)</code></strong>：根据元素的name属性值获取元素对象，返回一个Element对象的<font color="red">数组</font>。</li><li><strong><code>getElementsByClassName(className)</code></strong>：根据元素的class属性值获取元素对象，返回一个Element对象的<font color="red">数组</font>。</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 根据元素的id属性值</span><span class="token keyword">var</span> h1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'h1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 根据元素的标签名</span><span class="token keyword">var</span> divs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 根据元素的name属性值</span><span class="token keyword">var</span> hobbys <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByName</span><span class="token punctuation">(</span><span class="token string">'hobby'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 根据元素的class属性值</span><span class="token keyword">var</span> clss <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">'cls'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>7.事件监听</strong></p><ul><li><strong>介绍</strong>：JavaScript 事件是发生在 HTML 元素上的交互行为，如鼠标点击、键盘按键等。</li><li><strong>事件监听</strong>：JavaScript可以在事件被侦测到时<strong>执行代码</strong>。</li><li><strong>事件绑定</strong>：<ul><li>方式一：通过HTML标签中的事件属性进行绑定</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>按钮<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">function</span> <span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"按钮被点击了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>方式二：通过DOM元素属性绑定</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>按钮<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"按钮被点击了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240810011318.png" alt="" /></p><h3 id="14-vue"><a class="markdownIt-Anchor" href="#14-vue"></a> 1.4 Vue</h3><ul><li>Vue是一套<strong>前端框架</strong>，，免除原生JavaScript中的DOM操作，简化书写。</li><li>基于<strong>MVVM</strong>（Model-View-ViewModel）思想，实现数据的<strong>双向绑定</strong>，将编程的关注点放在数据上。</li><li>官网：<a href="https://cn.vuejs.org/">https://cn.vuejs.org/</a><br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240810121232.png" alt="" /></li></ul><blockquote><p>框架：是一个半成品软件，是一套可重用的、通用的、软件基础代码模型。基于框架进行开发，更加快捷，高效。</p></blockquote><h4 id="141-快速入门"><a class="markdownIt-Anchor" href="#141-快速入门"></a> 1.4.1 快速入门</h4><ul><li>新建HTML文件，引入Vue.js文件：<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>在JS代码区域，创建Vue核心对象，定义数据类型<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">'Hello Vue!'</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>编写视图<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>&#123;&#123; message &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><blockquote><p><strong>插值表达式：</strong></p><ul><li><strong>形式</strong>：<code>&#123;&#123; 表达式 &#125;&#125;</code></li><li><strong>作用</strong>：将数据绑定到视图中</li><li><strong>内容</strong>：变量、三元运算符、函数调用 或 算术运算</li></ul></blockquote><h4 id="142-常用指令"><a class="markdownIt-Anchor" href="#142-常用指令"></a> 1.4.2 常用指令</h4><ul><li><strong>指令</strong>：HTML标签上带有<code>v-</code>前缀的特殊属性，不同指令具有不同含义。</li><li><strong>常用指令</strong>：</li></ul><table><thead><tr><th>指令</th><th>用途</th><th>语法</th></tr></thead><tbody><tr><td><code>v-bind</code></td><td>动态地绑定一个或多个特性（attributes）到一个元素上，如设置href、css样式等</td><td><code>v-bind:attribute=&quot;expression&quot;</code> （简写：<code>:</code>）</td></tr><tr><td><code>v-model</code></td><td>创建一个双向数据绑定，通常用于表单元素</td><td><code>v-model=&quot;dataProperty&quot;</code></td></tr><tr><td><code>v-if</code></td><td>条件渲染，根据表达式的真假条件<code>有选择地渲染元素</code></td><td><code>v-if=&quot;condition&quot;</code></td></tr><tr><td><code>v-else-if</code></td><td>条件渲染，用于在 <code>v-if</code> 之外添加条件</td><td><code>v-else-if=&quot;condition&quot;</code></td></tr><tr><td><code>v-else</code></td><td>条件渲染，当所有 <code>v-if</code> 和 <code>v-else-if</code> 的条件都不满足时渲染元素</td><td><code>v-else</code></td></tr><tr><td><code>v-show</code></td><td>基于条件展示元素，<code>元素总是被渲染</code>，只是简单地控制元素的显示和隐藏（<code>display: none</code>）</td><td><code>v-show=&quot;condition&quot;</code></td></tr><tr><td><code>v-for</code></td><td>基于一个数组或对象的迭代渲染一个列表。对于数组，可以获取每个元素的值和下标；对于对象，可以获取每个键值对的键和值。</td><td><code>v-for=&quot;item in items&quot;</code></td></tr><tr><td><code>v-on</code></td><td>监听DOM事件，并在事件发生时执行指定的JavaScript表达式或方法</td><td><code>v-on:event=&quot;handler&quot;</code>（简写：<code>@</code>）</td></tr><tr><td><code>v-cloak</code></td><td>避免Vue实例接管模板前闪烁的内容（通常配合CSS使用）</td><td>无表达式</td></tr><tr><td><code>v-pre</code></td><td>跳过这个元素和它的所有子元素的编译过程，以加快初次渲染速度</td><td>无表达式</td></tr><tr><td><code>v-once</code></td><td>只渲染元素和组件一次，之后就不会再更新</td><td>无表达式</td></tr><tr><td><code>v-html</code></td><td>输出原始的HTML，不进行HTML转义（小心XSS攻击）</td><td><code>v-html=&quot;htmlContent&quot;</code></td></tr></tbody></table><p><strong>代码示例</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- v-bind 示例 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Link<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 简写 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">:href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Link<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- v-model 示例 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Enter something<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- v-if / v-else-if / v-else 示例 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age &lt;= 35<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>年轻人<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-else-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age > 35 &amp;&amp; age &lt;= 60<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>中年人<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-else</span><span class="token punctuation">></span></span>老年人<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- v-show 示例 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age &lt;= 35<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>年轻人<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- v-for 示例 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item in items<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123; item.text &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(item,index) in items<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>&#123;&#123; index+1 &#125;&#125; : &#123;&#123;item&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- v-on 示例 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>doSomething<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Click me<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 简写 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>doSomething<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Click me<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Button clicked!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- v-cloak 示例 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-cloak</span><span class="token punctuation">></span></span>  &#123;&#123; message &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">[v-cloak]</span> <span class="token punctuation">&#123;</span> <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- v-pre 示例 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-pre</span><span class="token punctuation">></span></span>&#123;&#123; raw &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- v-once 示例 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-once</span><span class="token punctuation">></span></span>&#123;&#123; message &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- v-html 示例 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-html</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rawHtml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注意事项</strong>：</p><ul><li>通过<code>v-bind</code>或者<code>v-model</code>绑定的变量，必须在数据模型中声明</li></ul></blockquote><h4 id="143-生命周期"><a class="markdownIt-Anchor" href="#143-生命周期"></a> 1.4.3 生命周期</h4><ul><li><strong>生命周期</strong>：指一个对象从创建到销毁的整个过程。</li><li><strong>八个阶段</strong>：每触发一个生命周期事件，会自动执行一个生命周期方法(钩子)。<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240810134011.png" alt="" /></li><li><strong>mounted</strong>：挂载完成，Vue初始化成功，HTML页面渲染成功。（发送请求到服务端，加载数据）<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240810133326.png" alt="" /></li></ul><h3 id="15-ajax"><a class="markdownIt-Anchor" href="#15-ajax"></a> 1.5 Ajax</h3><ul><li><p><strong>概念</strong>：<code>Ajax</code> 是 <code>Asynchronous JavaScript and XML</code> 的缩写，表示异步的 JavaScript 和 XML。它是一种用于在不重新加载整个网页的情况下，进行数据交换并更新网页部分内容的技术。Ajax 通常利用 <code>XMLHttpRequest</code> 对象来发送和接收数据，但它并不仅限于 XML，现代应用中也常用 JSON 格式进行数据交换。</p></li><li><p><strong>作用</strong>：</p><ul><li><strong>数据交换</strong>：通过 Ajax 可以与服务器进行数据交互，发送请求并接收响应数据，而不需要刷新整个页面。</li><li><strong>异步交互</strong>：Ajax 允许网页在后台与服务器进行数据交换，从而在不刷新整个页面的情况下动态更新页面的部分内容。常见的应用场景包括：搜索联想、表单验证（如用户名是否可用）、自动加载更多内容等。</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240810153628.png" alt="" /></p><blockquote><p><strong>进一步说明</strong></p><ul><li>虽然 <code>Ajax</code> 中的 <code>XML</code> 表示可使用 XML 进行数据交换，但现代开发中更多使用 JSON 作为数据交换格式，因为 JSON 更轻量且更易于 JavaScript 解析。</li><li>Ajax 的核心是 <code>XMLHttpRequest</code> 对象，但在现代开发中，<code>fetch</code> API 也经常用来实现类似的异步数据交互功能。</li></ul></blockquote><ul><li><p><strong>异步VS同步</strong>：<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240810153824.png" alt="" /></p></li><li><p><strong>Ajax请求流程</strong>：<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240810153934.png" alt="" /></p></li><li><p><strong>XMLHttpRequest对象属性</strong>：<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240810154050.png" alt="" /></p></li></ul><h3 id="16-axios"><a class="markdownIt-Anchor" href="#16-axios"></a> 1.6 Axios</h3><ul><li><strong>概念</strong>：Axios对原生的Ajax进行了封装，简化书写，快速开发。</li><li><strong>官网</strong>：<a href="https://www.axios-http.cn/">https://www.axios-http.cn/</a></li><li><strong>请求方式别名</strong>：<ul><li><code>axios.get(url [,config])</code></li><li><code>axios.delete(url [,config])</code></li><li><code>axios.post(url [,data[,config]])</code></li><li><code>axios.put(url [,data[,config]])</code></li></ul></li><li><strong>入门示例</strong>：<ul><li><strong>1.引入Axios的js文件</strong></li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://unpkg.com/axios/dist/axios.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong>2.使用Axios发送请求，并获取响应结果</strong></li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">axios.get("https://api.example.com/data").then((result) => &#123;  console.log(result.data);&#125;)// 处理响应结果axios.post("https://api.example.com/data","id=1").then((result) => &#123;  console.log(result.data);&#125;)// 处理响应结果     <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="17-vue项目"><a class="markdownIt-Anchor" href="#17-vue项目"></a> 1.7 Vue项目</h3><p><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240810155548.png" alt="" /><br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240810155629.png" alt="" /></p><h3 id="18-element组件"><a class="markdownIt-Anchor" href="#18-element组件"></a> 1.8 Element组件</h3><ul><li><strong>概念</strong>：是饿了么团队开发的，一套为开发者、设计师和产品经理准备的基于Vue2.0的桌面端组件库。</li><li><strong>组件</strong>：组成网页的部件，例如 超链接、按钮、图片、表格、表单、分页条等。</li><li><strong>官网</strong>：<a href="https://element.eleme.cn/">https://element.eleme.cn/</a></li></ul><p><strong>快速入门</strong>：</p><ul><li>安装ElementUI组件库（在当前工程的目录下），在命令行执行指令：<pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">npm install element-ui@2.15.6 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>引入ElementUI组件库<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">// main.js文件中引入import ElementUI from 'element-ui';import 'element-ui/lib/theme-chalk/index.css';Vue.use(ElementUI);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>访问官网，复制组件代码并调整。</li></ul><h2 id="2maven"><a class="markdownIt-Anchor" href="#2maven"></a> 2.Maven</h2><h3 id="21-介绍"><a class="markdownIt-Anchor" href="#21-介绍"></a> 2.1 介绍</h3><ul><li><strong>概念</strong>：Apache Maven 是一个项目管理和构建工具，用于管理项目的构建、报告和文档。它基于项目对象模型（POM）的概念，通过一小段描述信息来管理项目的构建。</li><li><strong>作用</strong>：<ul><li>方便的依赖管理</li><li>统一的项目结构</li><li>标准的项目构建流程</li></ul></li><li><strong>官网</strong>：<a href="https://maven.apache.org/">https://maven.apache.org/</a></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240810204935.png" alt="" /></p><h3 id="22-maven坐标"><a class="markdownIt-Anchor" href="#22-maven坐标"></a> 2.2 Maven坐标</h3><ul><li><strong>概念</strong>：<ul><li>Maven中的坐标是<font color="red">资源的唯一标识，通过该坐标可以唯一定位资源位置</font>。</li><li>使用坐标来定义项目或者引入项目中需要的依赖。</li></ul></li><li><strong>主要组成</strong>：<ul><li><strong><code>groupId</code></strong>：定义当前Maven项目隶属组织名称（通常是域名反写，例如：ink.lusy）</li><li><strong><code>artifactId</code></strong>：定义当前Maven项目名称（通常是模块名，例如：order-service、goods-service）</li><li><strong><code>version</code></strong>：定义当前Maven项目版本号（例如：1.0.0）</li></ul></li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>ink.lusy<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-project01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="23-依赖配置"><a class="markdownIt-Anchor" href="#23-依赖配置"></a> 2.3 依赖配置</h3><ul><li><strong>依赖</strong>：指当前项目运行所需要的jar包，一个项目中可以引入多个依赖。</li><li><strong>配置</strong>：<ul><li>在pom.xml文件中编写<code>&lt;dependencies&gt;</code>标签</li><li>在<code>&lt;dependencies&gt;</code>标签中使用<code>&lt;dependency&gt;</code>引入坐标</li><li>定义坐标的<code>groupId</code>、<code>artifactId</code>、<code>version</code></li><li>点击刷新按钮，引入最新加入的坐标<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240810210505.png" alt="" /></li></ul></li></ul><blockquote><p><strong>注意事项</strong>：</p><ul><li>如果引入的依赖，在本地仓库不存在，将会连接远程仓库/中央仓库，然后下载依赖。</li><li>如果不知道依赖的坐标信息，可以到<a href="https://mvnrepository.com/">https://mvnrepository.com/</a>中搜索。</li></ul></blockquote><h3 id="24-依赖传递"><a class="markdownIt-Anchor" href="#24-依赖传递"></a> 2.4 依赖传递</h3><ul><li><strong>依赖具有传递性</strong><ul><li><strong>直接依赖</strong>：在当前项目中通过依赖配置建立的依赖关系</li><li><strong>间接依赖</strong>：被依赖的资源如果依赖其它资源，当前项目间接依赖了被依赖的资源<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240810211620.png" alt="" /></li></ul></li><li><strong>依赖冲突</strong>：当依赖传递时，如果存在多个依赖，且依赖的版本号不同，则存在依赖冲突。<br />当直接引用或者间接引用出现了相同的jar包! 这时呢，一个项目就会出现相同的重复jar包，这就算作冲突！依赖冲突避免出现重复依赖，并且终止依赖传递！<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240819174427.png" alt="" /><br />maven自动解决依赖冲突问题能力，会按照自己的原则，进行重复依赖选择。同时也提供了手动解决的冲突的方式，不过不推荐！<br /><strong>解决依赖冲突（如何选择重复依赖）方式：</strong><ul><li>短路优先原则（第一原则）<br />A—&gt;B—&gt;C—&gt;D—&gt;E—&gt;X(version 0.0.1)<br />A—&gt;F—&gt;X(version 0.0.2)<br />则A依赖于X(version 0.0.2)。</li><li>依赖路径长度相同情况下，则“先声明优先”（第二原则）<br />A—&gt;E—&gt;X(version 0.0.1)<br />A—&gt;F—&gt;X(version 0.0.2)<br />在&lt;depencies&gt;\……</depencies>中，先声明的，路径相同，会优先选择！</li></ul></li></ul><p><strong>小测试</strong>：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">前提：   A 1.1 -> B 1.1 -> C 1.1    F 2.2 -> B 2.2    pom声明：   F 2.2   A 1.1    B 2.2    C不会被引入<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>排除依赖</strong>：当依赖传递时，如果存在依赖冲突，可以通过<code>&lt;exclusions&gt;</code>标签，排除依赖。<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240810211807.png" alt="" /></li><li><strong>依赖范围</strong>：<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240810211843.png" alt="" /></li></ul><h3 id="25-生命周期"><a class="markdownIt-Anchor" href="#25-生命周期"></a> 2.5 生命周期</h3><p>Maven的生命周期就是为了对所有的maven项目构建过程进行抽象和统一。<br />Maven中有3套<font color="red">相互独立</font>的生命周期：</p><ul><li><strong>clean</strong>：清理项目</li><li><strong>default</strong>：核心工作，包含编译、测试、打包、部署等操作</li><li><strong>site</strong>：生成报告、发布站点等。<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240810212415.png" alt="" /><br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240810212739.png" alt="" /><br /><strong>执行指定生命周期的两种方式</strong>：<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240810212837.png" alt="" /></li></ul><h3 id="26-项目结构"><a class="markdownIt-Anchor" href="#26-项目结构"></a> 2.6 项目结构</h3><p>Maven 是一个强大的构建工具，它提供一种标准化的项目结构，可以帮助开发者更容易地管理项目的依赖、构建、测试和发布等任务。以下是 Maven Web 程序的文件结构及每个文件的作用：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">|-- pom.xml                               # Maven 项目管理文件 |-- src    |-- main                              # 项目主要代码    |   |-- java                          # Java 源代码目录    |   |   `-- com/example/myapp         # 开发者代码主目录    |   |       |-- controller            # 存放 Controller 层代码的目录    |   |       |-- service               # 存放 Service 层代码的目录    |   |       |-- dao                   # 存放 DAO 层代码的目录    |   |       `-- model                 # 存放数据模型的目录    |   |-- resources                     # 资源目录，存放配置文件、静态资源等    |   |   |-- log4j.properties          # 日志配置文件    |   |   |-- spring-mybatis.xml        # Spring Mybatis 配置文件    |   |   `-- static                    # 存放静态资源的目录    |   |       |-- css                   # 存放 CSS 文件的目录    |   |       |-- js                    # 存放 JavaScript 文件的目录    |   |       `-- images                # 存放图片资源的目录    |   `-- webapp                        # 存放 WEB 相关配置和资源    |       |-- WEB-INF                   # 存放 WEB 应用配置文件    |       |   |-- web.xml               # Web 应用的部署描述文件    |       |   `-- classes               # 存放编译后的 class 文件    |       `-- index.html                # Web 应用入口页面    `-- test                              # 项目测试代码        |-- java                          # 单元测试目录        `-- resources                     # 测试资源目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>pom.xml</strong>：Maven 项目管理文件，用于描述项目的依赖和构建配置等信息。</li><li><strong>src/main/java</strong>：存放项目的 Java 源代码。</li><li><strong>src/main/resources</strong>：存放项目的资源文件，如配置文件、静态资源等。</li><li><strong>src/main/webapp/WEB-INF</strong>：存放 Web 应用的配置文件。</li><li><strong>src/main/webapp/index.html</strong>：Web 应用的入口页面。</li><li><strong>src/test/java</strong>：存放项目的测试代码。</li><li><strong>src/test/resources</strong>：存放测试相关的资源文件，如测试配置文件等。</li></ul><h2 id="3http"><a class="markdownIt-Anchor" href="#3http"></a> 3.HTTP</h2><h3 id="31-概念"><a class="markdownIt-Anchor" href="#31-概念"></a> 3.1 概念</h3><p>HTTP（Hypertext Transfer Protocol，超文本传输协议）是一种用于传输超文本信息的协议。规定了浏览器和服务器之间数据传输的规则。</p><h3 id="32特点"><a class="markdownIt-Anchor" href="#32特点"></a> 3.2特点</h3><ul><li><strong>基于TCP协议</strong>：面向连接，安全。</li><li><strong>基于请求-响应模型</strong>：一次请求对应一次响应。</li><li><strong>无状态</strong>：对于事务处理没有记忆能力。每次请求-响应都独立的，没有保存信息。<ul><li>缺点：多次请求间不能共享数据。</li><li>优点：速度快</li></ul></li></ul><h3 id="32-请求数据格式"><a class="markdownIt-Anchor" href="#32-请求数据格式"></a> 3.2 请求数据格式</h3><p><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240811142141.png" alt="" /><br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240811142211.png" alt="" /></p><h3 id="33响应数据格式"><a class="markdownIt-Anchor" href="#33响应数据格式"></a> 3.3响应数据格式</h3><p><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240811142427.png" alt="" /><br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240811142452.png" alt="" /></p><p><strong>常见的响应状态码</strong></p><table><thead><tr><th>状态码</th><th>英文描述</th><th>解释</th></tr></thead><tbody><tr><td>200</td><td>OK</td><td>客户端请求成功。即<strong>处理成功</strong>，这是我们最想看到的状态码</td></tr><tr><td>302</td><td>Found</td><td>指示所请求的资源已移动到由<code>Location</code>响应头给定的 URL，浏览器会自动重新访问到这个页面</td></tr><tr><td>304</td><td>Not Modified</td><td>告诉客户端，你请求的资源至上次取得后，服务器并未改。你直接用你本地缓存吧。隐式重定向</td></tr><tr><td>400</td><td>Bad Request</td><td>客户端请求有<strong>语法错误</strong>，不能被服务器所理解</td></tr><tr><td>403</td><td>Forbidden</td><td>服务器收到请求，但是<strong>拒绝提供服务</strong>，比如：没有权限访问相关资源</td></tr><tr><td>404</td><td>Not Found</td><td><strong>请求资源不存在</strong>。一般是URL输入有误，或者网站资源被删除了</td></tr><tr><td>405</td><td>Method Not Allowed</td><td>请求方法有误，比如本应用GET请求方式的资源，用了POST</td></tr><tr><td>428</td><td>Precondition Required</td><td><strong>服务器要求有条件的请求</strong>，告诉客户端需要访问该资源，必须携带特定的请求头</td></tr><tr><td>429</td><td>Too Many Requests</td><td>用户在给定时间内发送了<strong>太多请求</strong>（“限速”），配合<code>Retry-After</code>（多长时间后可以请求）响应头一起使用</td></tr><tr><td>431</td><td>Request Header Fields Too Large</td><td><strong>请求头太大</strong>。服务器不愿意处理请求，因为它的头字段太大。请求可以在减少请求头域的大小后重新提交。</td></tr><tr><td>500</td><td>Internal Server Error</td><td><strong>服务器发生不可预期的错误</strong>。服务器出异常了，赶紧看日志去吧</td></tr><tr><td>503</td><td>Service Unavailable</td><td><strong>服务器尚未准备好处理请求</strong>。服务器刚启动，还未初始化好</td></tr></tbody></table><h3 id="34-接收请求头数据"><a class="markdownIt-Anchor" href="#34-接收请求头数据"></a> 3.4 接收请求头数据</h3><p>可以使用<b><code>@RequestHeader</code></b>注解将请求标头绑定到控制器中的方法参数。</p><p>请考虑以下带有标头的请求：</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">Host                    localhost:8080Accept                  text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9Accept-Language         fr,en-gb;q&#x3D;0.7,en;q&#x3D;0.3Accept-Encoding         gzip,deflateAccept-Charset          ISO-8859-1,utf-8;q&#x3D;0.7,*;q&#x3D;0.7Keep-Alive              300<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面的示例获取 <code>Accept-Encoding</code> 和 <code>Keep-Alive</code> 标头的值：</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">@GetMapping(&quot;&#x2F;demo&quot;)public void handle(  &#x2F;&#x2F; encoding: gzip,deflate  &#x2F;&#x2F; keepAlive: 300    @RequestHeader(&quot;Accept-Encoding&quot;) String encoding,     @RequestHeader(&quot;Keep-Alive&quot;) long keepAlive) &#123;   &#x2F;&#x2F;...&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4tomcat"><a class="markdownIt-Anchor" href="#4tomcat"></a> 4.Tomcat</h2><h3 id="41-概念"><a class="markdownIt-Anchor" href="#41-概念"></a> 4.1 概念</h3><ul><li>Tomcat是Apache软件基金会一个核心项目，是一个开源免费的轻量级Web服务器，支持Servlet/JSP和少量JavaEE规范。</li><li>Tomcat也称为Web容器、Servlet容器。Servlet程序需要tomcat才能运行。</li><li><a href="https://tomcat.apache.org/">https://tomcat.apache.org/</a></li></ul><blockquote><p>JavaEE：Java企业级应用环境,指Java企业级开发的技术规范总和。包含13项技术规范：JDBC、JNDI、EJB、RMI、JSP、Servlet、XML、JMS、Java IDL、JTS、JTA、JavaMail、JAF</p></blockquote><h3 id="42-基本使用"><a class="markdownIt-Anchor" href="#42-基本使用"></a> 4.2 基本使用</h3><p><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240811144025.png" alt="" /></p><ul><li>配置Tomcat端口号 (conf/server.xml)</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span>Connector <span class="token assign-left variable">port</span><span class="token operator">=</span><span class="token string">"8080"</span> <span class="token assign-left variable">protocol</span><span class="token operator">=</span><span class="token string">"HTTP/1.1"</span>             <span class="token assign-left variable">connectionTimeout</span><span class="token operator">=</span><span class="token string">"20000"</span>             <span class="token assign-left variable">redirectPort</span><span class="token operator">=</span><span class="token string">"8443"</span> /<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>HTTP协议默认端口号为80，如果将Tomcat端口号改为80，则将来访问Tomcat时，将不用输入端口号。</p></blockquote><ul><li>Tomcat部署项目：<br />将项目放置到webapps目录下，即部署完成</li></ul><blockquote><p>基于SpringBoot开发的web应用程序，内置了Tomcat服务器，当启动类运行时，会自动启动内嵌的Tomcat服务器，无需手动配置。</p></blockquote><h2 id="5请求响应"><a class="markdownIt-Anchor" href="#5请求响应"></a> 5.请求响应</h2><p><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240811145530.png" alt="" /></p><blockquote><p>请求响应：</p><ul><li>请求（HttpServletRequest）：获取请求数据</li><li>响应（HttpServletResponse）：设置响应数据<br /><strong>BS架构</strong>：Browser-Server架构，浏览器向服务器发送请求，服务器处理请求，返回响应，浏览器接收响应，解析响应数据。客户端只需要浏览器，应用程序的逻辑和数据都存储在服务端。（维护方便 ，体验一般）<br /><strong>CS架构</strong>：Client-Server架构，客户端向服务器发送请求，服务器处理请求，返回响应，客户端接收响应，解析响应数据。客户端需要浏览器和应用程序，应用程序的逻辑和数据都存储在客户端。（维护难，体验好）</li></ul></blockquote><h3 id="51-请求"><a class="markdownIt-Anchor" href="#51-请求"></a> 5.1 请求</h3><h4 id="511-简单参数"><a class="markdownIt-Anchor" href="#511-简单参数"></a> 5.1.1 简单参数</h4><ul><li><strong>原始方式</strong>：<br />在原始的web程序中，获取请求参数，需要通过<code>HttpServletRequest</code>对象手动获取。<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240811180928.png" alt="" /><blockquote><p>通过<code>HttpServletRequest</code>对象获取请求参数，需要通过<code>getParameter()</code>方法获取，且获取到的请求参数都是字符串类型，需要手动转换为其他类型。</p></blockquote></li><li><strong>SpringBoot方式</strong><ul><li><font color="red"><strong>参数名与形参变量名相同</strong></font>，定义形参即可接收参数,且会自动进行类型转换。【可以不传递，不会报错】<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240811183255.png" alt="" /></li><li>如果方法形参名称与请求参数名称不匹配，可以使用<code>@RequestParam</code>注解，指定请求参数的名称。【默认情况下必须传递，否则会报错】<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240811183613.png" alt="" /></li></ul></li></ul><blockquote><p><strong>注意事项</strong>：<br /><code>@RequestParam</code>中的<code>required</code>属性默认值为true，代表该请求参数必须传递，如果不传递将会报错。如果该参数是可选的，可以将<code>required</code>属性设置为false。<br /><code>@RequestParam</code>中有三个属性：<code>name</code>、<code>required</code>、<code>defaultValue</code>，分别代表请求参数的名称、是否必须传递、默认值。</p></blockquote><h4 id="512-实体参数"><a class="markdownIt-Anchor" href="#512-实体参数"></a> 5.1.2 实体参数</h4><ul><li><strong>简单实体参数</strong>：<br />请求参数名与形参对象属性名相同，定义POJO即可<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240811184320.png" alt="" /></li><li><strong>复杂实体参数</strong>：<br />请求参数名与形参对象属性名相同，按照对象层次结构关系即可接收嵌套POJO属性参数。<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240811184552.png" alt="" /></li></ul><blockquote><p><strong>注意事项</strong>：<br />可以在实体类中直接给定默认值，如果请求参数没有传递，则使用默认值。</p></blockquote><h4 id="513-数组集合参数"><a class="markdownIt-Anchor" href="#513-数组集合参数"></a> 5.1.3 数组集合参数</h4><ul><li><strong>数组参数</strong>：<br />请求参数名与形参数组名称相同且请求参数为多个，定义数组类型形参即可接收数组参数。<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240811201852.png" alt="" /></li><li><strong>集合参数</strong>：<br />请求参数名与形参集合名称相同且请求参数为多个，<code>@RequestParam</code>绑定参数关系<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240811202303.png" alt="" /></li></ul><blockquote><p><strong>数组</strong>：请求参数名与形参中数组变量名相同，可以直接使用数组封装<br /><strong>集合</strong>：请求参数名与形参中集合变量名相同，可以使用<code>@RequestParam</code>绑定参数关系</p></blockquote><h4 id="514-日期参数"><a class="markdownIt-Anchor" href="#514-日期参数"></a> 5.1.4 日期参数</h4><ul><li><strong>日期参数</strong>：<br />使用<code>@DateTimeFormat</code>注解，指定日期格式。<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240811202903.png" alt="" /></li></ul><h4 id="515-json参数"><a class="markdownIt-Anchor" href="#515-json参数"></a> 5.1.5 JSON参数</h4><ul><li><strong>JSON参数</strong>：<br />JSON数据<strong>键名</strong>与形参对象<strong>属性名</strong>相同，定义POJO类型形参即可接收参数，需要使用<code>@RequestBody</code>注解标识。<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240811203406.png" alt="" /></li></ul><h4 id="516-路径参数"><a class="markdownIt-Anchor" href="#516-路径参数"></a> 5.1.6 路径参数</h4><ul><li><strong>路径参数</strong>：<br />通过请求URL直接传递参数，使用{……}来标识该路径参数，需要使用<code>@PathVariable</code>注解获取路径参数。<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240811203721.png" alt="" /></li></ul><h4 id="517-小结"><a class="markdownIt-Anchor" href="#517-小结"></a> 5.1.7 小结</h4><p><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240811203929.png" alt="" /></p><h3 id="52-响应"><a class="markdownIt-Anchor" href="#52-响应"></a> 5.2 响应</h3><h4 id="521-响应数据"><a class="markdownIt-Anchor" href="#521-响应数据"></a> 5.2.1 响应数据</h4><p><strong><code>@ResponseBody</code></strong>：</p><ul><li>类型：<strong>方法注解</strong>、<strong>类注解</strong></li><li>位置：Controller方法上/类上</li><li>作用：将方法返回值直接响应，如果返回值是 实体对象/集合，将会转换为JSON格式响应。</li><li>说明：<strong><code>@RestController</code></strong> == <strong><code>@Controller</code></strong>+<strong><code>@ResponseBody</code></strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240811204403.png" alt="" /></p><blockquote><p>如果不添加<code>@ResponseBody</code>注解，Spring会认为返回值是一个视图名称。</p></blockquote><h4 id="522-统一响应结果"><a class="markdownIt-Anchor" href="#522-统一响应结果"></a> 5.2.2 统一响应结果</h4><p><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240811204521.png" alt="" /></p><h2 id="6分层解耦"><a class="markdownIt-Anchor" href="#6分层解耦"></a> 6.分层解耦</h2><h3 id="61-三层架构"><a class="markdownIt-Anchor" href="#61-三层架构"></a> 6.1 三层架构</h3><ul><li><strong><code>controller</code></strong>：控制层，接收前端发送的请求，对请求进行处理，并响应数据</li><li><strong><code>service</code></strong>：业务逻辑层，处理具体的业务逻辑，调用DAO层进行数据访问</li><li><strong><code>dao</code></strong>：数据访问层（持久层），负责数据访问操作，包括数据的增删改查</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240811212617.png" alt="" /></p><h3 id="62-分层解耦"><a class="markdownIt-Anchor" href="#62-分层解耦"></a> 6.2 分层解耦</h3><ul><li><strong>内聚</strong>：软件中各个功能模块内部的功能联系。</li><li><strong>耦合</strong>：衡量软件中各个层/模块之间的依赖、关联的程度。</li><li><strong>软件设计原则</strong>：高内聚低耦合。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240811212945.png" alt="" /></p><h3 id="63-ioc-di-入门"><a class="markdownIt-Anchor" href="#63-ioc-di-入门"></a> 6.3 IOC &amp; DI 入门</h3><h4 id="631-bean的声明"><a class="markdownIt-Anchor" href="#631-bean的声明"></a> 6.3.1 Bean的声明</h4><p>要把某个对象交给IOC容器管理，需要先在对应的类上加上如下注解之一：</p><table><thead><tr><th>注解</th><th>说明</th><th>位置</th></tr></thead><tbody><tr><td><code>@Component</code></td><td>声明Bean的基础注解</td><td>不属于以下三类时，使用此注解</td></tr><tr><td><code>@Controller</code></td><td>@Component的衍生注解</td><td>标注在控制器类上</td></tr><tr><td><code>@Service</code></td><td>@Component的衍生注解</td><td>标注在业务类上</td></tr><tr><td><code>@Repository</code></td><td>@Component的衍生注解</td><td>标注在数据访问类上 (由于与mybatis整合，用的少)</td></tr></tbody></table><blockquote><p><strong>注意事项</strong>：</p><ul><li>声明Bean的时候，可以通过value属性指定Bean的名称，如果没有指定，默认为类名首字母小写。</li><li>使用以上四个注解都可以声明Bean，但在SpringBoot集成web开发中，声明控制器Bean只能使用<code>@Controller</code>注解。</li></ul></blockquote><h4 id="632-bean组件扫描"><a class="markdownIt-Anchor" href="#632-bean组件扫描"></a> 6.3.2 Bean组件扫描</h4><ul><li>前面声明Bean的四大注解，要想生效，还需要被组件扫描<code>@ComponentScan</code>扫描。</li><li><code>@ComponentScan</code>注解虽然没有显示配置，但是实际上已经包含在了启动类声明注解<code>SpringBootApplication</code>中。</li><li>默认扫描的范围是启动类所在包及其子包。</li></ul><h4 id="633-bean的依赖注入"><a class="markdownIt-Anchor" href="#633-bean的依赖注入"></a> 6.3.3 Bean的依赖注入</h4><p><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240811214504.png" alt="" /></p><ol><li>依赖注入的注解<ul><li><code>@Autowired</code>：默认按照类型自动装配。</li><li>如果同类型的Bean存在多个：<ul><li><code>@Primary</code>：指定Bean的优先级。</li><li><code>@Autowired + @Qualifier(&quot;Bean的名称&quot;)</code>：</li><li><code>@Resource(name = &quot;Bean的名称&quot;)</code></li></ul></li></ul></li><li><strong>@Resource</strong>与<b>@Autowired</b>区别：<ul><li>@Autowired是Spring框架提供的注解，而@Resource是JDK提供的注解</li><li>@Autowired默认是按照类型注入，而@Resource默认是按照名称注入</li></ul></li></ol><h2 id="7lombok"><a class="markdownIt-Anchor" href="#7lombok"></a> 7.Lombok</h2><ul><li>Lombok是一个实用的Java类库，能通过注解的形式自动生成构造器、getter/setter、equals、hashCode、toString等方法，并可以自动生成日志变量，简化Java开发、提高效率。<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240813114516.png" alt="" /></li></ul><blockquote><p><strong>注意事项</strong>：<br />Lombok会在编译时，自动生成对应的Java代码。我们使用Lombok时，还需要安装一个lombok插件（idea自带）。</p></blockquote><h2 id="8mybatis"><a class="markdownIt-Anchor" href="#8mybatis"></a> 8.MyBatis</h2><ul><li>MyBatis是一款优秀的<font color="red">持久层(dao)</font>框架，用于简化JDBC的开发。</li><li>MyBatis本是Apache的一个开源项目iBatis，2010年这个项目由Apache迁移到了Google Code，并且改名为MyBatis。2013年11月迁移到Github。</li><li>官网：<a href="https://mybatis.org">https://mybatis.org</a></li></ul><h3 id="81-快速入门"><a class="markdownIt-Anchor" href="#81-快速入门"></a> 8.1 快速入门</h3><p><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240813104626.png" alt="" /></p><h3 id="82-jdbc介绍"><a class="markdownIt-Anchor" href="#82-jdbc介绍"></a> 8.2 JDBC介绍</h3><ul><li><strong>JDBC</strong>：<br />Java DataBase Connectivity，就是使用Java语言操作关系型数据库的一套API。</li><li><strong>本质</strong>：<ul><li>sun公司官方定义的一套操作所有关系型数据库的规范，即接口。</li><li>各个数据库厂商去实现这套接口，提供数据库<font color="red">驱动jar包</font>。</li><li>我们可以使用这套接口（JDBC）编程，真正执行的代码是驱动jar包中的实现类。</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240813105135.png" alt="" /></p><h3 id="83-数据库连接池"><a class="markdownIt-Anchor" href="#83-数据库连接池"></a> 8.3 数据库连接池</h3><ul><li><strong>概念</strong>：<ul><li>数据库连接池是一个容器，负责分配，管理数据库连接(Connection)</li><li>它允许应用程序重复使用一个现有的数据库连接，而不是重新建立一个</li><li>释放空闲时间超过最大空闲时间的连接，来避免因为没有释放连接而引起的数据库连接遗漏</li></ul></li><li><strong>优势</strong>：<ul><li>资源重用</li><li>提升系统响应速度</li><li>避免数据库连接遗漏</li></ul></li><li><strong>标准接口</strong>：<code>DataSource</code><ul><li>官方(Sun)提供的数据库连接池接口，由第三方组织实现此类接口。</li><li>功能：获取连接 <code>Connection getConnection() throws SQLException;</code></li></ul></li><li><strong>常见产品</strong>：<br /><strong>C3P0、DBCP、Druid、Hikari（springboot默认）</strong><ul><li>Durid(德鲁伊)：是阿里巴巴开源的一个数据库连接池实现，它具有监控功能、SQL防火墙、SQL优化功能等。</li></ul></li><li><strong>切换Druid数据库连接池</strong>：<ul><li>官方地址：<a href="https://github.com/alibaba/druid/tree/master/druid-spring-boot-starter">https://github.com/alibaba/druid/tree/master/druid-spring-boot-starter</a></li><li>添加依赖(pom.xml)：<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--在pom.xml中添加依赖--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h3 id="84-基础操作"><a class="markdownIt-Anchor" href="#84-基础操作"></a> 8.4 基础操作</h3><h4 id="841-参数占位符"><a class="markdownIt-Anchor" href="#841-参数占位符"></a> 8.4.1 参数占位符</h4><ul><li><strong><code>#&#123;……&#125;</code></strong>：<ul><li>在执行SQL时，会将<code>#&#123;……&#125;</code>替换为 ? ,生成预编译SQL，会自动设置参数值。</li><li>使用时机：参数传递，都使用<code>#&#123;……&#125;</code>。</li><li><font color="red"><strong>不能直接在引号内使用，因为如果将 #{……} 放在引号内，MyBatis 会将其处理为一个普通的字符串值，而不会进行参数替换。</strong></font><br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240813164518.png" alt="" /></li></ul></li><li><strong><code>$&#123;……&#125;</code></strong>：<ul><li>拼接SQL，直接将参数拼接在SQL语句中，存在SQL注入问题。</li><li>使用时机：如果对表名、列表进行动态设置时使用。</li></ul></li></ul><blockquote><p><strong>总结</strong>：</p><ul><li>动态值 使用 #{key}，动态的列名、容器名、关键字等使用 ${……}。</li><li>？只能替代值的位置，不能替代标签、列名、表名、关键字等。emp_id = ? ，不能写 ？= ?</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//注解方式传入参数！！</span><span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from user where $&#123;column&#125; = #&#123;value&#125;"</span><span class="token punctuation">)</span><span class="token class-name">User</span> <span class="token function">findByColumn</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"column"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> column<span class="token punctuation">,</span> <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="842-预编译sql"><a class="markdownIt-Anchor" href="#842-预编译sql"></a> 8.4.2 预编译SQL</h4><p><strong>优势</strong>：</p><ul><li>性能更高</li><li>更安全(防止SQL注入)<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240813164710.png" alt="" /></li></ul><h4 id="843-日志输出"><a class="markdownIt-Anchor" href="#843-日志输出"></a> 8.4.3 日志输出</h4><p>可以在application.yml中，打开mybatis的日志，并指定输出到控制台。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">mybatis</span><span class="token punctuation">:</span>  <span class="token key atrule">configuration</span><span class="token punctuation">:</span>    <span class="token comment"># 配置mybatis的日志, 指定输出到控制台</span>    <span class="token key atrule">log-impl</span><span class="token punctuation">:</span> org.apache.ibatis.logging.stdout.StdOutImpl    <span class="token comment"># 开启mybatis的驼峰命名自动映射开关 a_column ------> aCloumn</span>    <span class="token key atrule">map-underscore-to-camel-case</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="844-删除"><a class="markdownIt-Anchor" href="#844-删除"></a> 8.4.4 删除</h4><ul><li><strong>SQL语句：</strong><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">delete</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">17</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><strong>接口方法：</strong><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Delete</span><span class="token punctuation">(</span><span class="token string">"delete from emp where id = #&#123;id&#125;"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><blockquote><p><strong>注意事项</strong>：<br />如果mapper接口方法形参只有一个普通类型的参数，#{……}里面的属性名可以随便写，如：#{id}、#{value}，但最好和参数名一致。</p></blockquote><h4 id="845-添加"><a class="markdownIt-Anchor" href="#845-添加"></a> 8.4.5 添加</h4><p><strong>无需主键返回</strong></p><ul><li><strong>SQL语句：</strong><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> emp<span class="token punctuation">(</span>username<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> email<span class="token punctuation">,</span> dept_id<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'宋江'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1056985080</span><span class="token variable">@qq.com</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><strong>接口方法：</strong><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Insert</span><span class="token punctuation">(</span><span class="token string">"insert into emp(username, gender, email, dept_id) values (#&#123;username&#125;,#&#123;gender&#125;,#&#123;email&#125;,#&#123;deptId&#125;)"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">Emp</span> emp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// emp对象</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Emp</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token class-name">Short</span> gender<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token class-name">Integer</span> deptId<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>主键返回</strong></p><ul><li><strong>描述</strong>：<br />在数据添加成功后，需要获取插入数据库数据的主键值。（eg：添加套餐数据后，还需要维护套餐菜品关系表数据）</li><li><strong>实现</strong>：<br />在接口方法前添加<code>@Options(keyProperty = &quot;id&quot;, useGeneratedKeys = true)</code>注解 =&gt; 会自动将生成的主键值，赋值给emp对象的id属性。<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Options</span><span class="token punctuation">(</span>keyProperty <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span> useGeneratedKeys <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Insert</span><span class="token punctuation">(</span><span class="token string">"insert into emp(username, gender, email, dept_id) values (#&#123;username&#125;,#&#123;gender&#125;,#&#123;email&#125;,#&#123;deptId&#125;"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">Emp</span> emp<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="846-更新"><a class="markdownIt-Anchor" href="#846-更新"></a> 8.4.6 更新</h4><ul><li><strong>SQL语句(根据ID更新员工信息)：</strong><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">update</span> emp <span class="token keyword">set</span> username <span class="token operator">=</span> <span class="token string">'李逵'</span><span class="token punctuation">,</span> gender <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> email <span class="token operator">=</span> <span class="token string">'1056985080@qq.com'</span><span class="token punctuation">,</span> dept_id <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">17</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><strong>接口方法：</strong><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Update</span><span class="token punctuation">(</span><span class="token string">"update emp set username = #&#123;username&#125;, gender = #&#123;gender&#125;, email = #&#123;email&#125;, dept_id = #&#123;deptId&#125; where id = #&#123;id&#125;"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">Emp</span> emp<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h4 id="847-查询"><a class="markdownIt-Anchor" href="#847-查询"></a> 8.4.7 查询</h4><p><strong>根据ID查询</strong></p><ul><li><strong>SQL语句：</strong><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">17</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><strong>接口方法：</strong><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from emp where id = #&#123;id&#125;"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Emp</span> <span class="token function">getById</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><p><strong>模糊查询</strong></p><ul><li><strong>SQL语句：</strong><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> username <span class="token operator">like</span> <span class="token string">'%张%'</span> <span class="token operator">and</span> gender <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">order</span> <span class="token keyword">by</span> id <span class="token keyword">desc</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><strong>接口方法：</strong><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from emp where username like '%$&#123;name&#125;%' and gender = #&#123;gender&#125; order by id desc"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Emp</span><span class="token punctuation">></span></span> <span class="token function">getByNameAndGender</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Short</span> gender<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 性能低、不安全，存在SQL注入问题</span><span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from emp where username like concat('%',#&#123;name&#125;,'%') and gender = #&#123;gender&#125; order by id desc"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Emp</span><span class="token punctuation">></span></span> <span class="token function">getByNameAndGender</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Short</span> gender<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 性能高、安全，不会存在SQL注入问题</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><b><code>concat()</code></b>函数：连接字符串，eg：concat(‘%’,#{name},‘%’)，解决<code>#&#123;……&#125;</code>不能直接在引号中使用的问题。</p><h4 id="848-参数名说明"><a class="markdownIt-Anchor" href="#848-参数名说明"></a> 8.4.8 参数名说明</h4><p><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240813174439.png" alt="" /></p><h4 id="849-数据封装"><a class="markdownIt-Anchor" href="#849-数据封装"></a> 8.4.9 数据封装</h4><ul><li>实体类属性名 和 数据库表查询返回的字段名一致，mybatis会自动封装。</li><li>如果实体类属性名 和 数据库表查询返回的字段名不一致，不能自动封装。<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240813174948.png" alt="" /></li></ul><p>解决方式：</p><ul><li><p><strong>起别名</strong>：在SQL语句中，对不一样的列名器别名，别名和实体类中的属性名一致。(<code>as</code>可以省略)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select id, username, gender, email, dept_id as deptId from emp where id = #&#123;id&#125;"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Emp</span> <span class="token function">getById</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>手动结果映射</strong>：</p><ul><li>通过<b><code>@Results</code></b>和<b><code>@Result</code></b>注解，手动映射。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from emp where id = #&#123;id&#125;"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Results</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"dept_id"</span><span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"deptId"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"create_time"</span><span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"createTime"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"update_time"</span><span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"updateTime"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Emp</span> <span class="token function">getById</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>通过<b><code>&lt;resultMap&gt;</code></b>标签定义对应关系，再在后面的SQL语句中引用这个对应关系</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 专门声明一个resultMap设定column到property之间的对应关系 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectEmployeeByRMResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.atguigu.mybatis.entity.Employee<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- 使用id标签设置主键列和主键属性之间的对应关系 --></span>  <span class="token comment">&lt;!-- column属性用于指定字段名；property属性用于指定Java实体类属性名 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>emp_id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>empId<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token comment">&lt;!-- 使用result标签设置普通字段和Java实体类属性之间的关系 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>emp_name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>empName<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>emp_salary<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>empSalary<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- Employee selectEmployeeByRM(Integer empId); --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectEmployeeByRM<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectEmployeeByRMResultMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>select emp_id,emp_name,emp_salary from t_emp where emp_id=#&#123;empId&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>开启驼峰命名</strong>：如果字段名与属性名符合驼峰命名法则，mybatis会自动通过驼峰命名规则映射。<br />主要用于单层级的字段映射。它不能自动处理更复杂的场景，例如多层级的嵌套对象或深层次的属性名转换。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 在application.yml中，开启驼峰命名自动映射开关。即从数据库字段名a_column映射到实体类属性名aCloumn。</span><span class="token key atrule">mybatis</span><span class="token punctuation">:</span><span class="token key atrule">configuration</span><span class="token punctuation">:</span>  <span class="token comment"># 配置mybatis的日志, 指定输出到控制台</span>  <span class="token key atrule">log-impl</span><span class="token punctuation">:</span> org.apache.ibatis.logging.stdout.StdOutImpl  <span class="token comment"># 开启mybatis的驼峰命名自动映射开关 a_column ------> aCloumn</span>  <span class="token key atrule">map-underscore-to-camel-case</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>开启自动映射</strong>：<code>autoMappingBehavior</code> 是 MyBatis 中的一个全局配置项，用于控制 MyBatis 如何自动映射查询结果中的列到 Java 实体类的属性上。根据配置的不同，<code>autoMappingBehavior</code> 可以影响映射的自动化程度，从而减少或增加手动配置的需求。它有以下三个配置选项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">mybatis</span><span class="token punctuation">:</span>  <span class="token key atrule">configuration</span><span class="token punctuation">:</span>    <span class="token comment"># 配置MyBatis的日志, 指定输出到控制台</span>    <span class="token key atrule">log-impl</span><span class="token punctuation">:</span> org.apache.ibatis.logging.stdout.StdOutImpl    <span class="token comment"># 设置MyBatis的自动映射行为</span>    <span class="token key atrule">auto-mapping-behavior</span><span class="token punctuation">:</span> NONE <span class="token comment"># 可选值：NONE, PARTIAL, FULL</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong><code>NONE</code></strong>：MyBatis 不会自动映射任何列到实体类属性。所有的映射关系必须手动配置，通常通过 <code>@Result</code> 注解或 <code>&lt;resultMap&gt;</code> 标签来指定。这种模式适合需要对映射关系进行严格控制的场景，以避免意外的映射错误。</li><li><strong><code>PARTIAL</code></strong>（默认值）：MyBatis 会自动映射查询结果中的列到实体类属性，但只限于那些没有在 <code>ResultMap</code> 中明确定义过的列。如果在 <code>ResultMap</code> 中已经定义了某列的映射关系，则 MyBatis 不会再次自动映射该列。<code>PARTIAL</code> 是大多数情况下的推荐设置，能够在保持映射控制的同时，自动处理简单的映射任务。</li><li><strong><code>FULL</code></strong>：MyBatis 会尝试自动映射所有查询结果中的列到实体类属性，无论这些列是否在 <code>ResultMap</code> 中定义。<code>FULL</code> 设置适合简单对象的映射，能够减少手动配置的工作量。但在复杂映射场景中，可能导致意外的映射错误，因此需要谨慎使用。</li><li><strong>应用场景与注意事项</strong>：<code>autoMappingBehavior</code> 的设置直接影响 MyBatis 的自动映射能力。设置为 <code>FULL</code> 时，MyBatis 可以帮助自动处理简单的<strong>嵌套对象映射</strong>，但对于复杂的嵌套结构，手动映射依然是必不可少的。即使设置为 <code>FULL</code> 或 <code>PARTIAL</code>，在复杂或关键场景下，建议依然手动配置映射，以确保映射的准确性和可控性。此外，在处理大数据量或复杂对象映射时，<code>FULL</code> 的自动映射可能增加系统负担，因此在性能敏感的应用中应谨慎选择。</li></ul></li></ul><h4 id="8410-多表映射"><a class="markdownIt-Anchor" href="#8410-多表映射"></a> 8.4.10 多表映射</h4><ul><li><p><strong>一对一映射</strong>：<br />在一对一关联中，一个实体对象包含另一个实体对象，通常通过外键关系实现。使用 <strong><code>@One</code></strong> 注解、**<code>@Result</code><strong>注解、</strong><code>&lt;association&gt;</code>**标签均可以帮助 MyBatis 自动处理这种关系的查询和映射。</p><p><strong>示例</strong>：<br />假设我们有两个表：<code>user</code> 和 <code>address</code>，它们之间存在一对一关系。</p><ul><li><p><code>user</code> 表：</p><ul><li><code>id</code>（用户ID）</li><li><code>name</code>（用户名）</li><li><code>address_id</code>（外键，指向 <code>address</code> 表的 ID）</li></ul></li><li><p><code>address</code> 表：</p><ul><li><code>id</code>（地址ID）</li><li><code>street</code>（街道）</li><li><code>city</code>（城市）</li></ul></li></ul><p><strong>实体类</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Address</span> address<span class="token punctuation">;</span> <span class="token comment">// 一对一关系</span>    <span class="token comment">// Getters and setters</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Address</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> street<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> city<span class="token punctuation">;</span>    <span class="token comment">// Getters and setters</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ol><li><p><strong>注解方式 (<code>@One</code> 注解)</strong><br />在 <code>UserMapper</code> 中，使用 <code>@One</code> 注解来配置一对一关联。在这种方式中，<code>@One</code> 注解用于指定如何从主查询的结果集中加载一个单一的关联对象。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"SELECT u.id, u.name, a.id AS address_id, a.street, a.city "</span> <span class="token operator">+</span>             <span class="token string">"FROM user u "</span> <span class="token operator">+</span>             <span class="token string">"LEFT JOIN address a ON u.address_id = a.id "</span> <span class="token operator">+</span>             <span class="token string">"WHERE u.id = #&#123;id&#125;"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Results</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"name"</span><span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"address_id"</span><span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"address"</span><span class="token punctuation">,</span>                one <span class="token operator">=</span> <span class="token annotation punctuation">@One</span><span class="token punctuation">(</span>select <span class="token operator">=</span> <span class="token string">"com.example.mapper.AddressMapper.findById"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token class-name">User</span> <span class="token function">findById</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>@Result(column = &quot;address_id&quot;, property = &quot;address&quot;, one = @One(select = &quot;com.example.mapper.AddressMapper.findById&quot;))</code>：<ul><li><code>column</code>：数据库字段名。</li><li><code>property</code>：实体类中的属性名。</li><li><code>one</code>：指定一个方法来查询 <code>Address</code> 对象，<code>select</code> 属性指向了 <code>AddressMapper</code> 中的方法 <code>findById</code>。</li></ul></li></ul> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AddressMapper</span> <span class="token punctuation">&#123;</span>      <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"SELECT id, street, city FROM address WHERE id = #&#123;id&#125;"</span><span class="token punctuation">)</span>   <span class="token class-name">Address</span> <span class="token function">findById</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>注解方式 (<code>@Result</code> 注解)</strong><br />在 <code>UserMapper</code> 中，使用 <code>@Result</code> 注解来直接映射数据库字段到实体类的属性。如果关联对象的属性在主查询中被直接包含，则可以通过 <code>@Result</code> 注解来映射。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"SELECT u.id, u.name, a.id AS address_id, a.street, a.city "</span> <span class="token operator">+</span>            <span class="token string">"FROM user u "</span> <span class="token operator">+</span>            <span class="token string">"LEFT JOIN address a ON u.address_id = a.id "</span> <span class="token operator">+</span>            <span class="token string">"WHERE u.id = #&#123;id&#125;"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Results</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"name"</span><span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"address_id"</span><span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"address.id"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 自动映射到 Address 对象</span>        <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"street"</span><span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"address.street"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"city"</span><span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"address.city"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token class-name">User</span> <span class="token function">findById</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>@Result(column = &quot;address_id&quot;, property = &quot;address.id&quot;)</code>：自动将 <code>address_id</code> 映射到 <code>Address</code> 对象的 <code>id</code> 属性。</li><li><code>@Result(column = &quot;street&quot;, property = &quot;address.street&quot;)</code>：将 <code>street</code> 映射到 <code>Address</code> 对象的 <code>street</code> 属性。</li></ul></li><li><p><strong>XML 配置方式 (<code>&lt;association&gt;</code> 标签)</strong><br />在 <code>UserMapper.xml</code> 中，通过 <code>&lt;association&gt;</code> 标签指定如何查询和映射关联对象。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>findById<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    SELECT u.id, u.name, a.id AS address_id, a.street, a.city    FROM user u    LEFT JOIN address a ON u.address_id = a.id    WHERE u.id = #&#123;id&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.pojo.Address<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address_id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>street<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>street<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>city<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>city<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>association</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong><code>&lt;association&gt;</code> 标签</strong>：用于指定如何加载和映射关联对象。<ul><li><code>property</code>：在主对象中用来表示关联对象的属性名。</li><li><code>javaType</code>：被关联的实体类的全类名。</li><li><code>&lt;id&gt;</code>：映射主键字段。</li><li><code>&lt;result&gt;</code>：映射其他字段。</li></ul></li></ul></li></ol><blockquote><p><strong>总结</strong></p><ul><li><strong><code>@One</code> 注解</strong>：用于在注解方式中配置一对一关系，通过指定 <code>select</code> 属性来查询关联对象。</li><li><strong><code>@Result</code> 注解</strong>：直接映射查询结果到实体对象的属性，包括嵌套对象的属性。</li><li><strong><code>&lt;association&gt;</code> 标签</strong>：在 XML 配置中定义一对一关系，通过指定 <code>property</code> 和 <code>javaType</code> 来配置如何映射关联对象。</li></ul></blockquote><ul><li><p><strong>一对多映射</strong>：<br />假设我们有两个表：<code>user</code> 和 <code>orders</code>，其中一个用户 (<code>user</code>) 可以有多个订单 (<code>orders</code>)。我们将展示如何在 <code>User</code> 对象中使用 <code>@Many</code> 注解以及在 XML 配置中使用 <code>&lt;collection&gt;</code> 标签来处理一对多关系。</p><p><strong>实体类</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Order</span><span class="token punctuation">></span></span> orders<span class="token punctuation">;</span> <span class="token comment">// 一对多关系</span>    <span class="token comment">// Getters and setters</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Order</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> product<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> userId<span class="token punctuation">;</span> <span class="token comment">// 外键</span>    <span class="token comment">// Getters and setters</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ol><li><p><strong>使用 <code>@Many</code> 注解</strong><br />在这种方式中，我们在 <code>UserMapper</code> 接口中使用 <code>@Many</code> 注解来定义一对多关系。<br /><strong>Mapper 接口</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"SELECT u.id, u.name, o.id AS order_id, o.product "</span> <span class="token operator">+</span>            <span class="token string">"FROM user u "</span> <span class="token operator">+</span>            <span class="token string">"LEFT JOIN orders o ON u.id = o.user_id "</span> <span class="token operator">+</span>            <span class="token string">"WHERE u.id = #&#123;id&#125;"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Results</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"name"</span><span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"orders"</span><span class="token punctuation">,</span>                 many <span class="token operator">=</span> <span class="token annotation punctuation">@Many</span><span class="token punctuation">(</span>select <span class="token operator">=</span> <span class="token string">"com.example.mapper.OrderMapper.findByUserId"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token class-name">User</span> <span class="token function">findById</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>OrderMapper 接口</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OrderMapper</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"SELECT id, product, user_id FROM orders WHERE user_id = #&#123;userId&#125;"</span><span class="token punctuation">)</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Order</span><span class="token punctuation">></span></span> <span class="token function">findByUserId</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong><code>@Many</code> 注解</strong>：在 <code>UserMapper</code> 中，<code>@Result</code> 注解的 <code>many</code> 属性指定了如何加载 <code>orders</code> 属性。<code>select</code> 属性指向 <code>OrderMapper</code> 中的 <code>findByUserId</code> 方法，该方法返回<br />与  <code>userId</code> 相关的所有订单。</li></ul></li><li><p><strong>使用 XML 配置中的 <code>&lt;collection&gt;</code> 标签</strong><br />在这种方式中，我们使用 XML 配置文件来定义一对多关系。</p><p><strong>UserMapper.xml</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.mapper.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>findById<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        SELECT u.id, u.name, o.id AS order_id, o.product        FROM user u        LEFT JOIN orders o ON u.id = o.user_id        WHERE u.id = #&#123;id&#125;        <span class="token comment">&lt;!-- 使用 `&lt;collection>` 标签定义一对多关系 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>orders<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.pojo.Order<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>order_id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>product<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>product<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong><code>&lt;collection&gt;</code> 标签</strong>：用于定义 <code>User</code> 对象中的 <code>orders</code> 集合属性。<code>property</code> 属性指定集合属性的名称，<code>ofType</code> 属性指定集合中元素的类型。在查询结果中，MyBatis 会自动 将结果集中的多个订单映射到 <code>User</code> 对象的 <code>orders</code> 属性中。</li></ul></li></ol><blockquote><p><strong>总结</strong></p><ul><li><strong><code>@Many</code> 注解</strong>：在 <code>UserMapper</code> 中通过 <code>@Many</code> 注解指定如何查询与 <code>User</code> 相关的多个 <code>Order</code> 对象。这种方式简洁明了，并且适用于注解方式的配置。</li><li><strong>XML 配置中的 <code>&lt;collection&gt;</code> 标签</strong>：在 <code>UserMapper.xml</code> 中使用 <code>&lt;collection&gt;</code> 标签来定义一对多关系。通过这种方式，你可以在 XML 文件中清晰地配置如何将多个结果映射到 <code>User</code> 对象的集合属性中。这种方式适用于 XML 配置文件，并允许你在查询中定义更复杂的映射逻辑。</li></ul></blockquote><ul><li><p><strong>三表查询</strong>：<br />在 MyBatis 中处理三表关联时，通常涉及到多对多或更复杂的多级关联关系。我们可以通过多对一和一对多的组合来实现三表关联。下面我将展示一个处理三表关联的完整示例，包括使用注解和 XML 配置两种方式。</p><p><strong>示例</strong><br />假设我们有以下三张表：</p></li><li><p><strong><code>user</code> 表</strong>：存储用户信息。</p><ul><li><code>id</code>（用户ID）</li><li><code>name</code>（用户名）</li></ul></li><li><p><strong><code>orders</code> 表</strong>：存储订单信息，关联到 <code>user</code> 表。</p><ul><li><code>id</code>（订单ID）</li><li><code>product</code>（产品名）</li><li><code>user_id</code>（外键，指向 <code>user</code> 表的 ID）</li></ul></li><li><p><strong><code>order_items</code> 表</strong>：存储订单项信息，关联到 <code>orders</code> 表。</p><ul><li><code>id</code>（订单项ID）</li><li><code>order_id</code>（外键，指向 <code>orders</code> 表的 ID）</li><li><code>item_name</code>（订单项名）</li></ul><p><strong>实体类</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Order</span><span class="token punctuation">></span></span> orders<span class="token punctuation">;</span> <span class="token comment">// 一对多关系：用户 -> 订单</span>    <span class="token comment">// Getters and setters</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Order</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> product<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrderItem</span><span class="token punctuation">></span></span> orderItems<span class="token punctuation">;</span> <span class="token comment">// 一对多关系：订单 -> 订单项</span>    <span class="token comment">// Getters and setters</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderItem</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> itemName<span class="token punctuation">;</span>    <span class="token comment">// Getters and setters</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>目标</strong><br />我们要查询 <code>User</code> 对象，并且包含用户的订单 (<code>Order</code>)，以及每个订单下的订单项 (<code>OrderItem</code>)。</p></li></ul><ol><li><p><strong>使用注解的方式</strong>：<br /><strong>UserMapper 接口</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"SELECT u.id, u.name, o.id AS order_id, o.product "</span> <span class="token operator">+</span>            <span class="token string">"FROM user u "</span> <span class="token operator">+</span>            <span class="token string">"LEFT JOIN orders o ON u.id = o.user_id "</span> <span class="token operator">+</span>            <span class="token string">"WHERE u.id = #&#123;id&#125;"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Results</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"name"</span><span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"order_id"</span><span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"orders"</span><span class="token punctuation">,</span>                 many <span class="token operator">=</span> <span class="token annotation punctuation">@Many</span><span class="token punctuation">(</span>select <span class="token operator">=</span> <span class="token string">"com.example.mapper.OrderMapper.findByUserId"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token class-name">User</span> <span class="token function">findById</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>OrderMapper 接口</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OrderMapper</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"SELECT id, product FROM orders WHERE user_id = #&#123;userId&#125;"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Results</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"product"</span><span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"product"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"orderItems"</span><span class="token punctuation">,</span>                 many <span class="token operator">=</span> <span class="token annotation punctuation">@Many</span><span class="token punctuation">(</span>select <span class="token operator">=</span> <span class="token string">"com.example.mapper.OrderItemMapper.findByOrderId"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Order</span><span class="token punctuation">></span></span> <span class="token function">findByUserId</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>OrderItemMapper 接口</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OrderItemMapper</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"SELECT id, item_name FROM order_items WHERE order_id = #&#123;orderId&#125;"</span><span class="token punctuation">)</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrderItem</span><span class="token punctuation">></span></span> <span class="token function">findByOrderId</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> orderId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个配置中：</p><ul><li><strong><code>UserMapper</code></strong>：负责查询 <code>User</code> 信息及其关联的 <code>Order</code> 列表。<code>@Many</code> 注解指向 <code>OrderMapper</code> 中的 <code>findByUserId</code> 方法，该方法进一步加载每个订单的详细信息。</li><li><strong><code>OrderMapper</code></strong>：负责查询 <code>Order</code> 信息及其关联的 <code>OrderItem</code> 列表。<code>@Many</code> 注解指向 <code>OrderItemMapper</code> 中的 <code>findByOrderId</code> 方法。</li><li><strong><code>OrderItemMapper</code></strong>：负责查询 <code>OrderItem</code> 列表。</li></ul></li><li><p><strong>使用 XML 配置的方式</strong>：<br /><strong>UserMapper.xml</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.mapper.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>findById<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        SELECT u.id, u.name        FROM user u        WHERE u.id = #&#123;id&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>orders<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.pojo.Order<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            SELECT o.id AS order_id, o.product            FROM orders o            WHERE o.user_id = #&#123;id&#125;            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>orderItems<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.pojo.OrderItem<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                SELECT oi.id AS item_id, oi.item_name                FROM order_items oi                WHERE oi.order_id = #&#123;order_id&#125;            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong><code>&lt;collection&gt;</code> 标签</strong>：用于定义一对多关系，首先映射 <code>User</code> 与 <code>Order</code> 之间的关系，然后在 <code>Order</code> 与 <code>OrderItem</code> 之间再次使用 <code>&lt;collection&gt;</code> 标签。</li><li><strong>多级映射</strong>：在 <code>UserMapper.xml</code> 中，我们嵌套使用 <code>&lt;collection&gt;</code> 标签来处理多级关联。</li></ul></li></ol><blockquote><p><strong>总结</strong></p><ul><li><strong>注解方式</strong>：<code>@Many</code> 注解在三表关联中非常有效，可以简化代码，特别是在分布式项目中，但在复杂查询中可能不如 XML 配置灵活。</li><li><strong>XML 配置方式</strong>：<code>&lt;collection&gt;</code> 标签在处理复杂关联时更直观，尤其是当查询需要多级嵌套或复杂的结果映射时。</li></ul></blockquote><h3 id="85-xml映射文件"><a class="markdownIt-Anchor" href="#85-xml映射文件"></a> 8.5 XML映射文件</h3><ul><li><strong>规范</strong>：<ul><li>XML映射文件的名称与Mapper接口名称一致，并且将XML映射文件和Mapper接口放在同一个包下(同包同名)。</li><li>XML映射文件的namespace属性与Mapper接口全限定名一致。</li><li>XML映射文件中的SQL语句的id属性与Mapper接口方法名一致，并保持返回类型一致。<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240813183451.png" alt="" /></li></ul></li></ul><blockquote><p>使用Mybatis的注解，主要是来完成一些简单的增删改查功能，如果需要实现复杂的SQL功能，建议使用XML来配置映射语句。</p></blockquote><h4 id="851-if标签"><a class="markdownIt-Anchor" href="#851-if标签"></a> 8.5.1 if标签</h4><ul><li><strong>&lt;if&gt;</strong>：<ul><li>用于判断条件是否成立，如果条件为true，则拼接SQL。</li><li>形式：&lt;if test=“条件”&gt;……&lt;/if&gt;。<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"gender != null"</span><span class="token operator">></span>……<span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul><h4 id="852-where标签"><a class="markdownIt-Anchor" href="#852-where标签"></a> 8.5.2 where标签</h4><ul><li><strong>&lt;where&gt;</strong>：<ul><li>where元素只会在子元素有内容的情况下才能插入where子句，而且会自动去除子句开头的and或or</li><li>形式：&lt;where&gt;……&lt;/where&gt;。<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"findUsers"</span> resultType<span class="token operator">=</span><span class="token string">"User"</span><span class="token operator">></span>  select <span class="token operator">*</span> from user  <span class="token generics"><span class="token punctuation">&lt;</span>where<span class="token punctuation">></span></span>      <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"name != null and name != ''"</span><span class="token operator">></span>          name <span class="token operator">=</span> #<span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span>      <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"age != null"</span><span class="token operator">></span>          and age <span class="token operator">=</span> #<span class="token punctuation">&#123;</span>age<span class="token punctuation">&#125;</span>      <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"gender != null and gender != ''"</span><span class="token operator">></span>          and gender <span class="token operator">=</span> #<span class="token punctuation">&#123;</span>gender<span class="token punctuation">&#125;</span>      <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>where<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h4 id="853-set标签"><a class="markdownIt-Anchor" href="#853-set标签"></a> 8.5.3 set标签</h4><ul><li><strong>&lt;set&gt;</strong>：<ul><li>动态地在行首插入set关键字，并会删除掉额外的逗号。（用在update语句中）</li><li>形式：&lt;set&gt;……&lt;/set&gt;。<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240813190655.png" alt="" /></li></ul></li></ul><h4 id="854-foreach标签"><a class="markdownIt-Anchor" href="#854-foreach标签"></a> 8.5.4 foreach标签</h4><ul><li>SQL语句：<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">delete</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> id <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>接口方法：<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 批量删除</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteByIds</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> ids<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>XML映射文件：<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deleteByIds<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 从 emp 表中删除满足条件的记录 --></span>    delete from emp where id in    <span class="token comment">&lt;!--         使用 &lt;foreach> 标签遍历传入的集合 ids        collection="ids" 表示传入的集合参数名称是 ids        item="id" 表示遍历集合中的每个元素，并将当前元素赋值给 id        open="(" 表示在遍历元素之前，SQL 语句中添加一个左括号 (        separator="," 表示在每个元素之间，用逗号 , 作为分隔符        close=")" 表示在遍历元素之后，SQL 语句中添加一个右括号 )        原SQL：delete from emp where id in (1,2,3,4,5)    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ids<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--             将当前遍历到的 id 以 #&#123;id&#125; 的形式插入到 SQL 语句中            #&#123;id&#125; 是 MyBatis 的占位符，用于安全地传递参数，防止 SQL 注入        --></span>        #&#123;id&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>属性：<ul><li><code>collection</code>：集合属性名。</li><li><code>item</code>：集合遍历出来的元素/项的名称。</li><li><code>open</code>：遍历集合元素前的前缀。【在遍历元素之前需要往SQL语句中添加什么内容】</li><li><code>separator</code>：遍历集合元素间的分隔符。【在遍历元素之间需要往SQL语句中添加什么内容】</li><li><code>close</code>：遍历集合元素后的后缀。【在遍历元素之后需要往SQL语句中添加什么内容】</li></ul></li></ul><h4 id="855-sql片段"><a class="markdownIt-Anchor" href="#855-sql片段"></a> 8.5.5 sql片段</h4><ul><li><strong>&lt;sql&gt;</strong>：定义可重用的SQL片段。</li><li><strong>&lt;include&gt;</strong>：通过属性refid，指定包含的sql片段的id。<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240813191643.png" alt="" /></li></ul><h4 id="856-trim标签"><a class="markdownIt-Anchor" href="#856-trim标签"></a> 8.5.6 trim标签</h4><p>使用trim标签控制条件部分两端是否包含某些字符</p><ul><li>prefix属性：指定要动态添加的前缀</li><li>suffix属性：指定要动态添加的后缀</li><li>prefixOverrides属性：指定要动态去掉的前缀，使用&quot;|&quot;分隔有可能的多个值</li><li>suffixOverrides属性：指定要动态去掉的后缀，使用&quot;|&quot;分隔有可能的多个值</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- List&lt;Employee> selectEmployeeByConditionByTrim(Employee employee) --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectEmployeeByConditionByTrim<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.atguigu.mybatis.entity.Employee<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select emp_id,emp_name,emp_age,emp_salary,emp_gender    from t_emp        <span class="token comment">&lt;!-- prefix属性指定要动态添加的前缀 --></span>    <span class="token comment">&lt;!-- suffix属性指定要动态添加的后缀 --></span>    <span class="token comment">&lt;!-- prefixOverrides属性指定要动态去掉的前缀，使用“|”分隔有可能的多个值 --></span>    <span class="token comment">&lt;!-- suffixOverrides属性指定要动态去掉的后缀，使用“|”分隔有可能的多个值 --></span>    <span class="token comment">&lt;!-- 当前例子用where标签实现更简洁，但是trim标签更灵活，可以用在任何有需要的地方 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>trim</span> <span class="token attr-name">prefix</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>where<span class="token punctuation">"</span></span> <span class="token attr-name">suffixOverrides</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>and|or<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>empName != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            emp_name=#&#123;empName&#125; and        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>empSalary <span class="token entity named-entity" title="&gt;">&amp;gt;</span> 3000<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            emp_salary>#&#123;empSalary&#125; and        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>empAge <span class="token entity named-entity" title="&lt;">&amp;lt;</span>= 20<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            emp_age=#&#123;empAge&#125; or        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>empGender=='male'<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            emp_gender=#&#123;empGender&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>trim</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="857-choosewhenotherwise标签"><a class="markdownIt-Anchor" href="#857-choosewhenotherwise标签"></a> 8.5.7 choose/when/otherwise标签</h4><p>在多个分支条件中，仅执行一个。</p><ul><li>从上到下依次执行条件判断</li><li>遇到的第一个满足条件的分支会被采纳</li><li>被采纳分支后面的分支都将不被考虑</li><li>如果所有的when分支都不满足，那么就执行otherwise分支</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- List&lt;Employee> selectEmployeeByConditionByChoose(Employee employee) --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectEmployeeByConditionByChoose<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.atguigu.mybatis.entity.Employee<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select emp_id,emp_name,emp_salary from t_emp    where    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>choose</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>empName != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>emp_name=#&#123;empName&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>empSalary <span class="token entity named-entity" title="&lt;">&amp;lt;</span> 3000<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>emp_salary <span class="token entity named-entity" title="&lt;">&amp;lt;</span> 3000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>otherwise</span><span class="token punctuation">></span></span>1=1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>otherwise</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>choose</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--     第一种情况：第一个when满足条件 where emp_name=?     第二种情况：第二个when满足条件 where emp_salary &lt; 3000     第三种情况：两个when都不满足 where 1=1 执行了otherwise     --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注意事项</strong>：<br />在xml文件中，如果只传入一个参数时，可以直接写参数中的属性名来引用对应的属性值。若传入的是多个参数，在引用类中的属性值就必须在属性名前添加 <b>参数名. </b>来指定是哪个参数中的。</p></blockquote><h2 id="9-项目搭建"><a class="markdownIt-Anchor" href="#9-项目搭建"></a> 9. 项目搭建</h2><h3 id="91-环境搭建"><a class="markdownIt-Anchor" href="#91-环境搭建"></a> 9.1 环境搭建</h3><p><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240814223026.png" alt="" /></p><h3 id="92-开发规范"><a class="markdownIt-Anchor" href="#92-开发规范"></a> 9.2 开发规范</h3><p><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240814224344.png" alt="" /></p><blockquote><p><strong>注意事项</strong>：</p><ul><li>REST是风格，是约定方式，约定不是硬性规定，可以打破。</li><li>描述模块的功能通常是复数， 也就是加s的格式来描述，表示此类资源，而非单个资源。如：uers、emps、books……</li></ul></blockquote><h3 id="93-requestmapping"><a class="markdownIt-Anchor" href="#93-requestmapping"></a> 9.3 @RequestMapping</h3><ul><li>类级别的<b><code>RequestMapping</code></b>定义了所有该类中处理方法的共同URL前缀。</li><li>方法级别的<b><code>RequestMapping</code></b>则在类级别的URL基础上进一步细分，指定具体的处理路径（eg：GET、POST）。可以使用更具体的GetMapping、PostMapping等注解替代。<br />如果不指定，默认情况下任何请求方式都可以访问。<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240814232320.png" alt="" /></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 使用方法级别的@RequestMapping注解</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/api"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/hello"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Hello, World!"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/hello"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span><span class="token constant">POST</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">postHello</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Hello, "</span> <span class="token operator">+</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 使用方法级别的@GetMapping、@PostMapping注解</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/api"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Hello, World!"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">postHello</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Hello, "</span> <span class="token operator">+</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注意事项</strong>：</p><ul><li><b><code>@RequestMapping</code></b>不用必须使用 / 开头</li><li><b><code>@RequestMapping</code></b>可以同时指定多个URL路径，用数组表示，如：<code>@RequestMapping(value = &#123;&quot;/hello&quot;, &quot;/hi&quot;&#125;)</code></li><li><b><code>@RequestMapping</code></b>可以同时指定多个请求方式，用数组表示，如：<code>@RequestMapping(value = &quot;/hello&quot;, method = &#123;RequestMethod.GET, RequestMethod.POST&#125;)</code></li><li><b><code>@RequestMapping</code></b>支持模糊匹配，* 表示任意一层字符串，**表示任意层字符串。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/hello/* -<span class="token operator">></span> /hello/world  /hello/world123 <span class="token punctuation">[</span>不可以是 /hello/world/123<span class="token punctuation">]</span>/hello/** -<span class="token operator">></span> /hello  /hello/world  /hello/world/123<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>方法前必须加上<b><code>@RequestMapping</code></b>注解，就算类上已经添加了<b><code>@RequestMapping</code></b>注解，否则该方法将不会被识别成外部请求。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RequestMapping</span> <span class="token comment">// 不能省略， url: /hello </span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="94-pagehelper分页插件"><a class="markdownIt-Anchor" href="#94-pagehelper分页插件"></a> 9.4 PageHelper分页插件</h3><ul><li><strong>导入依赖</strong>：<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>pagehelper-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.4.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><strong>使用方法</strong>：<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">PageHelper</span><span class="token punctuation">.</span><span class="token function">startPage</span><span class="token punctuation">(</span>pageNum<span class="token punctuation">,</span> pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Emp</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> empMapper<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Emp</span><span class="token punctuation">></span></span> page <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Emp</span><span class="token punctuation">></span></span><span class="token punctuation">)</span>list<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240814232438.png" alt="" /></p><h3 id="95-文件上传"><a class="markdownIt-Anchor" href="#95-文件上传"></a> 9.5 文件上传</h3><ul><li><strong>简介</strong>：<ul><li>文件上传，是指将本地图片、视频、音频等文件上传到服务器，供其它用户浏览或下载的过程。</li><li>文件上传在项目中应用非常广泛，我们经常发微博、发微信朋友圈都用到了文件上传功能。</li></ul></li><li><strong>前端页面</strong>：<ul><li>表单项 type=“file”</li><li>表单提交方式 post</li><li>表单的enctype属性：multipart/form-data<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240815212704.png" alt="" /></li></ul></li><li><strong>服务端接收文件</strong>：<ul><li><b><code>MultipartFile</code></b>接口<ul><li>String getOriginalFilename()：获取原始文件名</li><li>void transferTo(File dest)：将文件保存到指定位置</li><li>long getSize()：获取文件大小,单位：字节</li><li>byte[] getBytes()：获取文件内容的字节数组</li><li>InputStream getInputStream()：获取接收到的文件内容的输入流</li></ul></li></ul></li></ul><h4 id="951-本地仓库"><a class="markdownIt-Anchor" href="#951-本地仓库"></a> 9.5.1 本地仓库</h4>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileController</span> <span class="token punctuation">&#123;</span>  <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/upload"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token class-name">MultipartFile</span> file<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 获取原始文件名</span>    <span class="token class-name">String</span> originalFilename <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 构建新的文件名</span>    <span class="token class-name">String</span> newFilename <span class="token operator">=</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> originalFilename<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>originalFilename<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 将文件保存在服务端 本地仓库 E:/images/ 目录下</span>    file<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"E:/images/"</span> <span class="token operator">+</span> newFilename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在SpringBoot中，文件上传，默认单个文件允许最大大小为 1M，如果需要上传大文件，可以进行如下配置：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 在application.yml中配置</span><span class="token key atrule">servlet</span><span class="token punctuation">:</span>  <span class="token key atrule">multipart</span><span class="token punctuation">:</span>    <span class="token comment"># 配置单个文件最大上传大小</span>    <span class="token key atrule">max-file-size</span><span class="token punctuation">:</span> 10MB    <span class="token comment"># 配置单个请求最大上传大小（一次请求可以上传多个文件）</span>    <span class="token key atrule">max-request-size</span><span class="token punctuation">:</span> 100MB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="952-阿里云oss"><a class="markdownIt-Anchor" href="#952-阿里云oss"></a> 9.5.2 阿里云OSS</h4><ul><li><strong>引入阿里云OSS相关依赖</strong>：<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.aliyun.oss<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aliyun-sdk-oss<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.17.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.xml.bind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jaxb-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.activation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>activation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- no more than 2.3.3--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.glassfish.jaxb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jaxb-runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><strong>引入阿里云OSS上传文件工具类（由官方的示例代码改造而来）</strong>：<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240818220917.png" alt="" /></li><li><strong>上传图片接口开发</strong>：<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UploadController</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/* 本地存储  @PostMapping("/upload")  public Result upload(MultipartFile image) throws IOException &#123;      // 获取原始文件名      String originalFilename = image.getOriginalFilename();      // 构建新的文件名      String newFileName = UUID.randomUUID().toString() + originalFilename.substring(originalFilename.lastIndexOf("."));      // 将文件保存到本地      image.transferTo(new File("E:\\Edge下载（定期删除）\\day11-SpringBootWeb案例\\" + newFileName));      return Result.success();  &#125;*/</span>  <span class="token annotation punctuation">@Autowired</span>  <span class="token keyword">private</span> <span class="token class-name">AliOSSUtils</span> aliOSSUtils<span class="token punctuation">;</span>  <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/upload"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">MultipartFile</span> image<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>      log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"文件上传，文件名：&#123;&#125;"</span><span class="token punctuation">,</span>image<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">String</span> url <span class="token operator">=</span> aliOSSUtils<span class="token punctuation">.</span><span class="token function">upload</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">;</span>      log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"文件上传完成，文件访问的url：&#123;&#125;"</span><span class="token punctuation">,</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="96-配置文件"><a class="markdownIt-Anchor" href="#96-配置文件"></a> 9.6 配置文件</h3><p><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240816100225.png" alt="" /></p><ul><li><strong>yml文件基本语法</strong>：<ul><li>大小写敏感</li><li>数值前边必须有空格，作为分隔符</li><li>使用缩进表示层级关系，缩进时，不允许使用Tab键，只能使用空格（idea中会自动将Tab键转换为空格）</li><li>缩进的空格数目不重要，只要相同层级的元素左对齐即可</li><li># 表示注解，从这个字符开始到行尾，都是注释，不会被解析</li></ul></li></ul><h3 id="97-外部配置注入"><a class="markdownIt-Anchor" href="#97-外部配置注入"></a> 9.7 外部配置注入</h3><p>在Spring框架中，<code>@Value</code>和<code>@ConfigurationProperties</code>注解用于将外部配置的值注入到Spring管理的Bean中。它们的使用场景和功能有所不同，下面分别讲解它们的作用和使用方法。</p><ul><li><p><b><code>@Value</code> 注解</b><br /><code>@Value</code>注解用于将配置文件中的单个属性值注入到Spring Bean的字段或方法中。它通常用于注入简单的属性值，比如字符串、数值等。</p><ol><li><strong>基本语法</strong>：</li></ol> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;property.key&#125;"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">String</span> propertyValue<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其中<code>$&#123;property.key&#125;</code>表示从配置文件（如<code>application.properties</code>或<code>application.yml</code>）中读取指定键的值。</p><ol start="2"><li><strong>默认值</strong>：<br />可以在<code>@Value</code>注解中指定一个默认值，当配置文件中找不到相应的键时，使用默认值：</li></ol> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;property.key:defaultValue&#125;"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">String</span> propertyValue<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="3"><li><strong>复杂表达式</strong>：<br /><code>@Value</code>也可以使用Spring表达式语言（SpEL）来处理复杂的值：</li></ol> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"#&#123;T(java.lang.Math).random() * 100&#125;"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token keyword">double</span> randomValue<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="4"><li><strong>使用示例</strong><br />假设在<code>application.properties</code>文件中有以下配置：</li></ol><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">app.name</span><span class="token punctuation">=</span><span class="token value attr-value">MyApp</span><span class="token key attr-name">app.version</span><span class="token punctuation">=</span><span class="token value attr-value">1.0.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以在Bean中使用<code>@Value</code>注解注入这些值：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;app.name&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> appName<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;app.version&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> appVersion<span class="token punctuation">;</span>    <span class="token comment">// getters and setters</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><b><code>@ConfigurationProperties</code> 注解 </b><br /><code>@ConfigurationProperties</code>用于将<strong>一组相关的配置属性</strong>绑定到一个Java类的属性上。它可以将配置文件中的属性自动映射到类的字段中，尤其适用于需要处理一组复杂或嵌套配置的场景。</p><ol><li><strong>基本语法</strong>：<br />定义一个类来对应配置文件中的一组属性：</li></ol> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"app"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppProperties</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> version<span class="token punctuation">;</span>    <span class="token comment">// getters and setters</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>prefix = &quot;app&quot;</code>表示这个类将映射<code>application.properties</code>或<code>application.yml</code>中以<code>app</code>开头的属性。</p><ol start="2"><li><strong>启用<code>@ConfigurationProperties</code></strong>：<br />通常需要使用<code>@EnableConfigurationProperties</code>注解或<code>@Component</code>来让Spring管理这个配置类：</li></ol> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token class-name">AppProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 其他配置</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者在配置类上直接使用<code>@Component</code>：</p> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span> <span class="token comment">// 如果已经在配置类中使用了@EnableConfigurationProperties，则不需要再使用@Component</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"app"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppProperties</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// fields, getters, setters</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>使用示例<br />假设在<code>application.properties</code>文件中有以下配置：</li></ol><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">app.name</span><span class="token punctuation">=</span><span class="token value attr-value">MyApp</span><span class="token key attr-name">app.version</span><span class="token punctuation">=</span><span class="token value attr-value">1.0.0</span><span class="token key attr-name">app.details.description</span><span class="token punctuation">=</span><span class="token value attr-value">This is a demo application.</span><span class="token key attr-name">app.details.author</span><span class="token punctuation">=</span><span class="token value attr-value">John Doe</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以定义一个类来映射这些配置：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"app"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppProperties</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> version<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Details</span> details <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Details</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Details</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> description<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> author<span class="token punctuation">;</span>        <span class="token comment">// getters and setters</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// getters and setters</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样，<code>AppProperties</code>类中的字段会自动映射到配置文件中的相应属性值。</p></li></ul><blockquote><p><strong>主要区别</strong></p><ul><li><strong>粒度</strong>：<code>@Value</code>用于注入单个属性值，而<code>@ConfigurationProperties</code>更适合注入一组相关的属性。</li><li><strong>类型安全</strong>：<code>@ConfigurationProperties</code>支持类型安全的配置绑定，并且可以通过构建复杂对象来映射嵌套属性，而<code>@Value</code>只能注入简单的属性值。</li><li><strong>可维护性</strong>：<code>@ConfigurationProperties</code>有助于将配置集中管理，并且对属性进行结构化处理，这对大型项目的配置管理更为友好。</li><li><strong>@Value的局限性</strong>：<code>@Value</code>只能注入单个属性值，不能注入集合、数组等。<br /><strong>选择建议</strong></li><li>当需要注入单个或少量的配置值时，使用<code>@Value</code>。</li><li>当需要注入大量相关配置或希望将配置分组时，使用<code>@ConfigurationProperties</code>。</li></ul></blockquote><p>在Spring框架中，<code>@PropertySource</code>和<code>@ConfigurationProperties</code>都涉及配置属性的管理，但它们的作用和使用场景有所不同，不能简单地认为它们是类似的。<br /><strong><code>@PropertySource</code>的作用</strong></p><ul><li><strong>用途</strong>：<code>@PropertySource</code>主要用于<strong>加载自定义的属性文件</strong>（如<code>.properties</code>文件）到Spring的<code>Environment</code>中。通过这个注解，Spring能够识别和使用这些属性文件中的键值对。</li><li><strong>典型场景</strong>：<ul><li><p>当你的配置文件不是默认的<code>application.properties</code>或<code>application.yml</code>，而是自定义的文件时，需要用<code>@PropertySource</code>来加载这个文件。</p></li><li><p>例如，如果你有一个名为<code>custom.properties</code>的文件，且希望Spring加载其中的配置项，那么可以使用<code>@PropertySource</code>注解：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span><span class="token string">"classpath:custom.properties"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 配置类内容</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><strong>配合<code>@Value</code>使用</strong>：<code>@PropertySource</code>通常与<code>@Value</code>注解配合使用，从加载的属性文件中读取具体的属性值并注入到Bean的字段中。</li></ul><p><strong><code>@ConfigurationProperties</code>的作用</strong></p><ul><li><strong>用途</strong>：<code>@ConfigurationProperties</code>用于将<strong>一组相关的配置属性</strong>绑定到一个Java类的属性上。它可以将配置文件中的属性自动映射到类的字段中，尤其适用于需要处理一组复杂或嵌套配置的场景。</li><li><strong>典型场景</strong>：<ul><li>当你有一组相关的配置项，比如与应用程序、数据库、消息队列等相关的多个配置项时，可以使用<code>@ConfigurationProperties</code>将这些配置项整合到一个专门的配置类中。</li><li>例如，假设有以下配置：<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">app.name</span><span class="token punctuation">=</span><span class="token value attr-value">MyApp</span><span class="token key attr-name">app.version</span><span class="token punctuation">=</span><span class="token value attr-value">1.0.0</span><span class="token key attr-name">app.details.description</span><span class="token punctuation">=</span><span class="token value attr-value">This is a description</span><span class="token key attr-name">app.details.author</span><span class="token punctuation">=</span><span class="token value attr-value">John Doe</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>可以使用<code>@ConfigurationProperties</code>将这些属性映射到类中：<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"app"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppProperties</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> version<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Details</span> details <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Details</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Details</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> description<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> author<span class="token punctuation">;</span>        <span class="token comment">// Getters and Setters</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// Getters and Setters</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><blockquote><p><strong><code>@PropertySource</code> vs. <code>@ConfigurationProperties</code></strong></p><ul><li><strong><code>@PropertySource</code></strong>：负责告诉Spring从哪里加载配置文件，并与<code>@Value</code>结合使用，允许单独注入具体的配置值。<code>@PropertySource</code>只加载属性文件，不负责属性的绑定和注入。</li><li><strong><code>@ConfigurationProperties</code></strong>：负责将一组相关的配置属性映射到一个Java类中，通常用于处理结构化的、较复杂的配置。<code>@ConfigurationProperties</code>不仅加载属性，还绑定它们到类的字段上，使配置的管理更加方便和结构化。</li></ul><p><strong>总结</strong></p><ul><li><strong>相似点</strong>：两者都与配置属性的处理有关，但<code>@PropertySource</code>更侧重于属性文件的加载，而<code>@ConfigurationProperties</code>侧重于属性值的绑定和管理。</li><li><strong>使用场景不同</strong>：<code>@PropertySource</code>用于从自定义的文件加载属性，而<code>@ConfigurationProperties</code>则用于将这些属性整合到Java类中进行统一管理。</li></ul></blockquote><h3 id="98-登录校验"><a class="markdownIt-Anchor" href="#98-登录校验"></a> 9.8 登录校验</h3><p><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240816154423.png" alt="" /></p><h4 id="981-会话技术"><a class="markdownIt-Anchor" href="#981-会话技术"></a> 9.8.1 会话技术</h4><ul><li><strong>会话</strong>：用户打开浏览器，访问web服务器的资源，会话建立，直到有一方断开连接，会话结束。在一次会话中可以包含<strong>多次</strong>请求和响应。</li><li><strong>会话跟踪</strong>：一种维护浏览器状态的方法，服务器需要识别多次请求是否来自同一浏览器，以便在同一次会话的多次请求间<strong>共享数据</strong>。</li><li><strong>会话跟踪方案</strong>：<ul><li>客户端会话跟踪技术：Cookie</li><li>服务器会话跟踪技术：Session</li><li>令牌技术：Token<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240816161533.png" alt="" /></li></ul></li></ul><p><strong>Cookie</strong>：</p><ol><li><p><strong>什么是Cookie？</strong><br />Cookie是由服务器生成并发送到客户端（浏览器）的小型文本文件。客户端会将这些Cookie存储在本地，并在每次访问相同服务器时将它们包含在HTTP请求中，发送回服务器。</p></li><li><p><strong>Cookie的工作原理</strong></p></li></ol><ul><li><p><strong>生成和存储</strong>：当用户第一次访问网站时，服务器可以生成一个或多个Cookie，并通过HTTP响应头将它们发送到客户端。客户端浏览器接收到这些Cookie后，会根据服务器指示（如<code>Expires</code>或<code>Max-Age</code>属性）将Cookie存储在本地。</p></li><li><p><strong>发送Cookie</strong>：在用户的后续请求中，浏览器会自动将与该域名匹配的所有Cookie附加到HTTP请求中，发送给服务器。服务器可以读取这些Cookie的值，以便识别用户的身份或保持会话状态。</p></li><li><p><strong>Cookie属性</strong>：</p><ul><li><code>Name=Value</code>：Cookie的名称和值，浏览器会在后续请求中发送这些信息。</li><li><code>Domain</code>：指定Cookie属于哪个域名，浏览器只会在访问该域名时发送此Cookie。</li><li><code>Path</code>：指定Cookie适用的路径，只有访问此路径或子路径时，Cookie才会被发送。</li><li><code>Expires/Max-Age</code>：设置Cookie的过期时间，决定Cookie在客户端存储的时长。</li><li><code>HttpOnly</code>：防止客户端脚本访问Cookie，增加安全性。</li><li><code>Secure</code>：指示Cookie只能通过HTTPS发送，防止Cookie在传输过程中被截获。</li><li><code>SameSite</code>：防止跨站请求伪造攻击（CSRF）。</li></ul></li></ul><ol start="3"><li><strong>Cookie的应用场景</strong></li></ol><ul><li><strong>会话管理</strong>：保存用户登录状态，跟踪用户在网站上的活动。</li><li><strong>个性化设置</strong>：保存用户偏好，如主题、语言选择等。</li><li><strong>跟踪和分析</strong>：用于广告跟踪、用户行为分析等。</li></ul><ol start="4"><li><strong>Cookie的优缺点</strong></li></ol><ul><li><p><strong>优点</strong>：</p><ul><li>易于使用：可以在客户端和服务器之间简单地传递信息。</li><li>跨请求保持状态：允许在多个请求之间保持状态（如用户登录状态）。</li></ul></li><li><p><strong>缺点</strong>：</p><ul><li>安全性问题：存储在客户端，容易被篡改或窃取。</li><li>数据量有限：通常一个Cookie的大小限制为4KB，且总数有限。</li><li>性能影响：每次请求都会带上Cookie，可能影响带宽和性能。</li><li>不能跨域。</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240816161757.png" alt="" /></p><ul><li><strong>样例</strong></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CookieController</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 设置Cookie</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/c1"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">cookie1</span><span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        response<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"login_username"</span><span class="token punctuation">,</span> <span class="token string">"itheima"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置Cookie/响应Cookie</span>        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 获取Cookie 两种方法</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/c2"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">cookie2</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Cookie</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cookies <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Cookie</span> cookie <span class="token operator">:</span> cookies<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cookie<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"login_username"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"login_username:&#123;&#125;"</span><span class="token punctuation">,</span>cookie<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"未找到指定Cookie"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/c3"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">cookie3</span><span class="token punctuation">(</span><span class="token annotation punctuation">@CookieValue</span><span class="token punctuation">(</span><span class="token string">"login_username"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> username<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Session</strong>：</p><ol><li><p><strong>什么是Session？</strong><br />Session是服务器端的一种会话机制，用于跟踪和保存用户的状态和数据。与Cookie不同，Session数据存储在服务器端，客户端只保留一个标识符（通常是Session ID）。</p></li><li><p><strong>Session的工作原理</strong></p></li></ol><ul><li><p><strong>生成Session</strong>：当用户访问服务器时，服务器会创建一个Session，并生成一个唯一的Session ID。这个Session ID会通过Cookie或URL参数传递给客户端。</p></li><li><p><strong>存储和检索</strong>：服务器将与该Session相关的数据存储在服务器端（如内存、数据库或文件系统）。当客户端再次发送请求时，会带上Session ID，服务器根据这个ID检索相应的Session数据。</p></li><li><p><strong>Session的生命周期</strong>：</p><ul><li><strong>创建</strong>：Session在用户首次访问时创建，并分配一个唯一的Session ID。</li><li><strong>过期</strong>：Session有一定的有效期（可配置），当用户长时间不活动，Session会自动过期和销毁。</li><li><strong>销毁</strong>：用户主动登出或Session过期后，Session数据会从服务器端删除。</li></ul></li></ul><ol start="3"><li><strong>Session的应用场景</strong></li></ol><ul><li><strong>用户认证</strong>：保存用户登录信息，确保用户在会话期间不需要重复登录。</li><li><strong>购物车功能</strong>：保存用户的购物车内容，在整个会话期间保持一致。</li><li><strong>用户跟踪</strong>：跟踪用户在网站上的操作，并根据这些操作做出响应。</li></ul><ol start="4"><li><strong>Session的优缺点</strong></li></ol><ul><li><p><strong>优点</strong>：</p><ul><li><strong>安全性较高</strong>：由于Session数据存储在服务器端，不容易被用户篡改或窃取。</li><li><strong>支持复杂数据</strong>：可以在Session中存储复杂的对象和数据结构。</li><li><strong>保持状态</strong>：适合需要在多个请求之间保持复杂状态的应用。</li></ul></li><li><p><strong>缺点</strong>：</p><ul><li><strong>占用服务器资源</strong>：每个用户的Session数据都存储在服务器上，用户数量多时可能导致服务器资源消耗过大。</li><li><strong>扩展性问题</strong>：在分布式系统中，Session管理较为复杂，需要采取措施（如Session共享、Session粘性）来保证用户会话的一致性。</li></ul></li><li><p><strong>样例</strong></p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SessionController</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 往HttpSession中存储值</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/s1"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">session1</span><span class="token punctuation">(</span><span class="token class-name">HttpSession</span> session<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"HttpSession-s1:&#123;&#125;"</span><span class="token punctuation">,</span> session<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"loginUser"</span><span class="token punctuation">,</span> <span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 往session中存储数据</span>        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 往HttpSession中获取值</span>    <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">session2</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HttpSession</span> session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"HttpSession-s2:&#123;&#125;"</span><span class="token punctuation">,</span> session<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> loginUser <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"loginUser"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 从session中获取数据</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"loginUser:&#123;&#125;"</span><span class="token punctuation">,</span> loginUser<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>loginUser<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240816164049.png" alt="" /></p><p><strong>JWT</strong>：<br />JWT（JSON Web Token）是一种常用的认证机制，它允许在网络应用中安全地在客户端和服务器之间传递信息。与Cookie和Session相比，JWT有着独特的工作方式和应用场景。</p><ol><li><strong>什么是JWT？</strong><br />JWT是一种开放标准（RFC 7519），用于在各方之间作为JSON对象安全传输信息。信息可以被验证和信任，因为它是数字签名的。JWT通常用于认证和授权。</li><li><strong>JWT的工作原理</strong></li></ol><ul><li><p><strong>生成JWT</strong>：当用户成功登录后，服务器会生成一个JWT。这个Token由三部分组成：<strong>Header（头部）</strong>、<strong>Payload（负载）<strong>和</strong>Signature（签名）</strong>。</p><ul><li><strong>Header</strong>：指定Token的类型（通常是JWT）和签名算法（如HMAC SHA256或RSA）。例如：{“alg”:“HS256”,“type”:“JWT”}</li><li><strong>Payload</strong>：包含声明（Claims），即需要传输的用户信息、默认信息或其他数据。这些数据是公开的，任何人都可以解码查看。例如：{“id”:1,“username”:“Tom”}</li><li><strong>Signature</strong>：由Header和Payload通过指定的算法加密生成，用于验证Token的真实性，确保安全性。</li></ul></li><li><p><strong>生成的JWT通常类似这样</strong>：<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240816174046.png" alt="" /></p></li><li><p><strong>测试样例</strong>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token comment">// 在pom.xml中添加依赖：</span> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token constant">JWT</span>配置<span class="token operator">--</span><span class="token operator">></span><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span><span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>io<span class="token punctuation">.</span>jsonwebtoken<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span><span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>jjwt<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span><span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">></span></span><span class="token number">0.9</span><span class="token number">.1</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 请检查最新版本号 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span> <span class="token comment">// 测试样例</span> <span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">genjwt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> claims <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>claims<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>claims<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span><span class="token string">"Tom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> jwt <span class="token operator">=</span> <span class="token class-name">Jwts</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setClaims</span><span class="token punctuation">(</span>claims<span class="token punctuation">)</span> <span class="token comment">// 自定义内容(载荷)</span><span class="token punctuation">.</span><span class="token function">signWith</span><span class="token punctuation">(</span><span class="token class-name">SignatureAlgorithm</span><span class="token punctuation">.</span><span class="token constant">HS256</span><span class="token punctuation">,</span> <span class="token string">"lusy"</span><span class="token punctuation">)</span><span class="token comment">// 签名算法</span><span class="token punctuation">.</span><span class="token function">setExpiration</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">12</span> <span class="token operator">*</span> <span class="token number">3600</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 有效期 单位 ms</span><span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jwt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>传递JWT</strong>：JWT生成后，服务器会将其返回给客户端。客户端通常将JWT存储在<code>Local Storage</code>、<code>Session Storage</code>或Cookie中。</p></li><li><p><strong>验证JWT</strong>：在后续请求中，客户端会将JWT包含在请求头（通常是<code>Authorization: Bearer &lt;token&gt;</code>）中发送给服务器。服务器接收到JWT后，会使用相同的签名算法和密钥验证Token的真实性，并从Payload中提取用户信息。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">parseJwt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">Claims</span> claims <span class="token operator">=</span> <span class="token class-name">Jwts</span><span class="token punctuation">.</span><span class="token function">parser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSigningKey</span><span class="token punctuation">(</span><span class="token string">"lusy"</span><span class="token punctuation">)</span><span class="token comment">// 指定签名秘钥</span><span class="token punctuation">.</span><span class="token function">parseClaimsJws</span><span class="token punctuation">(</span><span class="token string">"eyJhbGciOiJIUzI1NiJ9.eyJpZCI6IjEiLCJleHAiOjE3MjM4NDk2MzIsInVzZXJuYW1lIjoiVG9tIn0.KrQ-8Y4ISZds9DZ_OHaXvrrLM-4By84ngwV8vz9A6bE"</span><span class="token punctuation">)</span><span class="token comment">// 解析令牌</span><span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>claims<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><blockquote><p><strong>注意事项</strong>：</p><ul><li>JWT校验时使用的签名秘钥，必须和生成的JWT令牌时使用的秘钥是配套的。</li><li>如果JWT令牌解析校验时报错，则说明JWT令牌被篡改或失效了，令牌非法。</li></ul></blockquote><ol start="3"><li><strong>JWT的应用场景</strong></li></ol><ul><li><p><strong>用户认证</strong>：在用户登录成功后，服务器生成JWT并返回给客户端。客户端在后续请求中携带这个JWT，以证明自己的身份。</p></li><li><p><strong>授权</strong>：服务器可以在JWT的Payload中包含用户的权限信息（如角色、权限范围），以决定用户能访问哪些资源。</p></li><li><p><strong>信息交换</strong>：JWT可以安全地传输信息，因为它是经过签名的，接收方可以验证信息的来源和完整性。</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240816191747.png" alt="" /></p><ol start="4"><li><strong>JWT的优缺点</strong></li></ol><ul><li><p><strong>优点</strong>：</p><ul><li><strong>无状态</strong>：JWT是无状态的，不需要在服务器端存储会话信息，这使得它非常适合分布式系统。</li><li><strong>跨域支持</strong>：JWT不依赖于Cookie，因此可以在不同域名之间轻松传递。</li><li><strong>可扩展性</strong>：JWT的Payload部分可以包含自定义的声明，灵活性高。</li></ul></li><li><p><strong>缺点</strong>：</p><ul><li><strong>安全性风险</strong>：JWT的Payload部分是可见的，尽管它是签名的，但不能加密。如果存储敏感信息，可能会有安全隐患。</li><li><strong>Token大小</strong>：JWT通常比传统的Session ID大，因为它包含了更多信息，这可能增加网络传输的开销。</li><li><strong>Token管理</strong>：一旦JWT被签发，服务器无法主动撤销Token的权限，除非采用额外的策略（如Token黑名单）。</li></ul></li></ul><p><strong>会话跟踪方案对比</strong><br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240816191918.png" alt="" /></p><h4 id="982-过滤器filter"><a class="markdownIt-Anchor" href="#982-过滤器filter"></a> 9.8.2 过滤器Filter</h4><ul><li><p><strong>概述</strong>：</p><ul><li>概念：Filter 过滤器，是JavaWeb三大组件(Servlet,Filter,Listener)之一。</li><li>过滤器可以把对资源的请求拦截下来，从而实现一些特殊的功能。</li><li>过滤器一般完成一些通用的操作，比如：登录校验，统一编码处理、敏感字符处理等。<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240816192401.png" alt="" /></li></ul></li><li><p><strong>快速入门</strong>：</p><ol><li>创建一个Filter类，实现Filter接口，重写接口中的方法。</li><li>配置Filter：Filter类加上<code>@WebFilter</code>注解，配置拦截资源的路径，引导类上加<code>@ServletComponentScan</code>注解开启Servlet组件支持。<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240816192829.png" alt="" /></li></ol></li><li><p><strong>拦截路径</strong>：<br />Filter可以根据需求，配置不同的拦截资源路径：</p><table><thead><tr><th style="text-align:left">拦截路径</th><th style="text-align:left">urlPatterns值</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:left">拦截具体路径</td><td style="text-align:left"><code>/login</code></td><td style="text-align:left">只有访问 <code>/login</code> 路径时，才会被拦截</td></tr><tr><td style="text-align:left">目录拦截</td><td style="text-align:left"><code>/emps/*</code></td><td style="text-align:left">访问 <code>/emps/</code> 下的所有资源，都会被拦截</td></tr><tr><td style="text-align:left">拦截所有</td><td style="text-align:left"><code>/*</code></td><td style="text-align:left">访问所有资源，都会被拦截</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebFilter</span><span class="token punctuation">(</span>urlPatterns <span class="token operator">=</span> <span class="token string">"/*"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>执行流程</strong>：<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240816193703.png" alt="" /></p></li><li><p><strong>过滤器链</strong>：<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240816193903.png" alt="" /></p><blockquote><p><strong>注意</strong>：<br />存在多个过滤器时，过滤器的执行顺序是按照过滤器配置的顺序执行的。但如果没有明确指定执行顺序（例如通过@Order注解），那么容器通常会根据类名的字典顺序（字母顺序）来决定过滤器的执行顺序。</p></blockquote></li></ul><h4 id="983-拦截器interceptor"><a class="markdownIt-Anchor" href="#983-拦截器interceptor"></a> 9.8.3 拦截器(Interceptor)</h4><ul><li><strong>概述</strong>：<ul><li>概念：是一种动态拦截方法调用的机制，类似于过滤器。Spring框架中提供的，用来动态拦截控制器方法的执行。</li><li>作用：拦截请求，在指定的方法调用前后，根据业务需要执行预先设定的代码。<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240816202319.png" alt="" /></li></ul></li><li><strong>快速入门</strong>：<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240816202449.png" alt="" /><br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240816202458.png" alt="" /></li><li><strong>拦截器可以根据需求，配置不同的拦截路径</strong>：<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240816202719.png" alt="" /></li><li><strong>执行流程</strong>：<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240816202805.png" alt="" /></li><li><strong>多个拦截器执行顺序</strong>：<ol><li><strong>preHandle() 方法</strong>：SpringMVC 会把所有拦截器收集到一起，然后按照配置顺序调用各个 preHandle() 方法。</li><li><strong>postHandle() 方法</strong>：SpringMVC 会把所有拦截器收集到一起，然后按照配置相反的顺序调用各个 postHandle() 方法。</li><li><strong>afterCompletion() 方法</strong>：SpringMVC 会把所有拦截器收集到一起，然后按照配置相反的顺序调用各个 afterCompletion() 方法。</li></ol></li></ul><h4 id="984-异常处理"><a class="markdownIt-Anchor" href="#984-异常处理"></a> 9.8.4 异常处理</h4><p><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240816202951.png" alt="" /><br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240816203024.png" alt="" /></p><h3 id="99-参数校验"><a class="markdownIt-Anchor" href="#99-参数校验"></a> 9.9 参数校验</h3><blockquote><p>在 Web 应用三层架构体系中，表述层负责接收浏览器提交的数据，业务逻辑层负责数据的处理。为了能够让业务逻辑层基于正确的数据进行处理，我们需要在表述层对数据进行检查，将错误的数据隔绝在业务逻辑层之外。</p></blockquote><p><strong>校验概述</strong><br />JSR 303 是 Java 为 Bean 数据合法性校验提供的标准框架，它已经包含在 JavaEE 6.0 标准中。JSR 303 通过在 Bean 属性上标注类似于 @NotNull、@Max 等标准的注解指定校验规则，并过标准的验证接口对Bean进行验证。</p><table><thead><tr><th>注解</th><th>规则</th></tr></thead><tbody><tr><td><b><code>@Null</code></b></td><td>标注值必须为 null</td></tr><tr><td><b><code>@NotNull</code></b></td><td>标注值不可为 null</td></tr><tr><td><b><code>@AssertTrue</code></b></td><td>标注值必须为 true</td></tr><tr><td><b><code>@AssertFalse</code></b></td><td>标注值必须为 false</td></tr><tr><td><b><code>@Min(value)</code></b></td><td>标注值必须大于或等于 value</td></tr><tr><td><b><code>@Max(value)</code></b></td><td>标注值必须小于或等于 value</td></tr><tr><td><b><code>@DecimalMin(value)</code></b></td><td>标注值必须大于或等于 value</td></tr><tr><td><b><code>@DecimalMax(value)</code></b></td><td>标注值必须小于或等于 value</td></tr><tr><td><b><code>@Size(max,min)</code></b></td><td>标注值大小必须在 max 和 min 限定的范围内</td></tr><tr><td><b><code>@Digits(integer,fratction)</code></b></td><td>标注值值必须是一个数字，且必须在可接受的范围内</td></tr><tr><td><b><code>@Past</code></b></td><td>标注值只能用于日期型，且必须是过去的日期</td></tr><tr><td><b><code>@Future</code></b></td><td>标注值只能用于日期型，且必须是将来的日期</td></tr><tr><td><b><code>@Pattern(value)</code></b></td><td>标注值必须符合指定的正则表达式</td></tr></tbody></table><p>JSR 303 只是一套标准，需要提供其实现才可以使用。Hibernate Validator 是 JSR 303 的一个参考实现，除支持所有标准的校验注解外，它还支持以下的扩展注解：</p><table><thead><tr><th>注解</th><th>规则</th></tr></thead><tbody><tr><td><b><code>@Email</code></b></td><td>标注值必须是格式正确的 Email 地址</td></tr><tr><td><b><code>@Length</code></b></td><td>标注值字符串大小必须在指定的范围内</td></tr><tr><td><b><code>@NotEmpty</code></b></td><td>标注值字符串不能是空字符串</td></tr><tr><td><b><code>@Range</code></b></td><td>标注值必须在指定的范围内</td></tr></tbody></table><p>Spring 4.0 版本已经拥有自己独立的数据校验框架，同时支持 JSR 303 标准的校验框架。Spring 在进行数据绑定时，可同时调用校验框架完成数据校验工作。在SpringMVC 中，可直接通过注动 <b><code>@EnableWebMvc</code></b> 的方式进行数据校验。Spring 的 LocalValidatorFactoryBean 既实现了 Spring 的 Validator 接口，也实现了 JSR 303 的 Validator 接口。只要在Spring容器定义一个LocalValidatorFactoryBean，即可将其注入到需要数据校验的 Bean中。Spring本身并没有提供JSR 303的实现，所以必须将JSR 303的实现者的jar包放到类路径下。</p><p>配置 <b><code>@EnableWebMvc</code></b> 后，SpringMVC 会默认装配好一个 LocalValidatorFactoryBean，通过在处理方法的入参上标注 @Validated 注解即可让 SpringMVC 在完成数据绑定后执行数据校验的作。<br /><strong>操作演示</strong></p><ul><li><strong>导入依赖</strong></li></ul>  <pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">&lt;!-- 校验注解 --&gt;&lt;dependency&gt;    &lt;groupId&gt;jakarta.platform&lt;&#x2F;groupId&gt;    &lt;artifactId&gt;jakarta.jakartaee-web-api&lt;&#x2F;artifactId&gt;    &lt;version&gt;9.1.0&lt;&#x2F;version&gt;    &lt;scope&gt;provided&lt;&#x2F;scope&gt;&lt;&#x2F;dependency&gt;&lt;!-- 校验注解实现--&gt;        &lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.hibernate.validator&#x2F;hibernate-validator --&gt;&lt;dependency&gt;    &lt;groupId&gt;org.hibernate.validator&lt;&#x2F;groupId&gt;    &lt;artifactId&gt;hibernate-validator&lt;&#x2F;artifactId&gt;    &lt;version&gt;8.0.0.Final&lt;&#x2F;version&gt;&lt;&#x2F;dependency&gt;&lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.hibernate.validator&#x2F;hibernate-validator-annotation-processor --&gt;&lt;dependency&gt;    &lt;groupId&gt;org.hibernate.validator&lt;&#x2F;groupId&gt;    &lt;artifactId&gt;hibernate-validator-annotation-processor&lt;&#x2F;artifactId&gt;    &lt;version&gt;8.0.0.Final&lt;&#x2F;version&gt;&lt;&#x2F;dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>应用校验注解</strong></li></ul>  <pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">import jakarta.validation.constraints.Email;import jakarta.validation.constraints.Min;import org.hibernate.validator.constraints.Length;&#x2F;** * projectName: com.atguigu.pojo *&#x2F;public class User &#123;    &#x2F;&#x2F;age   1 &lt;&#x3D;  age &lt; &#x3D; 150    @Min(10)    private int age;    &#x2F;&#x2F;name 3 &lt;&#x3D; name.length &lt;&#x3D; 6    @Length(min &#x3D; 3,max &#x3D; 10)    private String name;    &#x2F;&#x2F;email 邮箱格式    @Email    private String email;    public int getAge() &#123;        return age;    &#125;    public void setAge(int age) &#123;        this.age &#x3D; age;    &#125;    public String getName() &#123;        return name;    &#125;    public void setName(String name) &#123;        this.name &#x3D; name;    &#125;    public String getEmail() &#123;        return email;    &#125;    public void setEmail(String email) &#123;        this.email &#x3D; email;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>handler标记和绑定错误收集</strong></li></ul>  <pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">@RestController@RequestMapping(&quot;user&quot;)public class UserController &#123;    &#x2F;**     * @Validated 代表应用校验注解! 必须添加!     *&#x2F;    @PostMapping(&quot;save&quot;)    public Object save(@Validated @RequestBody User user,                       &#x2F;&#x2F;在实体类参数和 BindingResult 之间不能有任何其他参数, BindingResult可以接受错误信息,避免信息抛出!                       BindingResult result)&#123;       &#x2F;&#x2F;判断是否有信息绑定错误! 有可以自行处理!        if (result.hasErrors())&#123;            System.out.println(&quot;错误&quot;);            String errorMsg &#x3D; result.getFieldError().toString();            return errorMsg;        &#125;        &#x2F;&#x2F;没有,正常处理业务即可        System.out.println(&quot;正常&quot;);        return user;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>测试效果</strong><br /><img src="https://secure2.wostatic.cn/static/oXLwvcaMaLc4TggmPFNToV/image.png?auth_key=1724517030-iDRnH6dkdc56wHJRoTSLmQ-0-4a74de68941be939573820ba54202593" alt="" /></li></ul><blockquote><p><strong>易混总结</strong><br />@NotNull、@NotEmpty、@NotBlank 都是用于在数据校验中检查字段值是否为空的注解，但是它们的用法和校验规则有所不同。</p><ol><li><p>@NotNull  (包装类型不为null)</p><p>@NotNull 注解是 JSR 303 规范中定义的注解，当被标注的字段值为 null 时，会认为校验失败而抛出异常。该注解不能用于字符串类型的校验，若要对字符串进行校验，应该使用 @NotBlank 或 @NotEmpty 注解。</p></li><li><p>@NotEmpty (集合类型长度大于0)</p><p>@NotEmpty 注解同样是 JSR 303 规范中定义的注解，对于 CharSequence、Collection、Map 或者数组对象类型的属性进行校验，校验时会检查该属性是否为 Null 或者 size()==0，如果是的话就会校验失败。但是对于其他类型的属性，该注解无效。需要注意的是只校验空格前后的字符串，如果该字符串中间只有空格，不会被认为是空字符串，校验不会失败。</p></li><li><p>@NotBlank （字符串，不为null，切不为&quot;  &quot;字符串）</p><p>@NotBlank 注解是 Hibernate Validator 附加的注解，对于字符串类型的属性进行校验，校验时会检查该属性是否为 Null 或 “” 或者只包含空格，如果是的话就会校验失败。需要注意的是，@NotBlank 注解只能用于字符串类型的校验。</p></li></ol><p>总之，这三种注解都是用于校验字段值是否为空的注解，但是其校验规则和用法有所不同。在进行数据校验时，需要根据具体情况选择合适的注解进行校验。</p></blockquote><h2 id="10-事务管理"><a class="markdownIt-Anchor" href="#10-事务管理"></a> 10. 事务管理</h2><h3 id="101-事务回顾"><a class="markdownIt-Anchor" href="#101-事务回顾"></a> 10.1 事务回顾</h3><ul><li><strong>概念</strong>：事务是一组操作的集合，它是一个不可分割的工作单位，这些操作<font color="red">要么同时成功，要么同时失败</font></li><li><strong>操作</strong>：<ul><li><strong>开启事务（一组操作开始前，开启事务）</strong>：<b><code>start transaction / begin</code>;</b></li><li><strong>提交事务（这组操作全部成功后，提交事务）</strong>：<b><code>commit</code>;</b></li><li><strong>回滚事务（中间任何一个操作出现异常，回滚事务）</strong>：<b><code>rollback</code>;</b></li></ul></li></ul><h3 id="102-spring事务管理"><a class="markdownIt-Anchor" href="#102-spring事务管理"></a> 10.2 Spring事务管理</h3><ul><li><p><strong>注解</strong>：<b><code>@Transactional</code></b></p></li><li><p><strong>位置</strong>：业务(Service)层的方法上、类上、接口上</p></li><li><p><strong>作用</strong>：将当前方法交给Spring进行事务管理，方法执行前，开启事务；成功执行完毕，提交事务；出现异常，回滚事务<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240817205221.png" alt="" /></p></li><li><p><strong>属性</strong>：</p><ul><li><b><code>rollbackFor</code>回滚</b>：默认情况下，只有出现<b><code>RuntimeException</code></b>才会回滚异常，<code>rollbackFor</code>属性用于控制出现何种异常类型，回滚事务</li><li><b><code>noRollbackFor</code>不回滚</b>：指定哪些异常不会回滚, 默认没有指定,如果指定,应该在rollbackFor的范围内!<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240817205844.png" alt="" /></li></ul><blockquote><p>如果<code>rollbackFor</code>和<code>noRollbackFor</code>同时指定同一类型，Spring的行为会出现冲突和不确定性</p></blockquote><ul><li><b><code>timeout</code>超时时间</b>：当事务运行时间超过了指定的时间限制，事务将被强制回滚，并抛出一个 <strong>TransactionTimedOutException</strong> 异常。默认值为-1，表示永不超时<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240822140059.png" alt="" /></li><li><b><code>propagation</code>传播行为</b>：指的是当一个事务方法被另一个事务方法调用时，这个事务方法应该如何进行事务控制<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240817210241.png" alt="" /></li></ul><table><thead><tr><th style="text-align:left">属性值</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:left"><code>REQUIRED</code></td><td style="text-align:left">【默认值】需要事务，有则加入，无则创建新事务</td></tr><tr><td style="text-align:left"><code>REQUIRES_NEW</code></td><td style="text-align:left">需要新事务，无论有无，总是创建新事务</td></tr><tr><td style="text-align:left"><code>SUPPORTS</code></td><td style="text-align:left">支持事务，有则加入，无则在无事务状态中运行</td></tr><tr><td style="text-align:left"><code>NOT_SUPPORTED</code></td><td style="text-align:left">不支持事务，在无事务状态下运行，如果当前存在已有事务，则挂起当前事务</td></tr><tr><td style="text-align:left"><code>MANDATORY</code></td><td style="text-align:left">必须有事务，否则抛出异常</td></tr><tr><td style="text-align:left"><code>NEVER</code></td><td style="text-align:left">必须没有事务，否则抛出异常</td></tr></tbody></table><blockquote><ol><li><code>REQUIRED</code>：大部分情况下都是用该传播行为即可。</li><li><code>REQUIRES_NEW</code>：当我们不希望事务之间相互影响时，可以使用该传播行为。比如：下订单前需要记录日志，不论订单保存成功与否，都需要保证日志记录能够记录成功。</li></ol></blockquote><ul><li><b><code>isolation</code>隔离级别</b>：设置事务的隔离级别,mysql默认是repeatable read!</li></ul></li></ul><ol><li><strong>读未提交（Read Uncommitted）</strong>：事务可以读取未被提交的数据，容易产生脏读、不可重复读和幻读等问题。实现简单但不太安全，一般不用。</li><li><strong>读已提交（Read Committed）</strong>：事务只能读取已经提交的数据，可以避免脏读问题，但可能引发不可重复读和幻读。</li><li><strong>可重复读（Repeatable Read）</strong>：在一个事务中，相同的查询将返回相同的结果集，不管其他事务对数据做了什么修改。可以避免脏读和不可重复读，但仍有幻读的问题。</li><li><strong>串行化（Serializable）</strong>：最高的隔离级别，完全禁止了并发，只允许一个事务执行完毕之后才能执行另一个事务。可以避免以上所有问题，但效率较低，不适用于高并发场景。<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240822141436.png" alt="" /></li></ol><blockquote><p><strong>开启spring事务管理日志</strong>：<br />在配置文件中添加</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">logging</span><span class="token punctuation">:</span>  <span class="token key atrule">level</span><span class="token punctuation">:</span>    <span class="token key atrule">org.springframework.jdbc.support.JdbcTransactionManager</span><span class="token punctuation">:</span> debug<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>注意事项</strong>：<br />如果在非SpringBoot框架中想使用事务功能，需要在配置类添加<b><code>@EnableTransactionManagement</code></b>注解，并在pom.xml中添加引入spring-tx依赖。<br /><b><code>@EnableTransactionManagement</code></b> 是Spring中的一个注解，用于启用Spring的注解驱动的事务管理功能。它通常与 <strong>@Configuration</strong> 注解一起使用，配置类中声明它表示希望在应用程序中使用基于注解的事务管理。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 声明式事务依赖--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-tx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>6.0.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="11aop"><a class="markdownIt-Anchor" href="#11aop"></a> 11.AOP</h2><h3 id="111-概述"><a class="markdownIt-Anchor" href="#111-概述"></a> 11.1 概述</h3><ul><li><strong>AOP</strong>：Aspect Oriented Programming（面向切面编程，面向方法编程），其实就是面对特定方法编程。</li><li><strong>场景</strong>：<br />案例部分功能运行较慢，定位执行耗时较长的业务方法，此时需要统计每一个业务方法的执行耗时<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240817212432.png" alt="" /><br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240817212504.png" alt="" /><ul><li>记录操作日志</li><li>权限控制</li><li>事务管理</li></ul></li><li><strong>优势</strong>：<ul><li>代码无侵入</li><li>减少重复代码</li><li>提高开发效率</li><li>维护方便</li></ul></li><li><strong>实现</strong>：<br />动态代理是面向切面编程最主流的实现。而SpringAOP是Spring框架的高级技术，旨在管理Bean对象的过程中，主要通过底层的动态代理机制，对特定的方法进行编程。</li></ul><h3 id="112-快速入门"><a class="markdownIt-Anchor" href="#112-快速入门"></a> 11.2 快速入门</h3><p>统计各个业务层方法执行耗时</p><ul><li><strong>导入依赖</strong>：在pom.xml中添加AOP依赖<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-aop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><strong>编写AOP依赖</strong>：针对特定的方法根据业务需要进行编程<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Aspect</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TimeAspect</span> <span class="token punctuation">&#123;</span>  <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"execution(* com.lusy.service.impl.*.*(..))"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">recordTime</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> pjp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Object</span> result <span class="token operator">=</span> pjp<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用原始方法运行</span>    <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>pjp<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"方法执行耗时：&#123;&#125;ms"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><blockquote><p><strong>注意事项</strong>：<br />如果不是在springboot框架中使用AOP，还需要在配置类中添加&lt;&gt;<code>@EnableAspectJAutoProxy</code>&lt;/  b&gt;注解开启AOP功能</p></blockquote><h3 id="113-aop核心概念"><a class="markdownIt-Anchor" href="#113-aop核心概念"></a> 11.3 AOP核心概念</h3><p><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240817220556.png" alt="" /></p><h3 id="114-通知类型"><a class="markdownIt-Anchor" href="#114-通知类型"></a> 11.4 通知类型</h3><ul><li><b><code>@Around</code></b>：环绕通知，此注解标注的通知方法在目标方法前、后都被执行</li><li><b><code>@Before</code></b>：前置通知，此注解标注的通知方法在目标方法前被执行</li><li><b><code>@After</code></b>：后置通知，此注解标注的通知方法在目标方法后被执行，无论是否有异常都会执行</li><li><b><code>@AfterReturning</code></b>：返回后通知，此注解标注的通知方法在目标方法正常返回后被执行，有异常不会执行</li><li><b><code>@AfterThrowing</code></b>：异常后通知，此注解标注的通知方法在目标方法抛出异常后被执行，正常返回不会执行</li></ul><blockquote><p><strong>注意事项</strong>：</p><ul><li><b><code>@Around</code></b>环绕通知需要自己调用 <code>ProceedingJoinPoint.proceed()</code>方法来让原始方法执行，其它通知则不需要考虑目标方法执行</li><li><b><code>@Around</code></b>环绕通知的返回值，必须指定为Object类型，来接收原始方法的返回值</li><li><b><code>@AfterReturning</code></b>和<b><code>@AfterThrowing</code></b>通知，如果需要指定返回值来接收原始方法的返回值或异常对象，可以通过各自的属性值<b><code>returning</code></b>和<b><code>throwing</code></b>来指定接收返回值或异常对象的变量名。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// @AfterReturning注解标记返回通知方法</span><span class="token comment">// 在返回通知中获取目标方法返回值分两步：</span><span class="token comment">// 第一步：在@AfterReturning注解中通过returning属性设置一个名称</span><span class="token comment">// 第二步：使用returning属性设置的名称在通知方法中声明一个对应的形参</span><span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span>       value <span class="token operator">=</span> <span class="token string">"execution(public int com.atguigu.aop.api.Calculator.add(int,int))"</span><span class="token punctuation">,</span>       returning <span class="token operator">=</span> <span class="token string">"targetMethodReturnValue"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printLogAfterCoreSuccess</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">,</span> <span class="token class-name">Object</span> targetMethodReturnValue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">String</span> methodName <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[AOP返回通知] "</span><span class="token operator">+</span>methodName<span class="token operator">+</span><span class="token string">"方法成功结束了，返回值是："</span> <span class="token operator">+</span> targetMethodReturnValue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// @AfterThrowing注解标记异常通知方法</span><span class="token comment">// 在异常通知中获取目标方法抛出的异常分两步：</span><span class="token comment">// 第一步：在@AfterThrowing注解中声明一个throwing属性设定形参名称</span><span class="token comment">// 第二步：使用throwing属性指定的名称在通知方法声明形参，Spring会将目标方法抛出的异常对象从这里传给我们</span><span class="token annotation punctuation">@AfterThrowing</span><span class="token punctuation">(</span>        value <span class="token operator">=</span> <span class="token string">"execution(public int com.atguigu.aop.api.Calculator.add(int,int))"</span><span class="token punctuation">,</span>        throwing <span class="token operator">=</span> <span class="token string">"targetMethodException"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printLogAfterCoreException</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> targetMethodException<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> methodName <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[AOP异常通知] "</span><span class="token operator">+</span>methodName<span class="token operator">+</span><span class="token string">"方法抛异常了，异常类型是："</span> <span class="token operator">+</span> targetMethodException<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getName <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="115-pointcut注解"><a class="markdownIt-Anchor" href="#115-pointcut注解"></a> 11.5 @Pointcut注解</h3><p>该注解的作用是将公共的切点表达式抽取出来，需要用到时引用该切点表达式即可。<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240817221648.png" alt="" /></p><h3 id="116-通知顺序"><a class="markdownIt-Anchor" href="#116-通知顺序"></a> 11.6 通知顺序</h3><p><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240817230133.png" alt="" /></p><h3 id="117-切入表达式"><a class="markdownIt-Anchor" href="#117-切入表达式"></a> 11.7 切入表达式</h3><ul><li><strong>概念</strong>：描述切入点方法的一种表达式</li><li><strong>作用</strong>：主要用来决定项目中的哪些方法需要加入通知</li><li><strong>常见形式</strong>：<ul><li><b><code>execution(……)</code></b>：根据方法的签名来匹配</li><li><b><code>annotation(……)</code></b>：根据注解匹配<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240817230513.png" alt="" /></li></ul></li></ul><h4 id="1171-execution"><a class="markdownIt-Anchor" href="#1171-execution"></a> 11.7.1 execution</h4><p>execution 主要根据方法的返回值、包名、类名、方法名、方法参数等信息来匹配，语法为：<br /><b><code>execution([访问修饰符] 返回值 [包名.类名.]方法名(方法参数) [throws 异常])</code></b></p><ul><li>其中方法参数填写的是<font color="red"><strong>参数类型的全类名</strong></font></li><li>其中可省略的部分：<ul><li><strong>访问修饰符</strong>：可以省略，表示任意访问修饰符（比如：public、protected）</li><li><strong>包名.类名</strong>：可以省略，表示任意包名、类名</li><li><strong>throws 异常</strong>：可以省略，表示任意异常（注意是方法上声明抛出的异常，不是实际抛出的异常）</li></ul></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"execution(public void com.itheima.service.impl.DeptServiceImpl.delete(java.lang.Integer))"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 方法体</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>可以使用通配符描述切入点<ul><li><b><code>*</code></b>：单个独立的任意符号，可以通配任意返回值、包名、类名、方法名、任意类型的一个参数，也可以通配包、类、方法名的一部分</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">execution</span><span class="token punctuation">(</span><span class="token operator">*</span> com<span class="token punctuation">.</span>*<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>*<span class="token punctuation">.</span>*<span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><b><code>..</code></b>：多个独立的任意符号，可以通配任意层级的包，或任意类型、任意个数的参数,在通配包时，不能作为开头。如果要指定全部包，可以用<b><code>*..</code></b></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">execution</span><span class="token punctuation">(</span><span class="token operator">*</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span><span class="token punctuation">.</span>DeptService<span class="token punctuation">.</span>*<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">execution</span><span class="token punctuation">(</span><span class="token operator">*</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>service<span class="token punctuation">.</span><span class="token punctuation">.</span>*<span class="token punctuation">.</span>*<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">execution</span><span class="token punctuation">(</span><span class="token operator">*</span> <span class="token punctuation">.</span><span class="token punctuation">.</span>example<span class="token punctuation">.</span>service<span class="token punctuation">.</span><span class="token punctuation">.</span>*<span class="token punctuation">.</span>*<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 错误的</span><span class="token comment">// 查询全部包下，无参数的方法</span><span class="token function">execution</span><span class="token punctuation">(</span><span class="token operator">*</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token punctuation">.</span>*<span class="token punctuation">.</span>*<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//第三个 *：匹配类名中的最后一级，防止出现连续的 ...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><blockquote><p><strong>注意事项</strong>：<br />根据业务需要，可以使用 且(&amp;&amp;) 、或(||)、非(!)来组合比较复杂的切入点表达式。</p></blockquote><ul><li>书写建议<ul><li>所有业务<strong>方法名</strong>在<strong>命名</strong>时尽量<strong>规范</strong>，方便切入点表达式快速匹配。如：查询类方法都是find开头，更新类方法都是update开头</li><li>描述切入点方法通常<strong>基于接口描述</strong>，而不是直接描述实现类，<strong>增强拓展性</strong></li><li>在满足业务需要的前提下，<strong>尽量缩小切入点的匹配范围</strong>。如：包名匹配尽量不使用… ，使用 * 匹配单个包。</li></ul></li></ul><h4 id="1172-annotation"><a class="markdownIt-Anchor" href="#1172-annotation"></a> 11.7.2 annotation</h4><p><code>@annotation</code>注解的切点表达式用于匹配被指定注解标记的方法。例如，如果你有一个自定义注解<code>@MyLog</code>，你可以使用<code>@annotation</code>来指定所有带有<code>@MyLog</code>注解的方法作为切点。</p><ul><li><strong>示例</strong>：<br />假设你有一个自定义注解<code>@MyLog</code>：<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">MyLog</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>你希望在所有标记了<code>@MyLog</code>的地方记录方法执行时间，可以定义一个切面如下：<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoggingAspect</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"@annotation(com.example.MyLog)"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">logExecutionTime</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 在方法执行前记录开始时间</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Method "</span> <span class="token operator">+</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" is about to execute"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@After</span><span class="token punctuation">(</span><span class="token string">"@annotation(com.example.MyLog)"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterExecution</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 在方法执行后记录结束时间</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Method "</span> <span class="token operator">+</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" has executed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>使用<code>@MyLog</code>注解:<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@MyLog</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">performTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 业务逻辑</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Task is being performed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="118-连接点"><a class="markdownIt-Anchor" href="#118-连接点"></a> 11.8 连接点</h3><ul><li>在Spring中用<font color="red">JoinPoint</font>抽象了连接点，用它可以获取方法执行时的相关信息，如目标类名，方法名，方法参数等。<ul><li>对于<b><code>@Around</code></b>通知，获取连接点信息只能使用 <b><code>ProceedingJoinPoint</code></b><br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240817233214.png" alt="" /></li><li>对于其它四种通知，获取连接点信息只能使用 <b><code>JoinPoint</code></b>，它是<b><code>ProceedingJoinPoint</code></b>的父类<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240817233227.png" alt="" /></li></ul></li></ul><h2 id="12配置"><a class="markdownIt-Anchor" href="#12配置"></a> 12.配置</h2><ul><li>SpringBoot除了支持配置文件属性配置，还支持<strong>Java系统属性</strong>和<strong>命令行参数</strong>的方式进行属性配置。<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240818184556.png" alt="" /></li><li><strong>优先级(高 -&gt; 低)</strong><ul><li>命令行参数 (–xxx=xx)</li><li>java系统属性（-Dxxx=xxx）</li><li>application.properties</li><li>application.yml</li><li>application.yml（忽略）</li></ul></li></ul><h2 id="13bean的管理"><a class="markdownIt-Anchor" href="#13bean的管理"></a> 13.Bean的管理</h2><h3 id="131-获取bean"><a class="markdownIt-Anchor" href="#131-获取bean"></a> 13.1 获取Bean</h3><ul><li>默认情况下，Spring项目启动时，会把Bean都创建好放在IOC容器中，如果想要主动获取这些Bean，可以通过如下方式：<ul><li><strong>根据name获取Bean</strong>：<code>Object getBean(String name)</code></li><li><strong>根据类型获取Bean</strong>：<code>&lt;T&gt; T getBean(Class&lt;T&gt; requireType)</code></li><li><strong>根据name获取Bean（带类型转换）</strong>：<code>&lt;T&gt; T getBean(String name, Class&lt;T&gt; requireType)</code></li></ul></li></ul><blockquote><p><strong>注意事项</strong>：<br />上述所说的【Spring项目启动时，会把其中的Bean都创建好】还会受到作用域及延迟初始化影响，这里主要针对于默认的单例非延迟加载的Bean而言。</p></blockquote><h3 id="132-bean作用域"><a class="markdownIt-Anchor" href="#132-bean作用域"></a> 13.2 Bean作用域</h3><ul><li>Spring支持五种作用域，后三种在web环境下才生效：<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240818190143.png" alt="" /></li><li>可以通过<b><code>@Scope</code></b>注解来进行配置作用域<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span><span class="token string">"prototype"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/depts"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeptController</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注意事项</strong>：</p><ul><li>默认<strong>singleton</strong>的bean，在容器启动时被创建，可以使用<b><code>@Lazy</code></b>注解来延迟初始化（延迟到第一次使用时）</li><li>prototype的bean，每一次使用该bean的时候都会创建一个新的实例</li><li>实际开发当中，绝大部分的Bean是单例的，也就是说大部分Bean不需要配置<strong>Scope</strong>属性</li></ul></blockquote></li></ul><h3 id="133-第三方bean"><a class="markdownIt-Anchor" href="#133-第三方bean"></a> 13.3 第三方Bean</h3><ul><li><b><code>@Bean</code></b><ul><li>如果要管理的Bean对象来自第三方（不是自定义的），是无法用<b><code>Component</code></b>及衍生注解声明Bean的，就需要用到<b><code>@Bean</code></b>注解。</li><li>若要管理的第三方Bean对象，建议对这些Bean进行分类配置，可以通过 <b><code>@Configuration</code></b>注解来声明一个配置类。<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240818191744.png" alt="" /></li></ul></li></ul><blockquote><p><strong>注意事项</strong>：</p><ul><li><strong>@Bean</strong>修饰的方法将当前方法的返回值对象交给IOC容器管理，成为IOC容器的Bean</li><li>通过<b>@Bean</b>注解的name或value属性可以声明Bean的名称，如果不指定，默认Bean的名称就是方法名。</li><li>周期方法指定：<ul><li>原有注解方案：@PostConstruct、@PreDestroy 注解指定</li><li>bean属性指定：initMethod、destroyMethod 指定</li></ul></li><li>如果第三方Bean需要依赖其它Bean对象，直接在@Bean定义的方法中设置形参即可，容器会根据类型自动装配。如果有多个类型匹配，可以使用形参名等同于对应的Beanid标识即可。</li></ul></blockquote><blockquote><p><strong>@Component及衍生注解与@Bean注解使用场景？</strong></p><ul><li>项目中自定义的，使用@Component及其衍生注解</li><li>项目中引入第三方的，使用@Bean注解</li></ul></blockquote><h2 id="14自动配置原理"><a class="markdownIt-Anchor" href="#14自动配置原理"></a> 14.自动配置原理</h2><h3 id="141-componentscan-组件扫描"><a class="markdownIt-Anchor" href="#141-componentscan-组件扫描"></a> 14.1 @ComponentScan 组件扫描</h3><p><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240818193043.png" alt="" /></p><h3 id="142-import导入"><a class="markdownIt-Anchor" href="#142-import导入"></a> 14.2 @Import导入</h3><p><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240818193058.png" alt="" /></p><h3 id="143-源码跟踪"><a class="markdownIt-Anchor" href="#143-源码跟踪"></a> 14.3 源码跟踪</h3><ul><li><p><strong>@SpringBootApplication</strong><br />该注解标识在SpringBoot工程引导类上，是SpringBoot中<strong>最重要</strong>的注解。该注解由三个部分组成：</p><ul><li><strong><code>@SpringBootConfiguration</code></strong>：该注解与<code>@Configuration</code>注解作用相同，用来声明当前也是一个配置类。</li><li><strong><code>@ComponentScan</code></strong>：组件扫描，默认扫描当前引导类所在包及其子包。</li><li><strong><code>@EnableAutoConfiguration</code></strong>：SpringBoot实现自动化配置的核心注解。<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240818194105.png" alt="" /><br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240818194131.png" alt="" /></li></ul></li><li><p><strong>@Conditional</strong></p><ul><li><strong>作用</strong>：按照一定的条件进行判断，在满足给定条件后才会注册对应的Bean对象到Spring IOC容器中。</li><li><strong>位置</strong>：方法、类</li><li><strong>@Conditional本身是一个父注解，派生出大量的子注解</strong>：<ul><li><strong><code>@ConditionalOnClass</code></strong>：判断环境中是否有对应字节码文件，才注册Bean到IOC容器</li><li><strong><code>@ConditionalOnMissingBean</code></strong>：判断环境中没有对应的Bean（类型或名称），才注册Bean到IOC容器</li><li><strong><code>@ConditionalOnProperty</code></strong>：判断配置文件中有对应属性和值，才注册Bean到IOC容器</li></ul></li></ul></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token keyword">public</span> <span class="token class-name">Gson</span> <span class="token function">gson</span><span class="token punctuation">(</span><span class="token class-name">GsonBuilder</span> gsonBuilder<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> gsonBuilder<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240818195303.png" alt="" /></p><h3 id="144-自定义starter"><a class="markdownIt-Anchor" href="#144-自定义starter"></a> 14.4 自定义starter</h3><p><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240818195426.png" alt="" /><br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240818195502.png" alt="" /></p><h2 id="15maven高级"><a class="markdownIt-Anchor" href="#15maven高级"></a> 15.Maven高级</h2><h3 id="151-分模块设计"><a class="markdownIt-Anchor" href="#151-分模块设计"></a> 15.1 分模块设计</h3><ol><li><strong>什么是分模块设计？</strong></li></ol><ul><li>将项目按照功能拆分成若干个子模块</li></ul><ol start="2"><li><strong>为什么要分模块设计？</strong></li></ol><ul><li>方便项目的管理维护、拓展、也方便模块间的相互调用，资源共享</li></ul><ol start="3"><li><strong>注意事项</strong></li></ol><ul><li>分模块设计需要先针对模块功能进行设计，再进行编码。不会先将工程开发完毕，然后进行拆分</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240818200210.png" alt="" /></p><h3 id="152-继承"><a class="markdownIt-Anchor" href="#152-继承"></a> 15.2 继承</h3><ul><li><strong>概念</strong>：继承描述的是两个工程间的关系，与java中的继承相似，子工程可以继承父工程中的配置信息，常见于依赖关系的继承</li><li><strong>作用</strong>：简化依赖配置、统一管理依赖</li><li><strong>实现</strong>：<b><code>&lt;parent&gt;……&lt;/parent&gt;</code></b></li><li><strong>具体步骤</strong>：<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240818200958.png" alt="" /><br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240818201045.png" alt="" /><br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240818201101.png" alt="" /></li><li><strong>总结</strong>：<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240818201356.png" alt="" /></li></ul><blockquote><p><strong>打包方式</strong>：</p><ul><li><strong>jar</strong>：普通模块打包，springboot项目基本都是jar包（内嵌tomcat运行）</li><li><strong>war</strong>：普通web程序打包，需要部署在外部的tomcat服务器中运行</li><li><strong>pom</strong>：父工程或聚合工程，该模块不写代码，仅进行依赖管理</li></ul></blockquote><h3 id="153-版本锁定"><a class="markdownIt-Anchor" href="#153-版本锁定"></a> 15.3 版本锁定</h3><ul><li>在maven中，可以在父工程的pom文件中通过<b><code>&lt;dependencyManagement&gt;</code></b>来统一管理依赖版本。</li><li><b><code>&lt;dependencyManagement&gt;</code></b> 是用来管理依赖版本的，它用于声明依赖的版本，但这些依赖不会自动导入到项目中，还需要再<b>&lt;dependencies&gt;</b>中引入。<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240818202248.png" alt="" /></li></ul><blockquote><p><strong>注意事项</strong>：</p><ul><li>子工程引入依赖时，无需指定 <b>&lt;version&gt;</b>版本号，父工程统一管理。变更依赖版本，只需在父工程中统一变更。</li></ul><p><b>&lt;dependencyManagement&gt;与&lt;dependencies&gt;的区别</b>：</p><ul><li><b>&lt;dependencies&gt;</b>是直接依赖，在父工程配置了依赖，子工程会直接继承下来。</li><li><b>&lt;dependencyManagement&gt;</b>是统一管理依赖版本，不会直接依赖，还需要在子工程中引入所需依赖(无需指定版本)</li></ul></blockquote><ul><li>也可以通过<b><code>&lt;properties&gt;</code></b>自定义/引用属性。<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240818202711.png" alt="" /></li></ul><h3 id="154-聚合"><a class="markdownIt-Anchor" href="#154-聚合"></a> 15.4 聚合</h3><ul><li><strong>概念</strong>：将多个模块组织成一个整体，同时进行项目的构建。</li><li><strong>聚合工程</strong>：一个不具有业务功能的&quot;空&quot;工程（有且仅有一个pom文件）</li><li><strong>作用</strong>：快速构建项目（无需根据依赖关系手动构建，直接在聚合工程上构建即可）<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240818204310.png" alt="" /></li><li><strong>实例</strong>：聚合使得在父项目中执行 <code>mvn install</code> 等命令时，所有子模块都会被一起构建。</li></ul><blockquote><p><strong>继承与聚合</strong>：</p><ul><li><strong>作用</strong><ul><li>聚合用于快速构建项目</li><li>继承用于简化依赖配置、统一管理依赖</li></ul></li><li><strong>相同点</strong>：<ul><li>聚合与继承的pom.xml文件打包方式均为pom，可以将两种关系制作到同一个pom文件中</li><li>聚合与继承均属于设计型模块，并无实际的模块内容</li></ul></li><li><strong>不同点</strong>：<ul><li>聚合是在聚合工程中配置关系，聚合可以感知到参与聚合的模块有哪些</li><li>继承是在子模块中配置关系，父模块无法感知哪些子模块继承了自己</li></ul></li></ul></blockquote><h3 id="155-私服"><a class="markdownIt-Anchor" href="#155-私服"></a> 15.5 私服</h3><ul><li><strong>概念</strong>: 私服是一种特殊的远程仓库，它是架设在局域网内的仓库服务，用来代理位于外部的中央仓库，用于解决团队内部的资源共享与资源同步问题<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240818210544.png" alt="" /></li><li><strong>资源上传与下载</strong><br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240818210623.png" alt="" /><br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240818210637.png" alt="" /><br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240818210646.png" alt="" /><br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240818210705.png" alt="" /><br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240818210714.png" alt="" /></li></ul><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
        <tags>
            
            <tag> 学习总结 </tag>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程【快速入门】</title>
      <link href="/2024/05/09/duo-xian-cheng/"/>
      <url>/2024/05/09/duo-xian-cheng/</url>
      
        <content type="html"><![CDATA[<div class="markmap-container" style="height:450px">  <svg data="{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[0,1]},&quot;v&quot;:&quot;Java 多线程【快速入门】&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[1,2]},&quot;v&quot;:&quot;基本概念&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[2,3]},&quot;v&quot;:&quot;程序、进程、线程&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[3,4]},&quot;v&quot;:&quot;并行与并发&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[4,5]},&quot;v&quot;:&quot;用户线程与守护线程&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[5,6]},&quot;v&quot;:&quot;多线程优点&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[6,7]},&quot;v&quot;:&quot;应用场景&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[7,8]},&quot;v&quot;:&quot;线程的生命周期&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[8,9]},&quot;v&quot;:&quot;新键（New）&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[9,10]},&quot;v&quot;:&quot;可运行（Runnable）&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[10,11]},&quot;v&quot;:&quot;阻塞（Blocked）&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[11,12]},&quot;v&quot;:&quot;等待（Waiting）&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[12,13]},&quot;v&quot;:&quot;超时等待（Timed_Waiting）&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[13,14]},&quot;v&quot;:&quot;死亡（Terminated）&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[14,15]},&quot;v&quot;:&quot;Thread类&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[15,16]},&quot;v&quot;:&quot;基本概念&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[16,17]},&quot;v&quot;:&quot;构造方法&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[17,18]},&quot;v&quot;:&quot;常用方法&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[18,19]},&quot;v&quot;:&quot;优先级&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[19,20]},&quot;v&quot;:&quot;线程的调度&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[20,21]},&quot;v&quot;:&quot;多线程的创建与启动&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[21,22]},&quot;v&quot;:&quot;多线程实现的原理&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[22,23]},&quot;v&quot;:&quot;多线程的创建&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[23,24],&quot;f&quot;:true},&quot;v&quot;:&quot;继承Thread类&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[24,25],&quot;f&quot;:true},&quot;v&quot;:&quot;实现Runnable接口&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[25,26],&quot;f&quot;:true},&quot;v&quot;:&quot;实现Callable接口&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[26,27],&quot;f&quot;:true},&quot;v&quot;:&quot;线程池&quot;}]}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[27,28]},&quot;v&quot;:&quot;线程的安全问题&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[28,29]},&quot;v&quot;:&quot;前置知识&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[29,30]},&quot;v&quot;:&quot;基本概念&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[30,31]},&quot;v&quot;:&quot;造成原因&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[31,32],&quot;f&quot;:true},&quot;v&quot;:&quot;原子性&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[32,33],&quot;f&quot;:true},&quot;v&quot;:&quot;可见性&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[33,34],&quot;f&quot;:true},&quot;v&quot;:&quot;有序性&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[34,35],&quot;f&quot;:true},&quot;v&quot;:&quot;活跃性问题&quot;}]}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[35,36]},&quot;v&quot;:&quot;线程的同步&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[36,37]},&quot;v&quot;:&quot;volatile&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[37,38]},&quot;v&quot;:&quot;synchronized锁&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[38,39]},&quot;v&quot;:&quot;Lock锁&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[39,40]},&quot;v&quot;:&quot;原子类&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[40,41]},&quot;v&quot;:&quot;线程的通信&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[41,42]},&quot;v&quot;:&quot;volatile可见性&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[42,43]},&quot;v&quot;:&quot;等待/通知机制&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[43,44]},&quot;v&quot;:&quot;join方法&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[44,45]},&quot;v&quot;:&quot;ThreadLocal类&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[45,46]},&quot;v&quot;:&quot;管道通信&quot;}]}]}"></svg></div><h1 id="java-多线程"><a class="markdownIt-Anchor" href="#java-多线程"></a> Java 多线程</h1><h2 id="1-基本概念"><a class="markdownIt-Anchor" href="#1-基本概念"></a> 1. 基本概念</h2><h3 id="11程序-进程-线程"><a class="markdownIt-Anchor" href="#11程序-进程-线程"></a> 1.1.程序、进程、线程</h3><ul><li>程序(program)<ul><li>程序是为完成特定任务，使用某种语言编写的一组指令的集合。即指<mark>一段静态的代码</mark>（还没有运行起来），静态对象。</li></ul></li><li>进程(process)<ul><li>进程是程序的一次执行过程，也就是说程序运行起来了，加载到内存中，并占用了CPU的资源。这是一个动态的过程：有自身的产生、存在和消亡的过程，这也就是一个进程的生命周期。</li><li><mark>进程是系统资源分配的单位</mark>，系统在运行时会为每一个进程分配不同的内存区域。</li></ul></li><li>线程(thread)<ul><li>线程可进一步细化线程，是一个程序内部的执行路径。</li><li>若一个进程同一时间并行执行了多个线程，那么这个进程就是支持多线程的。</li><li><mark>线程是CPU调度和执行的单位，每一个线程都拥有独立的运行栈和程序计数器(pc)</mark>，线程切换的开销小。</li><li>一个进程中，所有的线程<mark>共享相同的内存单元/内存地址空间</mark>，它们从同一堆中分配对象，可以访问相同的变量和对象。这就使得线程之间的通信更加便捷、高效。但多个线程操作共享的系统资源也带来了一些潜在的<mark>安全隐患</mark>，例如：数据竞争和死锁等问题。</li><li>配合JVM内存结构了解<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240509225613.png" alt="" /><br />class文件会通过类加载器加载到内存空间。<br />其中内存区域中的每一个线程都会有一个独立的虚拟机栈和程序计数器。<br />每一个进程都会有一个方法区和堆，多个线程共享同一个进程下的方法区和堆。</li></ul></li></ul><blockquote><p><strong>多线程与多进程的比较：</strong></p><ul><li>创建线程的开销通常小于创建进程的开销，因为线程共享了进程的资源。</li><li>线程之间的通信相对容易，因为它们共享同一进程的地址空间。</li><li>多进程的稳定性高于多线程，因为一个进程的崩溃通常不会影响其他进程，但线程的崩溃可能导致整个程序的崩溃。</li></ul></blockquote><h3 id="12并行与并发"><a class="markdownIt-Anchor" href="#12并行与并发"></a> 1.2.并行与并发</h3><ul><li>并行：多个CPU同时执行多个任务。eg：多个人做不同的事。</li><li>并发：一个CPU（采用时间片）同时执行多个任务。eg：一个人做多个事。</li></ul><h3 id="13cpu单核和多核的理解"><a class="markdownIt-Anchor" href="#13cpu单核和多核的理解"></a> 1.3.CPU单核和多核的理解</h3><ul><li>单核CPU在同一时间只能执行一个线程的任务，同时间段内有多个线程需要CPU去运行时，CPU也只能交替地执行这些线程中的一个线程，并不能真正实现并行执行，但由于CPU的执行速度非常快，多个线程之间的切换可能会发生得非常快，给人的感觉就像是同时运行一样，造成单核的CPU可以实现多线程的假象。</li><li>多核CPU则可以同时执行多个线程的任务，每个核心都能独立地执行线程，从而更好地发挥多线程的效率。在多核CPU上，可以实现真正的并行执行，每个核心都可以独立地执行一个线程的任务，提高了系统的整体性能。</li></ul><p>对于Java应用程序java.exe来讲，至少会存在三个线程：main（）主线程、gcc（）垃圾回收线程、异常处理线程【如果发生异常时会影响主线程】。</p><h3 id="14用户线程与守护线程"><a class="markdownIt-Anchor" href="#14用户线程与守护线程"></a> 1.4.用户线程与守护线程</h3><ul><li>用户线程：用户自定义创建的进程，它们由用户代码启动并执行。JVM会在终止之前等待任何用户进程完成其任务。【<mark>主线程停止，用户线程并不会直接停止，会继续执行，直到完成其任务或显式被中止</mark>】</li><li>守护线程：守护线程是用来服务用户线程的，通过在start()方法前调用thread.setDaemon(true)可以把一个用户线程变成一个守护线程。守护线程通常用于执行一些不需要在程序结束前完全执行的后台任务。【<mark>当所有的用户线程都执行完毕并且主线程退出时，JVM 会自动停止所有的守护线程，即使它们还没有执行完任务</mark>】 eg：Java的gc()垃圾回收线程就是一个守护线程。</li></ul><h3 id="15多线程的优点"><a class="markdownIt-Anchor" href="#15多线程的优点"></a> 1.5.多线程的优点</h3><ul><li>提高应用程序的响应。对图像化界面更有意义，可以增强用户体验。</li><li>提高计算机CPU的利用率。</li><li>改善程序结构。将既长又复杂的进程分为多个线程，独立运行，利于理解和修改。</li></ul><h3 id="16应用场景"><a class="markdownIt-Anchor" href="#16应用场景"></a> 1.6.应用场景</h3><ul><li>程序需要同时执行两个或多个任务</li><li>IO密集型程序：1.解决超时 2.防止阻塞</li><li>需要一些后台运行的程序时</li><li>迅雷多线程下载、数据库连接池、分批发送短信等</li></ul><h2 id="2-线程的生命周期"><a class="markdownIt-Anchor" href="#2-线程的生命周期"></a> 2. 线程的生命周期</h2><h3 id="21线程的状态图"><a class="markdownIt-Anchor" href="#21线程的状态图"></a> 2.1.线程的状态图</h3><p><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240511201316.png" alt="" /></p><h3 id="22线程状态详细说明"><a class="markdownIt-Anchor" href="#22线程状态详细说明"></a> 2.2.线程状态详细说明</h3><h4 id="新建new"><a class="markdownIt-Anchor" href="#新建new"></a> 新建（New）</h4><ul><li>使用new创建一个线程（Thread）之后，但还没有调用start()方法时。</li><li>该状态下线程对象已经被创建，但还未开始执行。</li></ul><h4 id="可运行runnable"><a class="markdownIt-Anchor" href="#可运行runnable"></a> 可运行（Runnable）</h4><ul><li>当线程调用start()方法之后，线程就处于可运行状态，会创建方法调用栈和程序计数器，这个状态还可继续拆分成2个状态：<ul><li>就绪（Ready）：处于线程就绪队列、等待分配CPU时间片</li><li>运行（Running）：线程获得CPU时间片，开始执行run()方法，可能变为阻塞状态、就绪状态、死亡状态</li></ul></li></ul><h4 id="阻塞blocked"><a class="markdownIt-Anchor" href="#阻塞blocked"></a> 阻塞（Blocked）</h4><ul><li>纯粹的阻塞状态通常是指线程被动地暂时停止执行，直到某些条件满足为止，而不涉及等待一段时间或等待其他线程的唤醒。存在以下两种情况：<ul><li>等待获得锁</li><li>调用一个阻塞式IO</li></ul></li><li>阻塞状态线程无法直接转为运行状态，需要先转为就绪状态</li></ul><h4 id="等待waiting"><a class="markdownIt-Anchor" href="#等待waiting"></a> 等待（Waiting）</h4><ul><li>线程进入等待状态通常是因为需要等待其他线程满足某些条件或执行某些操作，等待的时间是不确定的。</li><li>进入等待状态的方法：<ul><li><code>Object.wait()方法</code>：<ul><li>只能在synchronized代码块或synchronized方法中调用。</li><li>调用前必须获得对象的锁，否则会抛出IllegalMonitorStateException异常。</li><li>wait()方法调用时会释放持有的对象锁。</li><li>调用wait()方法，需要等待<code>notify()</code>或<code>notifyAll()</code>方法唤醒。</li></ul></li><li><code>Thread.join()方法</code>:<ul><li>可以在任何时候调用，通常用于等待指定的线程【即调用join()方法的线程】执行完毕。</li><li>调用前不需要获得任何锁，但会等待目标线程执行完毕后返回。</li><li>若调用前持有对象锁，并不会释放持有的对象锁。</li></ul></li><li><code>LockSupport.park()/LockSupport.park(Thread thread)方法</code>：<ul><li>可以在任何时候调用，通常和LockSupport类一起使用。</li><li>无参时当前线程进入等待状态，有参时指定线程进入等待状态。</li><li>调用前不需要获得任何锁。</li><li>若调用前持有对象锁，并不会释放持有的对象锁。</li><li>调用LockSupport.park()方法，需要等待<code>LockSupport.unpark(Thread thread)</code>方法唤醒。</li></ul></li></ul></li></ul><h4 id="超时等待time_waiting"><a class="markdownIt-Anchor" href="#超时等待time_waiting"></a> 超时等待（TIME_WAITING）</h4><ul><li>线程进入超时等待状态是因为需要等待一段时间后再继续执行，等待的时间是确定的。</li><li>进入超时等待状态的方法：<ul><li><code>Thread.sleep(long millis)</code>:<ul><li>让当前线程睡眠指定的毫秒数。</li><li>调用该方法后，当前线程会暂停执行指定的毫秒数，然后继续执行。</li><li>这个方法不会释放持有的锁。</li></ul></li><li><code>Object.wait(long timeout)</code>:<ul><li>使当前线程等待指定的毫秒数，或者直到其他线程调用了相同对象的<code>notify()</code>或<code>notifyAll()</code>方法。</li><li>当前线程会进入超时等待状态，直到等待时间超时，或者其他线程调用了相同对象的<code>notify()</code>或<code>notifyAll()</code>方法。</li><li>调用wait()方法会释放持有的对象锁，直到被唤醒后重新获取锁才会继续执行。</li></ul></li><li><code>Thread.join(long millis)</code>:<ul><li>等待调用join()方法的线程执行完毕，或者直到指定的毫秒数之后。【若参数为0，则表示永远等待】</li><li>如果调用join()方法的线程在指定的时间内执行完毕，则当前线程会恢复执行。</li><li>这个方法不会释放持有的锁。</li></ul></li><li><code>LockSupport.parkNanos(long nanos)</code>:<ul><li>使当前线程进入超时等待状态，直到指定的<mark>纳秒数</mark>后或者被中断。</li><li>这个方法不会释放持有的锁。</li></ul></li><li><code>LockSupport.parkUntil(long deadline)</code>:<ul><li>参数 deadline 是一个表示时间戳的长整型数值，单位是毫秒。</li><li>使当前线程进入超时等待状态，直到指定的时间点后或者被中断。</li><li>这个方法不会释放持有的锁。</li></ul></li></ul></li></ul><h4 id="死亡dead"><a class="markdownIt-Anchor" href="#死亡dead"></a> 死亡（Dead）</h4><ul><li>当一个线程已经执行完run()/call()方法中的所有操作时，该线程就处于死亡状态。</li><li>线程抛出一个未捕获的Exception或Error，线程就会死亡。</li><li>一旦线程处于死亡状态，线程对象就会被垃圾回收器移除。</li></ul><h3 id="23状态之间的转换及调用方法"><a class="markdownIt-Anchor" href="#23状态之间的转换及调用方法"></a> 2.3.状态之间的转换及调用方法：</h3><ul><li><strong>New -&gt; Runnable：</strong> 调用start()方法启动线程。</li><li><strong>Runnable -&gt; Running：</strong> 线程被操作系统调度并获取CPU时间片。</li><li><strong>Running -&gt; Blocked：</strong> 线程等待获取锁或执行阻塞式IO操作。</li><li><strong>Running -&gt; Waiting：</strong> 调用wait()、join()、park()等方法，线程进入等待状态。</li><li><strong>Running -&gt; Timed_Waiting：</strong> 调用Thread.sleep(long)、wait(timeout)等方法，线程进入超时等待状态。</li><li><strong>Blocked -&gt; Runnable：</strong> 获取到锁或IO操作完成，线程重新进入可运行状态。</li><li><strong>Waiting -&gt; Runnable：</strong> 其他线程调用notify()、notifyAll()、interrupt()方法，或者等待时间到达，线程重新进入可运行状态。</li><li><strong>Timed_Waiting -&gt; Runnable：</strong> 等待时间到达，线程重新进入可运行状态。</li><li><strong>Running/Blocked/Waiting/Timed Waiting -&gt; Dead：</strong> 线程执行完run()方法中的所有代码，或者抛出未捕获的异常，线程进入死亡状态。</li></ul><h3 id="24几个方法的比较"><a class="markdownIt-Anchor" href="#24几个方法的比较"></a> 2.4.几个方法的比较</h3><ul><li><strong>Thread.sleep(long millis)</strong>：一定是当前线程调用此方法，当前线程进入TIMED_WAITING状态，但不释放对象锁，millis后线程自动苏醒进入就绪状态。作用：<mark>给其它线程执行机会的最佳方式</mark>。</li><li><strong>Thread.yield()</strong>：一定是当前线程调用此方法，当前线程放弃获取的CPU时间片，但不释放锁资源，由运行状态变为就绪状态，让CPU再次选择线程。作用：让相同优先级的线程轮流执行，但并不保证一定会轮流执行。<mark>实际中无法保证yield()达到让步目的</mark>，因为让步的线程还有可能被线程调度程序再次选中。Thread.yield()不会导致阻塞。该方法与sleep()类似，只是不能由用户指定暂停多长时间。</li><li><strong>thread.join()/thread.join(long millis)</strong>：当前线程里调用其它线程T的join方法，当前线程进入WAITING/TIMED_WAITING状态，<mark>当前线程不会释放已经持有的对象锁</mark>。线程T执行完毕或者millis时间到，当前线程一般情况下进入RUNNABLE状态，也有可能进入BLOCKED状态（因为join是基于wait实现的）。</li><li><strong>obj.wait()</strong>：当前线程调用对象的wait()方法，<mark>当前线程释放对象锁</mark>，进入等待队列。依靠notify()/notifyAll()唤醒或者wait(long timeout) timeout时间到自动唤醒。</li><li><strong>obj.notify()</strong>：唤醒在此对象监视器上等待的单个线程，选择是任意性的。notifyAll()唤醒在此对象监视器上等待的所有线程。</li><li><strong>LockSupport.park()/LockSupport.parkNanos(long nanos),LockSupport.parkUntil(long deadlines)</strong>：当前线程进入WAITING/TIMED_WAITING状态。<mark>对比wait方法,不需要获得锁</mark>就可以让线程进入WAITING/TIMED_WAITING状态，需要通过LockSupport.unpark(Thread thread)唤醒。</li></ul><p><strong>进入等待状态的几个方法比较</strong>：</p><div class="markmap-container" style="height:450px">  <svg data="{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[0,1]},&quot;v&quot;:&quot;方法比较&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[1,2]},&quot;v&quot;:&quot;Thread.sleep(long millis)&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[2,3]},&quot;v&quot;:&quot;释放资源问题：不会释放资源&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[3,4]},&quot;v&quot;:&quot;底层调用：是一个native方法&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[4,5]},&quot;v&quot;:&quot;是否需要声明异常：方法声明要捕获异常&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[5,6]},&quot;v&quot;:&quot;线程状态：TIMED_WAITING&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[6,7]},&quot;v&quot;:&quot;作用范围：任意地方&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[7,8]},&quot;v&quot;:&quot;Object.wait(long millis)&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[8,9]},&quot;v&quot;:&quot;释放资源问题：会释放资源，被唤醒后需要重新竞争资源&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[9,10]},&quot;v&quot;:&quot;底层调用：超时的wait(long millis)是一个native方法 wait调用的是wait(0)&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[10,11]},&quot;v&quot;:&quot;是否需要声明异常：方法声明有中断异常&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[11,12]},&quot;v&quot;:&quot;线程状态：无参时是Waiting，有参时是TIMED_WAITING&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[12,13]},&quot;v&quot;:&quot;作用范围：是synchronized的 通知机制中的方法&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[13,14]},&quot;v&quot;:&quot;唤醒操作：notify()、notifyAll()，不能在wait()前面执行&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[14,15]},&quot;v&quot;:&quot;LockSupport.park()&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[15,16]},&quot;v&quot;:&quot;释放资源问题：不会释放资源&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[16,17]},&quot;v&quot;:&quot;底层调用：底层调用的Unsafe下的native的park()方法进入等待状态，park(Thread thread)指定线程进入等待状态&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[17,18]},&quot;v&quot;:&quot;是否需要声明异常：不需要&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[18,20]},&quot;v&quot;:&quot;线程状态：在synchronized中，获取到锁的线程调用该方法进入waiting状态，其他线程都是Bolcked状态&lt;br&gt;\n如果是ReentratLock锁，因为是重入锁，所有线程都是waiting状态&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[20,21]},&quot;v&quot;:&quot;作用范围：任意范围&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[21,22]},&quot;v&quot;:&quot;唤醒操作：LockSupport.unpark(Thread thread)可以在LockSupport.park( )之前调用&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[22,23]},&quot;v&quot;:&quot;Condition.await()&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[23,24]},&quot;v&quot;:&quot;释放资源问题：会释放资源&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[24,25]},&quot;v&quot;:&quot;底层调用：底层使用的是LockSupport.park( )&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[25,26]},&quot;v&quot;:&quot;是否需要声明异常：需要&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[26,27]},&quot;v&quot;:&quot;线程状态：waiting&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[27,28]},&quot;v&quot;:&quot;作用范围：需要在Lock块中执行，用来lock对象的&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[28,29]},&quot;v&quot;:&quot;唤醒操作：signal()、signalAll()，不能在await()前面执行&quot;}]}]}"></svg></div><h2 id="3thread类"><a class="markdownIt-Anchor" href="#3thread类"></a> 3.Thread类</h2><h3 id="31基本概念"><a class="markdownIt-Anchor" href="#31基本概念"></a> 3.1.基本概念</h3><ul><li>Thread类是Java中用于表示线程的类。通过Thread类，可以创建新的线程、启动线程的执行、控制线程的状态和执行等。除了线程对象本身的操作，Thread类还提供了对线程组（ThreadGroup）的支持，以便更好地管理和组织线程。</li></ul><p><strong>什么是线程组（ThreadGroup）：</strong></p><ul><li>线程组是线程的集合，它用于对线程进行逻辑上的分组。线程组可以包含其他线程组，形成一棵树状结构。每个线程组可以有一个父线程组，除了顶级线程组外，其他线程组必须有一个明确定义的父线程组。</li></ul><p><strong>线程组的作用：</strong></p><ul><li><strong>组织管理</strong>：通过线程可以更好地组织和管理多个线程,便于对线程进行批量操作和控制</li><li><strong>权限控制</strong>：线程组可以应用安全策略和权限控制，限制线程组中线程的行为</li><li><strong>资源分配</strong>：线程组可以分配资源，例如线程组中的线程可以共享资源，例如文件、数据库连接等</li><li><strong>异常处理</strong>：线程组可以统一处理线程中抛出的未捕获异常，提高异常处理的效率和统一性</li></ul><p><strong>线程组的父子关系：</strong></p><ul><li><strong>父子关系</strong>：每个线程组可以有一个父线程组，除了顶级线程组外，其他线程组必须有一个明确定义的父线程组。这种关系通过ThreadGroup类来实现，构成了线程组的树形结构</li><li><strong>组织结构</strong>：线程组可以包含其他线程组，形成多层次的组织结构，便于对线程进行层次化管理</li></ul><p><strong>父线程组的作用：</strong></p><ul><li><strong>创建与销毁子线程组</strong>：父线程组可以创建和销毁子线程组，从而实现对线程组的管理</li><li><strong>管理权限</strong>：父线程组可以授予或限制子线程组的权限，例如访问特定的资源或执行特定的操纵</li><li><strong>监控和控制</strong>：父线程组可以监控和控制子线程组的状态和行为，例如暂停、恢复或终止子线程组的所有线程</li></ul><p><strong>子线程组的作用：</strong></p><ul><li><strong>资源隔离</strong>：子线程组可以限制父线程组的访问权限，确保父线程组无法访问子线程组的资源</li><li><strong>继承行为</strong>：子线程组可以继承父线程组的一些属性：例如优先级、守护状态等，这些使得子线程组可以继承父线程组的行为，并根据需要进行调整</li></ul><h3 id="32thread的构造方法"><a class="markdownIt-Anchor" href="#32thread的构造方法"></a> 3.2.Thread的构造方法</h3><ul><li><code>Thread()</code>：创建一个默认设置的线程对象实例，默认线程名为Thread-0，默认优先级为5，默认状态为NEW。</li><li><code>Thread(String name)</code>：创建一个线程对象，该线程对象的线程名为name，默认优先级为5，默认状态为NEW。</li><li><code>Thread(Runnable target)</code>：创建一个线程对象，该线程对象通过指定的Runnable对象来执行。</li><li><code>Thread(Runnable target, String name)</code>：创建一个线程对象，该线程对象通过指定的Runnable对象来执行，并且指定线程名为name。</li><li><code>Thread(ThreadGroup group，String name)</code>：创建一个指定的线程组group，并且指定线程名为name。</li><li><code>Thread(ThreadGroup group, Runnable target)</code>：创建一个指定的线程组group，该线程对象通过指定的Runnable对象来执行。</li><li><code>Thread(ThreadGroup group, Runnable target, String name)</code>：创建一个指定的线程组group，该线程对象通过指定的Runnable对象来执行，并且指定线程名为name。</li><li><code>Thread(ThreadGroup group, Runnable target, String name, long stackSize)</code>：创建一个指定的线程组group，该线程对象通过指定的Runnable对象来执行，并且指定线程名为name，并且指定线程的堆栈大小为stackSize。【如果不想指定堆栈大小，可以传递0，由虚拟机自行决定】</li></ul><blockquote><p><strong>说明</strong>：关于线程组（ThreadGroup），一个线程组代表一组线程。此外，一个线程组还可以包括其他线程组。线程组形成一棵树，其中除了初始线程组之外的每一个线程组都有一个父级。允许线程直接访问有关其自己的线程组的信息，但不能直接访问有关其线程组的父级线程组或其他线程组的信息。</p></blockquote><h3 id="33thread的常用方法"><a class="markdownIt-Anchor" href="#33thread的常用方法"></a> 3.3.Thread的常用方法</h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>String getName()</code></td><td>返回线程的名称。</td></tr><tr><td><code>void setName(String name)</code></td><td>设置线程的名称。</td></tr><tr><td><code>static Thread currentThread()</code></td><td>返回当前正在执行的线程对象。</td></tr><tr><td><code>public final void start()</code></td><td>启动线程，使其进入就绪状态并开始执行run()方法。如果线程已经启动，再次调用start()方法会抛出IllegalThreadStateException异常。</td></tr><tr><td><code>public final void run()</code></td><td>线程的执行体，包含了线程需要执行的任务逻【直接调用run()方法，并不创建一个新线程，只是在当前线程中执行 run() 方法的内容】辑。</td></tr><tr><td><code>static void sleep(long millis)</code></td><td>使当前线程暂停执行指定的毫秒数。调用sleep()方法会使当前线程进入超时等待状态，不会释放持有的锁。如果在sleep期间被其他线程中断，则会抛出InterruptedException异常，并且清除当前线程的中断状态。</td></tr><tr><td><code>public void interrupt()</code></td><td>中断线程。调用该方法会将线程的中断状态设置为true，如果当前线程正在sleep、wait、join等方法中阻塞，则会立即抛出InterruptedException异常并清除中断状态。</td></tr><tr><td><code>void setPriority(int newPriority)</code></td><td>设置线程的优先级。优先级范围是1~10，其中1为最低优先级，10为最高优先级，默认优先级为5。Java线程优先级的设置只是一个建议，实际的调度由底层操作系统决定，不同操作系统对线程优先级的支持程度不同。</td></tr><tr><td><code>final int getPriority()</code></td><td>返回线程的优先级。</td></tr><tr><td><code>final void setDaemon(boolean on)</code></td><td>设置线程是否为守护线程。如果将线程设为守护线程，当所有的非守护线程结束时，守护线程会被自动终止。默认情况下，用户线程是非守护线程，而守护线程是为了辅助用户线程的运行而存在的。</td></tr><tr><td><code>public final boolean isAlive()</code></td><td>判断线程是否处于活动状态。如果线程已经启动且尚未终止，则返回true；否则返回false。</td></tr><tr><td><code>public static void yield()</code></td><td>提示线程调度器当前线程愿意放弃当前CPU资源。调用yield()方法会让出当前线程的CPU时间片，使得其他具有相同或更高优先级的线程有机会执行，但是并不能保证一定会立即让出CPU，实际中使用yield()方法的效果可能受到操作系统和JVM的调度策略影响。</td></tr><tr><td><code>public static void join()</code></td><td>等待调用join()方法的线程执行完毕。调用join()方法会使当前线程进入等待状态，直到调用join()方法的线程执行完毕，当前线程才会继续执行。如果调用join()方法的线程被中断，则会抛出InterruptedException异常，并清除当前线程的中断状态。</td></tr></tbody></table><blockquote><p><strong>普及</strong><br />Java中线程采用内核线程模型来实现用户程序中的线程，因此一些常用方法依托于虚拟机原生实现，统称Native方法。<br />Native方法是指在Java中声明但实现是由其他语言（如C、C++）编写的方法。这些方法的实现由本地代码提供，通常是为了与底层系统交互或使用底层系统资源。在Java中，可以使用<code>native</code>关键字声明一个方法为本地方法，然后在另外的本地语言中实现它。Native方法通常用于与操作系统、硬件或其他非Java程序进行交互，或者执行一些Java无法直接完成的底层操作。</p></blockquote><h4 id="yield"><a class="markdownIt-Anchor" href="#yield"></a> yield()</h4><ul><li>yiedld方法是一个Native方法，由C++底层进行关于操作系统层面的逻辑处理。yield的字面意思是退让。调用该方法会向调度程序提示当前线程愿意放弃其当前对处理器的使用，但调度程序可以随意忽略此提示。【无法保证yield达到让步目的】</li><li>yield是一种启发式尝试，使用它可以改善线程之间的相对进展，否则会过度使用CPU。在使用yield方法时通常有以下两种使用场景：<ul><li>yield的使用应于详细的分析和基准测试相结合，以确保实际上具有预期的效果，但很少使用这种方法。对于调试或测试目的可能有用，它可能有助于重现由于竞争条件导致的问题错误。</li><li>在设计并发控制结构（例如 java.util.concurrent.locks包中的结构）时，它也可能会有所帮助。</li></ul></li></ul>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestYield</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">MyThread</span> thread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token string">"thread-1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">MyThread</span> thread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token string">"thread-2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      thread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      thread2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">public</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token keyword">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 实际中无法保证yield()达到让步目的</span>                  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="join"><a class="markdownIt-Anchor" href="#join"></a> join()</h4><ul><li>join方法让一个线程加入到另一个线程之前执行，在此线程执行期间，其他线程进入等待状态，当然也可以指定join方法的参数（指定执行等待的超时时间），最多等待几毫秒让该线程终止，若参数为0，意味着永远等待。</li><li>此实现使用以this.isAlive为条件的this.wait调用循环，当线程终止，将调用this.notifyAll方法。建议应用程序不要在Thread实例上使用wait、notify或notifyAll方法。如果任何线程中断了当前线程，则会抛出InterruptedException异常并清除当前线程的中断状态。</li></ul>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestJoin</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">MyThread</span> thread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token string">"thread-1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">MyThread</span> thread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token string">"thread-2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      thread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      thread1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 阻塞当前线程main，直到thread1执行完</span>      thread2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">public</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="sleep"><a class="markdownIt-Anchor" href="#sleep"></a> sleep()</h4><ul><li>当调用线程的sleep方法时，使当前执行的线程休眠（暂时停止执行）指定的毫秒数，取决于系统计时器和调度程序的精度和准确性。如果任何线程中断了当前线程，会抛出InterruptedException异常并清除当前线程的中断状态。</li></ul><h4 id="interrupt"><a class="markdownIt-Anchor" href="#interrupt"></a> interrupt()</h4><ul><li>使用interrupt()方法来中断线程，除非当前线程正在中断自己，否则会调用该线程的checkAccess方法，这个方法可能会抛出SecurityException异常。主要有以下几种场景：<ul><li>如果一个线程被Object类的wait、Thread类的join、sleep、yield方法调用时，如果当前线程被中断，那么就会抛出InterruptedException异常。</li><li>如果该线程在InterruptibleChannel的IO操作中被中断，则通道关闭，线程的中断状态将被设置，线程抛出java.nio.channels.ClosedByInterruptException异常。</li><li>如果该线程在java.nio.channels.Selector的select操作中被中断，则该线程的中断状态将被设置，并且它将立即从选择操作中返回，可能带有非零值，就像调用了选择器的唤醒方法一样。如果前面的条件都不成立，则将设置该线程的中断状态。</li></ul></li></ul>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Native</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestInterrupt</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"thread"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*输出结果：java.lang.InterruptedException: sleep interruptedat java.base/java.lang.Thread.sleep0(Native Method)at java.base/java.lang.Thread.sleep(Thread.java:509)at TestInterrupt.lambda$main$0(TestInterrupt.java:6)at java.base/java.lang.Thread.run(Thread.java:1583)*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="34优先级"><a class="markdownIt-Anchor" href="#34优先级"></a> 3.4.优先级</h3><ul><li>Java中创建的线程，每个线程都有一个优先级，具有较高优先级的线程优先于具有较低优先级的线程执行。<br /><mark>但是，线程优先级不能保证线程执行的顺序，而且非常依赖于平台。</mark></li><li>当在某个线程中运行的代码创建一个新的Thread对象时，新线程的优先级最初设置为等于创建线程的优先级。当然，也可以通过调用新线程的setPriority()方法来改变优先级。</li><li>Java线程的优先级是一个整数，其取值范围是 1 （Thread.MIN_PRIORITY ） - 10 （Thread.MAX_PRIORITY ）。</li><li>Thread类中定义了以下三个默认优先级：<ul><li><code>public final static int MIN_PRIORITY = 1;</code></li><li><code>public final static int NORM_PRIORITY = 5;</code>【创建线程的默认优先级】</li><li><code>public final static int MAX_PRIORITY = 10;</code></li></ul></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">MyThread2</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：MyThread2 run priority=5【没有设置优先级默认是5】</span>        <span class="token class-name">MyThread1</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: MyThread1 run priority=6</span>                    <span class="token comment">//       MyThread2 run priority=6【这里的MyThread2在MyThread1的线程里面创建，没有调用方法默认继承父线程的优先级】</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">MyThread1</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MyThread1 run priority="</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">MyThread2</span> thread2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">MyThread2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">MyThread2</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MyThread2 run priority="</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4线程的调度"><a class="markdownIt-Anchor" href="#4线程的调度"></a> 4.线程的调度</h2><h3 id="41cpu的调度策略"><a class="markdownIt-Anchor" href="#41cpu的调度策略"></a> 4.1.CPU的调度策略</h3><p>线程无论基于何种模型创建，都有其调度策略，线程的调度指的是操作系统为线程分配使用权的过程。通常调度方式包含两种：</p><ul><li><strong>协同式调度(Cooperative Threads Scheduling)：</strong><ul><li>使用协同式调度方式的线程调度由其本身来控制，线程在自身工作执行完成后，主动通知系统切换到另一个线程，这种方式实现简单，便于控制。但是过度依赖线程本身来控制调度，如果某个线程执行任务的程序存在问题就会一直阻塞，导致其他线程无法正常执行。</li></ul></li><li><strong>抢占式调度(Preemptive Threads Scheduling)：</strong><ul><li>使用抢占式调度方式的多线程系统，线程的调度由系统分配执行时间，线程的切换由系统决定。在这种调度方式下，线程的执行时间可控，不会因为单个线程问题导致应用程序阻塞。</li></ul></li></ul><blockquote><p><strong>什么是时间片：</strong><br />时间片（Time Slice）是指操作系统中用于调度进程或线程的一段固定长度的时间。在抢占式调度中，每个进程或线程被分配一个时间片，该时间片决定了它能够连续执行的最大时间。当一个进程或线程的时间片用完后，操作系统会中断其执行，并将CPU资源分配给下一个就绪状态的进程或线程。</p><p>时间片的长度通常是固定的，但在某些调度算法中也可以是可变的。时间片的大小会影响到系统的响应时间、吞吐量和公平性。较短的时间片能够提高系统的响应速度，但会增加上下文切换的开销；而较长的时间片能够减少上下文切换的频率，但可能导致某些进程或线程长时间占用CPU资源，影响其他任务的响应速度。</p></blockquote><h3 id="42java的调度算法"><a class="markdownIt-Anchor" href="#42java的调度算法"></a> 4.2.Java的调度算法</h3><ul><li>同优先级线程组成FIFO队列（先来先服务），使用时间片策略。</li><li>堆高优先级，使用优先级抢占式策略。</li><li>线程优先级等级 1 （Thread.MIN_PRIORITY ） - 10 （Thread.MAX_PRIORITY ），一共10档，默认优先级为5（NORM_PRIORITY）。</li><li>获取和设置当前线程的优先级<ul><li><code>getPriority()</code>：获取当前线程的优先级。</li><li><code>setPriority(int p)</code>：设置当前线程的优先级。</li></ul></li></ul><blockquote><p><strong>说明：</strong> 高优先级的线程要抢占低优先级的线程CPU的执行权。但这只是从概率上来讲，高优先级的线程的执行概率高，但是并不是绝对的。并不意味着只有高优先级的线程执行完成后，低优先级的线程才可以执行。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">MyThread2</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">MyThread1</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">/*输出：        MyThread2 run priority=7        MyThread2 run priority=7        MyThread1 run priority=6        MyThread1 run priority=6        MyThread1 run priority=6        MyThread2 run priority=7        高优先级的也有可能比低优先级的晚结束*/</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">MyThread1</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MyThread1 run priority="</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">MyThread2</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MyThread2 run priority="</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5多线程的实现原理和创建"><a class="markdownIt-Anchor" href="#5多线程的实现原理和创建"></a> 5.多线程的实现原理和创建</h2><h3 id="51多线程的实现原理"><a class="markdownIt-Anchor" href="#51多线程的实现原理"></a> 5.1.多线程的实现原理</h3><ul><li>Java语言的JVM允许运行多个线程，多线程可以通过Java中的<mark>java.lang.Thread</mark>类来实现。</li><li>Thread类的特性<ul><li>每一个线程都是通过某个特定的Tread对象的run()方法来完成操作的，经常把run()方法的主体称为线程体。</li><li>通过Thread方法的start()方法来启动一个线程，而非直接调用run()方法。【start()底层会调用start0()来创建一个新的线程，调用run()方法，而直接调用 run() 方法只是在当前线程中执行 run() 方法的内容，并不会创建新的线程】</li></ul></li></ul><h3 id="52多线程的创建"><a class="markdownIt-Anchor" href="#52多线程的创建"></a> 5.2.多线程的创建</h3><h4 id="521继承thread类拓展性较差"><a class="markdownIt-Anchor" href="#521继承thread类拓展性较差"></a> 5.2.1.继承Thread类[拓展性较差]</h4><ol><li>创建一个继承Thread类的子类</li><li>重写Thread类的run()方法，将此线程执行的操作声明在run()中</li><li>创建Thread类的子类对象</li><li>通过此对象调用start()方法来启动一个线程。</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 创建一个Thread类的子类对象</span>        <span class="token class-name">MyThread</span> thread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 通过调用此对象的start()启动一个线程</span>        thread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 注意：已启动过一次的线程无法再次启动【在Java中，一个线程对象只能被启用一次】</span>        <span class="token comment">// 再创建一个线程</span>        <span class="token class-name">MyThread</span> thread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 另一种调用方法，此方法并没有给对象命名【链式编程】</span>        <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"主线程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token comment">// 线程体，启动线程时会运行run()方法中的代码</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*输出主线程Thread-1: 0Thread-1: 1Thread-2: 0Thread-2: 1Thread-0: 0Thread-0: 1Thread-0: 2Thread-1: 2Thread-2: 2*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建Thread匿名子类的方式：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnonymousSubClass</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="522实现runnable接口拓展性强"><a class="markdownIt-Anchor" href="#522实现runnable接口拓展性强"></a> 5.2.2.实现Runnable接口[拓展性强]</h4><ol><li>创建一个实现了Runnable接口的类</li><li>实现类中重写Runnable接口的run()方法，将此线程执行的操作声明在run()中</li><li>创建实现类的对象</li><li>将此对象作为参数传递到Thread类的构造器中，创建Thread类的对象</li><li>通过Thread类的对象调用start()方法来启动线程</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">// 创建实现类的对象</span>   <span class="token class-name">RunnableThread</span> runnableThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RunnableThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 创建Thread类的对象，并将实现类的对象当作参数传入构造器</span>   <span class="token class-name">Thread</span> thread01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>runnableThread<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 给该线程命名</span>   thread01<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"Thread 01"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 使用Thread类的对象去调用Thread类中的start()方法：1.启动线程 2.Thread中的run()调用了Runnable中的run()</span>   thread01<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 再创建一个线程时，可以直接再new一个Thread类即可，不需要再new实现类</span>   <span class="token comment">/*【但这种方式会共享同一个 runnableThread 对象中的状态，包括非 static 修饰的成员变量。   因为 thread01 和 thread02 实际上都是使用同一个 runnableThread 对象作为参数传递给了 Thread 类的构造器】*/</span>   <span class="token class-name">Thread</span> thread02 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>runnableThread<span class="token punctuation">)</span><span class="token punctuation">;</span>   thread02<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"Thread 02"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   thread02<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">RunnableThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>    <span class="token comment">//RunnableThread 实现Runnable接口中的run()抽象方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>继承Thread、实现Runnable的区别</strong></p><ul><li>Java只允许单继承，但可以实现多个接口。因此<mark>实现接口的方式没有类的单继承性的局限</mark>，用实现Runnable接口的方式来完成多线程更加实用。</li><li>实现Runnable接口的方式天然具有共享数据的特性（不需要static修饰）。因为继承Thread的实现方式，需要创建多个子类的对象来进行多线程，如果子类中有变量A，而不使用static修饰变量的话，每一个子类的对象都会有自己独立的变量A，只有static修饰A后，子类的对象才可以共享变量A。而实现Runnable接口的方式，如果只创建一个实现类的对象，并将这个对象传入Thread类，创建多个Thread类的对象来完成多线程，那么这多个Thread类对象实际就是调用一个实现类的对象而已，会共享到这个实现类的对象中的所有变量【需要注意线程安全问题】。<mark>实现接口的方式更适合用来处理多个线程要共享数据/该类已有父类的情况。</mark></li><li>联系：Thread类中也实现了Runnable接口。</li><li>相同点：两者都需要重写run方法。线程的执行逻辑都在run()方法中。</li></ul></blockquote><h4 id="524实现callable接口可有返回值"><a class="markdownIt-Anchor" href="#524实现callable接口可有返回值"></a> 5.2.4.实现Callable接口[可有返回值]</h4><p>与Runnable相比，Callable接口中定义了一个额外的方法call()，该方法可以有返回值。</p><ol><li>创建实现Callable接口的实现类</li><li>重写call()方法，该方法将作为线程执行体，并且有返回值。【支持泛型的返回值、可以抛出异常】</li><li>创建实现类的对象【表示多线程要执行的任务】</li><li>创建FutureTask类对象，将Callable接口实现类的对象作为构造器参数传递。【管理多线程运行的结果】</li><li>创建Thread对象，将FutureTask对象作为Thread对象的构造器参数传递。【表示线程】</li><li>可以通过FutureTask对象调用get方法获取多线程运行结果。【获取多线程运行结果】</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//3.创建Callable接口实现类的对象</span>        <span class="token class-name">CallableTest</span> callableTest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CallableTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//4.将此Callable接口实现类的对象作为参数传递到FutureTask构造器中，创建FutureTask对象</span>        <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> futureTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>callableTest<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//5.将FutureTask的对象作为参数传递到Thread类的构造器中，创建Thread对象，并调用start()</span>        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>futureTask<span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//6.获取Callable中Call方法的返回值</span>            <span class="token class-name">Integer</span> result <span class="token operator">=</span> futureTask<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：45</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExecutionException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//1.创建一个实现Callable的实现类</span><span class="token keyword">class</span> <span class="token class-name">CallableTest</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token comment">//2.实现call方法，将此线程需要执行的操作声明在call()中</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            sum<span class="token operator">+=</span>i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="525线程池"><a class="markdownIt-Anchor" href="#525线程池"></a> 5.2.5.线程池</h4><div class="markmap-container" style="height:400px">  <svg data="{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[0,1]},&quot;v&quot;:&quot;线程池&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[1,2]},&quot;v&quot;:&quot;基本概念&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[2,3]},&quot;v&quot;:&quot;线程池是管理一堆就绪状态线程的池化技术&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[3,4]},&quot;v&quot;:&quot;避免线程的重复创建和销毁带来的性能损耗，对线程统一管理&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[4,5]},&quot;v&quot;:&quot;实现原理&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[5,6]},&quot;v&quot;:&quot;接受到一个任务时，判断线程池中现有存活的线程，是否有空闲&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[6,7]},&quot;v&quot;:&quot;如果已创建的核心线程都有任务，则将任务放到队列中&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[7,8]},&quot;v&quot;:&quot;如果队列满了，就判断当前线程池的线程数量是否达到最大值，没有的话创建新的线程并执行该任务&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[8,9]},&quot;v&quot;:&quot;如果达到了最大的线程数量，则按照设定的拒绝策略处理该任务&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[9,10]},&quot;v&quot;:&quot;创建方式&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[10,11]},&quot;v&quot;:&quot;&lt;strong&gt;Executors.newFixedThreadPool(int n)&lt;/strong&gt;：创建固定大小的线程池&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[11,12]},&quot;v&quot;:&quot;&lt;strong&gt;Executors.newCachedThreadPool()&lt;/strong&gt;:无穷大的线程池【容量默认为 Integer.MAX_VALUE】&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[12,13]},&quot;v&quot;:&quot;&lt;strong&gt;Executors.newSingleThreadExecutor()&lt;/strong&gt;：创建单线程的线程池&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[13,16]},&quot;v&quot;:&quot;&lt;strong&gt;ThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit,&lt;/strong&gt;&lt;br&gt;\n&lt;strong&gt;BlockingQueue&lt;Runnable&gt; workQueue，ThreadFactory threadFactory，&lt;/strong&gt;&lt;br&gt;\n&lt;strong&gt;RejectedExecutionHandler handler)&lt;/strong&gt;：创建自定义线程池【7个参数，最常用】&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[16,17]},&quot;v&quot;:&quot;&lt;strong&gt;ThreadPoolTaskExecutor (Spring Framework)&lt;/strong&gt;：是 Spring 框架提供的用于管理线程池的工具类&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[17,18]},&quot;v&quot;:&quot;自定义线程池的7个参数&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[18,19]},&quot;v&quot;:&quot;核心线程数：理论上不能被回收的线程数量 【默认为 Integer.MAX_VALUE，不能小于0】&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[19,20]},&quot;v&quot;:&quot;最大线程数：最大能创建的线程数量【大于等于核心线程数】&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[20,21]},&quot;v&quot;:&quot;存活时间数值：表示的是一个线程没有任务执行时最多保持多长时间会终止。【不能小于0】&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[21,22]},&quot;v&quot;:&quot;存活时间单位：参数keepAliveTime的时间单位。【用TimeUnit指定】&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[22,23]},&quot;v&quot;:&quot;阻塞队列：任务量超过核心线程数时，任务会依次进入队列【默认为 LinkedBlockingQueue】&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[23,24],&quot;f&quot;:true},&quot;v&quot;:&quot;&lt;strong&gt;ArrayBlockingQueue&lt;/strong&gt;：数组类有界队列，IFIO（先进先出）【不是一个严格的FIFO队列，多线程下不保证公平性】&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[24,25],&quot;f&quot;:true},&quot;v&quot;:&quot;&lt;strong&gt;LinkedBlockingQueue&lt;/strong&gt;：链表类有界队列【默认为interger.max队列】，FIFO（先进先出）&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[25,26],&quot;f&quot;:true},&quot;v&quot;:&quot;&lt;strong&gt;SynchronousQueue&lt;/strong&gt;：同步队列，不存储任务&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[26,27],&quot;f&quot;:true},&quot;v&quot;:&quot;&lt;strong&gt;PriorityBlockingQueue&lt;/strong&gt;：优先级队列，实现Comparable接口的指定元素排列方式&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[27,28],&quot;f&quot;:true},&quot;v&quot;:&quot;&lt;strong&gt;DelayQueue&lt;/strong&gt;：延迟队列，只有在延迟期满时才可以取出元素&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[28,29],&quot;f&quot;:true},&quot;v&quot;:&quot;&lt;strong&gt;LinkdTransferQueue&lt;/strong&gt;：链表类无界队列，相比有界链表队列，多了两个方法&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[29,30],&quot;f&quot;:true},&quot;v&quot;:&quot;&lt;strong&gt;LinkedBlockingDeque&lt;/strong&gt;：头部尾部都可以添加和移除元素，降低锁竞争&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[30,31]},&quot;v&quot;:&quot;线程工厂：创建线程，去执行提交的任务【默认为&lt;strong&gt;Executors.defaultThreadFactory()&lt;/strong&gt;】&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[31,32]},&quot;v&quot;:&quot;拒绝策略&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[32,33],&quot;f&quot;:true},&quot;v&quot;:&quot;&lt;strong&gt;ThreadPoolExecutor.AbortPolicy&lt;/strong&gt;: 丢弃任务并抛出 RejectedExecutionException 异常。【默认策略】&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[33,34],&quot;f&quot;:true},&quot;v&quot;:&quot;&lt;strong&gt;ThreadPoolExecutor.DiscardPolicy&lt;/strong&gt;: 丢弃任务，但是不抛出异常。【这是不推荐的做法】&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[34,35],&quot;f&quot;:true},&quot;v&quot;:&quot;&lt;strong&gt;ThreadPoolExecutor.DiscardOldestPolicy&lt;/strong&gt;: 抛弃队列中等待最久的任务[排在最前面]，然后把当前任务加入队列中。&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[35,36],&quot;f&quot;:true},&quot;v&quot;:&quot;&lt;strong&gt;ThreadPoolExecutor.CallerRunsPolicy&lt;/strong&gt;: 调用任务的 run() 方法绕过线程池直接运行该任务。&quot;}]}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[36,37]},&quot;v&quot;:&quot;提交任务&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[37,38]},&quot;v&quot;:&quot;&lt;strong&gt;execute()&lt;/strong&gt;：用于提交不需要返回值的任务&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[38,39]},&quot;v&quot;:&quot;&lt;strong&gt;submit()&lt;/strong&gt;：用于提交需要返回值的任务&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[39,40]},&quot;v&quot;:&quot;关闭线程&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[40,41]},&quot;v&quot;:&quot;&lt;strong&gt;shutdown()&lt;/strong&gt;：关闭线程池，线程池不再接受新任务，但会继续执行任务&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[41,42]},&quot;v&quot;:&quot;&lt;strong&gt;shutdownNow()&lt;/strong&gt;：关闭线程池，线程池不再接受新任务，并且尝试中断正在执行的任务&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[42,43]},&quot;v&quot;:&quot;&lt;strong&gt;isShutdown()&lt;/strong&gt;：判断线程池是否关闭&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[43,44]},&quot;v&quot;:&quot;&lt;strong&gt;isTerminated()&lt;/strong&gt;：判断线程池是否终止&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[44,45]},&quot;v&quot;:&quot;线程池的监控&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[45,46]},&quot;v&quot;:&quot;&lt;strong&gt;ThreadPoolExecutor.getActiveCount()&lt;/strong&gt;：获取当前线程池中正在执行的任务数量&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[46,47]},&quot;v&quot;:&quot;&lt;strong&gt;ThreadPoolExecutor.getTaskCount()&lt;/strong&gt;：获取线程池中任务总数量&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[47,48]},&quot;v&quot;:&quot;&lt;strong&gt;ThreadPoolExecutor.getCompletedTaskCount()&lt;/strong&gt;：获取线程池中已完成的任务数量&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[48,49]},&quot;v&quot;:&quot;&lt;strong&gt;ThreadPoolExecutor.getLargestPoolSize()&lt;/strong&gt;：获取线程池中曾经创建过的最大线程数量&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[49,50]},&quot;v&quot;:&quot;合理配置线程池的参数&quot;}]}"></svg></div><h5 id="5251线程池的体系结构"><a class="markdownIt-Anchor" href="#5251线程池的体系结构"></a> 5.2.5.1.线程池的体系结构</h5><ul><li>出现的原因：经常创建和销毁、使用量特别大的资源、比如并发情况下的线程、对性能影响很大。</li><li>设计思路：​ 提前创建好多个线程，放入线程池中，使用时直接获取，使用完放回池中。可以避免频繁创建销毁、实现重复利用。类似生活中的公共交通工具。</li><li>优点：<ul><li>提高相应速度【减少创建和销毁时间】</li><li>降低资源消耗【重复利用线程池中的线程，不需要每次都重新创建】</li><li>便于线程管理</li></ul></li><li>实现原理<ul><li>接受到一个任务时，判断线程池中现有存活的线程，是否有空闲</li><li>如果已创建的核心线程都有任务，则将任务放到队列中</li><li>如果队列满了，就判断当前线程池的线程数量是否达到最大值，没有的话创建新的线程并执行该任务</li><li>如果达到了最大的线程数量，则按照设定的拒绝策略处理该任务<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240510192306.png" alt="" /></li></ul></li></ul><h5 id="5252线程池的创建方式"><a class="markdownIt-Anchor" href="#5252线程池的创建方式"></a> 5.2.5.2.线程池的创建方式</h5><table><thead><tr><th>创建方式</th><th>描述</th></tr></thead><tbody><tr><td><code>Executors.newFixedThreadPool(int n)</code></td><td>创建一个固定大小的线程池，该线程池中的线程数量固定为指定的大小 <code>n</code>，当有任务提交时，如果线程池中的线程都在执行任务，新的任务会在任务队列中等待。</td></tr><tr><td><code>Executors.newCachedThreadPool()</code></td><td>创建一个缓存线程池，该线程池中的线程数量会根据任务的数量动态调整，当有任务提交时，如果线程池中有空闲线程，则立即使用；如果没有，则创建新的线程执行任务。空闲线程在一定时间内没有被使用会被回收。</td></tr><tr><td><code>Executors.newSingleThreadExecutor()</code></td><td>创建一个单线程的线程池，该线程池中只有一个核心线程，所有任务都在同一个线程中串行执行。适用于需要顺序执行任务的场景，例如事件触发器、定时任务等。</td></tr><tr><td><code>ThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue&lt;Runnable&gt; workQueue，ThreadFactory threadFactory，RejectedExecutionHandler handler)</code></td><td>使用 <code>ThreadPoolExecutor</code> 构造函数自定义配置线程池，可以指定核心线程数、最大线程数、线程空闲时间、任务队列等参数。可以根据实际需求灵活配置线程池。</td></tr><tr><td><code>ThreadPoolTaskExecutor (Spring Framework)</code></td><td>在 Spring Framework 中使用 <code>ThreadPoolTaskExecutor</code> 类创建线程池，该类是 Spring 框架提供的用于管理线程池的工具类，具有更多的扩展性和配置选项，可以通过 Spring 的配置文件或 Java 代码进行灵活配置。</td></tr></tbody></table><p><strong>ThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue<Runnable> workQueue，ThreadFactory threadFactory，RejectedExecutionHandler handler)的参数解释：</strong></p><ol><li><p>corePoolSize：核心线程数,表示线程池中始终存活的线程数。【不能小于0】</p></li><li><p>maximumPoolSize：最大线程数,线程池中允许的最大线程数。【最大数量&gt;=核心线程数量】</p></li><li><p>keepAliveTime：存活时间数值,表示的是一个线程没有任务执行时最多保持多长时间会终止。【不能小于0】</p></li><li><p>unit：存活时间单位,参数keepAliveTime的时间单位。【用TimeUnit指定】</p><ul><li><strong>TimeUnit.DAYS</strong>: 天</li><li><strong>TimeUnit.HOURS</strong>：小时</li><li><strong>TimeUnit.MINUTES</strong>：分钟</li><li><strong>TimeUnit.SECONDS</strong>：秒</li><li><strong>TimeUnit.MILLISECONDS</strong>：毫秒</li><li><strong>TimeUnit.MICROSECONDS</strong>：微秒</li><li><strong>TimeUnit.NANOSECONDS</strong>：纳秒</li></ul></li><li><p>workQueue：阻塞队列，用于存放等待执行任务的队列，均为线程安全。【不能为null】</p><ul><li><strong>ArrayBlockingQueue</strong>：基于数组的有界阻塞队列，按照先进先出（FIFO）的顺序存储元素【不是一个严格的FIFO队列，多线程下不保证公平性】。当队列已满时，尝试插入元素会导致操作阻塞。</li><li><strong>LinkedBlockingQueue</strong>：基于链表的无界阻塞队列，按照先进先出（FIFO）的顺序存储元素。由于队列容量没有限制，因此不会导致插入操作阻塞但在队列为空时，尝试取出元素会导致操作阻塞。</li><li><strong>SynchronousQueue</strong>：同步队列，不存储元素，每个插入操作必须等待另一个线程的移除操作。这意味着插入操作和移除操作是同步的，如果没有消者线程等待取出元素，插入操作会一直阻塞。</li><li><strong>PriorityBlockingQueue</strong>：优先级的无界阻塞队列，元素按照优先级顺序存储，而非先进先出。它使用无锁的堆实现，保证了线程安全性和高效性。</li><li><strong>DelayQueue</strong>：基于优先级队列的无界阻塞队列，只有在延迟期满时才能从中提取元素。常用于定时任务调度场景，也是使用无锁的堆实现。</li><li><strong>LinkedTransferQueue</strong>：基于链表结构的无界阻塞队列，类似于 SynchronousQueue，但也包含非阻塞的 tryTransfer 方法，用于非阻塞地将元素转移给消费者线程。</li><li><strong>LinkedBlockingDeque</strong>：基于链表结构的双向阻塞队列，容量默认为 Integer.MAX_VALUE。它可以在队列的头部和尾部进行插入和移除操作，提供了更灵活的队列操作方式。</li></ul></li><li><p>threadFactory: 线程工厂，主要用来创建线程，<code>Executors.defaultThreadFactory()</code>-&gt;默认正常优先级、非守护线程。也可以自己创建线程工厂。【不能为null】</p></li><li><p>handler: 拒绝策略，当队列满时，线程池会拒绝新任务。默认使用 AbortPolicy 策略。</p><ul><li><strong>ThreadPoolExecutor.AbortPolicy</strong>: 丢弃任务并抛出 RejectedExecutionException 异常。【默认策略】</li><li><strong>ThreadPoolExecutor.DiscardPolicy</strong>: 丢弃任务，但是不抛出异常。【这是不推荐的做法】</li><li><strong>ThreadPoolExecutor.DiscardOldestPolicy</strong>: 抛弃队列中等待最久的任务[排在最前面]，然后把当前任务加入队列中。</li><li><strong>ThreadPoolExecutor.CallerRunsPolicy</strong>: 调用任务的 run() 方法绕过线程池直接运行该任务。</li></ul></li></ol><h5 id="5253线程池提交任务的方式"><a class="markdownIt-Anchor" href="#5253线程池提交任务的方式"></a> 5.2.5.3.线程池提交任务的方式</h5><ul><li><strong>execute()</strong>: 用于提交不需要返回值的任务，所以无法判断任务是否被线程池执行成功。excute()方法输入的任务是一个Runnable类的实例</li><li><strong>submit()</strong>: 用于提交需要返回值的任务。线程池会返回一个future类型的对象，通过这个future对象可以判断任务是否执行成功，并且可以通过future的get()方法获取到任务的返回值。get()方法会阻塞当前线程直到任务执行完毕。而使用get(long timeout,TimeUnit unit)方法则会阻塞当前线程一段时间后立即返回，这时候有可能任务没有执行完成。<ul><li><code>Future&lt;T&gt; submit(Callable&lt;T&gt; task)</code>：接受一个Callable接口的实例，表示要执行的任务，并返回一个Future对象，可以通过对象的get()方法获取执行结果。</li><li><code>Future&lt;?&gt; submit(Runnable task)</code>：接受一个Runnable接口的实例，表示要执行的任务，并返回一个Future对象，但对象的get()方法返回值总是为null。</li><li><code>Future&lt;T&gt; submit(Runnable task, T result)</code>：与上一种类似，但可以提供一个结果作为参数，表示任务完成时的结果。</li></ul><blockquote><ul><li><strong>submit()方法的使用注意事项</strong>:<ul><li><code>submit()</code>方法返回一个<code>Future</code>对象，通过该对象可以获取任务执行的结果，但是要注意<code>Future</code>对象的<code>get()</code>方法会阻塞当前线程，直到任务执行完成并返回结果，这可能会导致当前线程被堵塞。</li><li>在多线程环境中，如果在循环中频繁调用<code>get()</code>方法，可能会降低程序的并发性能，甚至引发死锁等问题。因此，在使用<code>submit()</code>方法提交任务时，需要谨慎考虑是否需要等待任务执行完成。</li></ul></li></ul></blockquote></li></ul><h5 id="5254关闭线程池"><a class="markdownIt-Anchor" href="#5254关闭线程池"></a> 5.2.5.4.关闭线程池</h5><ul><li><p>调用线程池的<code>shutdown</code>或<code>shutdownNow</code>方法来关闭线程池</p><ul><li><code>shutdown</code>：线程池的状态设置称SHUTDOWN，线程池会拒绝新的任务，关闭没有任务的那些空闲线程，并且等待已提交的任务执行完成。该方法用于需要等待线程都执行完成任务的场景。</li><li><code>shutdownNow</code>：线程池的状态设置称STOP，线程池会立即尝试停止所有正在执行的任务，并且不再等待任务执行完毕，正在执行的任务会被中断，未执行的任务会被取消。</li></ul><blockquote><p>关闭原理：它们的原理是遍历线程池中的工作线程，然后逐个调用线程的<code>interrupt</code>方法来中断线程，所以无法响应中断的任务可能永远无法终止运行。</p></blockquote></li><li><p>判断线程池状态：<code>isShutdown()</code>、<code>isTerminated()</code></p><ul><li><code>isShutdown()</code>：如果调用了上述的两个关闭之一，isShutdown()方法返回值为true</li><li><code>isTerminated()</code>：判断线程池是否已经完全终止。当所有任务都已关闭，即线程池关闭完成，isTerminated()方法返回值为true</li></ul></li></ul><h5 id="5255线程池的监控"><a class="markdownIt-Anchor" href="#5255线程池的监控"></a> 5.2.5.5.线程池的监控</h5><ul><li>目的：方便在出现问题时，可以根据线程池的使用状态快速定位问题</li><li>监控方法：<ul><li><code>ThreadPoolExecutor.getActiveCount()</code>：获取当前线程池中正在执行的任务数量</li><li><code>ThreadPoolExecutor.getTaskCount()</code>：获取线程池中任务总数量</li><li><code>ThreadPoolExecutor.getCompletedTaskCount()</code>：获取线程池中已完成的任务数量</li><li><code>ThreadPoolExecutor.getLargestPoolSize()</code>：获取线程池中曾经创建过的最大线程数量</li></ul></li><li>拓展线程池的监控方法：可以通过继承线程池来自定义线程池，重写线程池的beforeExecute、afterExecute方法和terminated方法，也可以在任务执行前、执行后和线程关闭前执行一些代码来进行监控。例如：监控任务的平均执行时间、最大执行时间和最小执行时间等。这几个方法在线程池里是空方法。</li></ul><h5 id="5256如何合理配置线程池的参数"><a class="markdownIt-Anchor" href="#5256如何合理配置线程池的参数"></a> 5.2.5.6.如何合理配置线程池的参数</h5><ul><li>任务的性质<ul><li>CPU密集型任务：任务以内存中的计算为主。避免线程上下文切换的成本。一般CPU是N核，就开N+1个线程</li><li>IO密集型任务：尽量多开启一些线程并发做IO操作。因为在IO过程中，CPU几乎是闲置的。一般可能是2*CPU核数,当然根据下面的标准公式计算会好一些：<br />$ \text{最大并行数} \times \text{期望CPU利用率} \times \frac{\text{总时间} (\text{CPU计算时间} + \text{等待时间})}{\text{CPU计算时间}} $</li></ul></li><li>任务的优先级【高中低】：优先级不同的任务可以使用优先队列<code>PriorityBlockingQueue</code>来处理。它可以让优先级高的任务先执行。</li><li>任务的执行时间【长中短】：根据任务的执行时间、设置核心线程数、最大线程数、队列容量等参数，来确定线程池的配置。【当然，过大的线程池可能会导致系统资源过度占用，需要根据实际情况进行合理配置】</li><li>最好使用有界队列：有界队列能增强系统的稳定性和预警能力，可以根据需要设置大一点，比如几千。有一次，我们系统里后台任务线程池的队列和线程池的最大线程数量全满了，不断抛出抛弃任务的异常，通过排查发现是数据库出现了问题</li></ul><h5 id="5257代码演示"><a class="markdownIt-Anchor" href="#5257代码演示"></a> 5.2.5.7.代码演示</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadPoolExectorTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ThreadPoolExecutor</span> threadPoolExecutor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>                <span class="token number">3</span><span class="token punctuation">,</span>                <span class="token number">6</span><span class="token punctuation">,</span>                <span class="token number">60</span><span class="token punctuation">,</span>                <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">defaultThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>AbortPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        runnable runnable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        threadPoolExecutor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>runnable<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> submit <span class="token operator">=</span> threadPoolExecutor<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">callable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>submit<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        threadPoolExecutor<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> runnable <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"执行了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> callable <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">1</span>执行了<span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="6线程的安全问题"><a class="markdownIt-Anchor" href="#6线程的安全问题"></a> 6.线程的安全问题</h2><h3 id="61前置知识"><a class="markdownIt-Anchor" href="#61前置知识"></a> 6.1.前置知识</h3><p><mark>在认识线程的安全问题之前，我们需要先了解一下多线程的三大特性、JMM（Java Memory Model，即Java内存模型）以及活跃性问题的相关知识</mark></p><ul><li><strong>线程的三大特性</strong>：<ul><li>原子性：<ul><li>即一个操作或者多个操作，要么全部执行并且执行的过程不会被任何因素打断，要么就都不执行。</li><li>对于复合操作而言，synchronized，Lock可以保证原子性，而volatile关键字不能</li></ul></li><li>可见性：<ul><li>当多个线程访问同一个变量时，一个线程修改了这个变量的值，其他线程能够立即看得到修改的值。</li><li>synchronized、Lock和volatile关键字都能保证可见性</li></ul></li><li>有序性：<ul><li>程序代码执行的结果不受JVM指令重排序的影响。</li><li>synchronized、Lock和volatile关键字都能保证有序性</li></ul></li></ul></li></ul><blockquote><p><strong>总结</strong>：<br /><strong>synchronized</strong>可以保证原子性、可见性和有序性。<br /><strong>volatile关键字</strong>可以保证可见性、有序性，对于单独的volatile变量的读写操作，也能保证原子性。然而，volatile 不能保证复合操作的原子性，比如 volatile int a = 0; a++; 这种情况并不是原子的。需要使用 AtomicInteger 等原子类来保证原子性。<br /><strong>Lock锁机制</strong>可以同时保证以上三个特性，但需要手动管理锁的获取和释放。因此，在不需要Lock特定功能的情况下，一般推荐使用synchronized。</p></blockquote><ul><li><p><strong>JMM</strong>：</p><ul><li>关键概念<ul><li>共享内存：即主存，所有线程共享，【堆区与方法区】</li><li>本地内存（线程）：也称为&quot;工作内存&quot;。JVM给每一个线程都分配了一块内存区域（线程栈：有程序计数器、方法栈等），该块内存是线程独有的。</li></ul></li><li>JMM规定：线程不能直接操作主存，而是只能操作属于自己的那部分内存。如果多个线程间需要进行变量共享，必须经过主存进行同步。<ul><li>由于JMM的限制，线程操作变量都需要经过以下几个基本步骤：<br />1.线程从主存中读取变量值到工作内存中<br />2.在工作内存中对变量进行修改操作<br />3.将操作后的结果同步回主存</li></ul></li><li>重排序：为了提高持续执行性能，编译器和CPU会对指令进行重排序。但是在多线程环境下，重排序可能导致线程安全问题，因此必须遵循 happens-before 原则来保证正确的执行顺序。</li><li>hapens-before原则：这个原则描述了在多线程环境下，操作执行的先后顺序。如果一个操作执行的结果需要对另一个操作可见，那么这两个操作之间必须存在 happens-before 关系。这个原则确保了正确的内存可见性和有序性。</li></ul></li><li><p><strong>活跃性问题</strong>：</p><ul><li>活跃性问题：活跃性是指某件正确的事情最终会发生，但当某个操作无法继续下去的时候，就会发生活跃性问题。<ul><li>死锁：多个线程相互等待对方持有的资源而无法继续执行，导致所有线程都无法完成任务。</li><li>活锁：线程不断重复相同的操作，但无法取得进展，因此任务无法完成，尽管线程在运行。</li><li>饥饿问题：一个或多个线程由于无法获取所需的资源而无法继续执行，尽管资源可用，但被其他线程占用，导致线程长时间无法完成任务。</li></ul></li></ul></li></ul><h3 id="62基本概念"><a class="markdownIt-Anchor" href="#62基本概念"></a> 6.2.基本概念</h3><ul><li>衡量标准：如果同一个程序在单线程环境下与在多线程下执行的结果一致，就说明线程安全，反之则是线程不安全</li><li>所谓的线程安全问题，其本质在于线程对共享变量操作的原子性、可见性、有序性不能同时满足或者存在活跃性问题，因此解决线程安全问题的关键就在于同时满足三大特性并避免活跃性问题出现。解决线程安全问题可能需要采取多种手段，包括使用锁机制、原子类、volatile 关键字、并发集合等，具体的方法取决于具体的场景和需求。</li></ul><h3 id="63线程的不安全的原因"><a class="markdownIt-Anchor" href="#63线程的不安全的原因"></a> 6.3.线程的不安全的原因</h3><h4 id="631原子性"><a class="markdownIt-Anchor" href="#631原子性"></a> 6.3.1.原子性</h4><blockquote><ul><li>原子性：即一个操作或者多个操作，要么全部执行并且执行的过程不会被任何因素打断，要么就都不执行。</li><li>原子操作：它是在单个步骤内执行完毕，不可中断的操作。这意味着原子操作的执行过程是连续的，不会被线程切换、中断或者其他因素打断。原子操作的执行要么全部完成，要么完全不执行，没有中间状态。</li></ul></blockquote><p>看这样一个例子，如下图<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240513204704.png" alt="" /><br />这最终导致的结果是一张票被售卖了两次，这样就具有很大的风险性。售票的过程被分成三个可分割的步骤执行，不具有原子性。</p><blockquote><p><strong>注意</strong>：我们在写一行Java代码可能不是原子性的，因为它编译成字节码，或者由JVM把字节码翻译成机器码后就可能不是一行，也就是多条执行操作。</p></blockquote><p>在并发编程中很多操作都不是原子操作，出个小题目：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// 操作1</span>i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">// 操作2</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token comment">// 操作3</span>i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">// 操作4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>操作1：这是原子操作，因为它是一个单一的、不可分割的步骤。</li><li>操作2：这不是原子操作，这实际上是一个 “read-modify-write” 操作，它包括了读取 i 的值、修改 i 的值和写回 i 的值。</li><li>操作3：这是一个原子操作，因为它是一个单一的、不可分割的步骤。</li><li>操作4：这不是原子操作，和 i++ 一样，这也是一个 “read-modify-write” 操作。</li></ul><p>在单线程环境下上述是个操作都不会出现问题，但在多线程环境下，如果不加锁或者使用原子类的话，可能会出现意料之外的值。我们来测试一下，看看输出结果。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">YuanziDeo</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">int</span> numThreads <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> numIncrementsPerThread <span class="token operator">=</span> <span class="token number">100000</span><span class="token punctuation">;</span>      <span class="token class-name">Thread</span><span class="token punctuation">[</span><span class="token punctuation">]</span> threads <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">[</span>numThreads<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> numThreads<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          threads<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>              <span class="token function">increase</span><span class="token punctuation">(</span>numIncrementsPerThread<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          threads<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Thread</span> thread <span class="token operator">:</span> threads<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          thread<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Final value of i = "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Expected value = "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>numThreads <span class="token operator">*</span> numIncrementsPerThread<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">increase</span><span class="token punctuation">(</span><span class="token keyword">int</span> numIncrementsPerThread<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> numIncrementsPerThread<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          i<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出如下:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Final</span> value of i <span class="token operator">=</span> <span class="token number">118667</span><span class="token class-name">Expected</span> value <span class="token operator">=</span> <span class="token number">200000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>i 期望的值为 200000，但实际跑出来的是 118667，这证明 i++ 不是一个原子操作，</p><blockquote><p>i++,i- -操作被分成三步执行：</p><ul><li>从主存把数据读取到本地内存</li><li>对数据进行更新操作</li><li>再把更新后的操作写回主存</li></ul><p>在多线程中，这三个步骤再执行时，线程可以被中断，导致数据更新出现问题，eg：线程1拿了 i = 100 ，执行 ++ 操作后，本地内存中i = 101，还没来得及写回主存，被线程2抢到CPU执行权，线程2从主存中拿到的 i = 100（还是100，还没有被线程1更新），假设后面的流程是线程2执行完了3个步骤后把主存中的i更新为101后，线程1又抢到CPU执行权，完成步骤3，更新完主存中的i还是等于101，这就相当于两次++操作最终i只加了1。</p></blockquote><h4 id="632可见性"><a class="markdownIt-Anchor" href="#632可见性"></a> 6.3.2.可见性</h4><blockquote><p>可见性：当多个线程访问同一个变量时，一个线程修改了这个变量的值，其他线程能够立即看到修改的值。</p></blockquote><p>来看这段代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadDemo17</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Thread</span> thread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程1：开始执行 "</span> <span class="token operator">+</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程1：结束执行 "</span> <span class="token operator">+</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">Thread</span> thread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程2：修改flag = false "</span> <span class="token operator">+</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240514111412.png" alt="" /><br />可以看到，线程2将flag修改为false，线程1始终未结束执行【线程1中的flag并没有得到更新，始终是true】，这就是内存可见性问题。</p><blockquote><p>多个线程工作的时候都是<mark>在自己的工作内存</mark>来执行操作的，<mark>线程之间是不可见</mark>的:</p><ol><li>线程之间的<code>共享变量存在主存中</code></li><li>每一个<code>线程</code>都有自己的<code>工作内存</code></li><li>线程读取共享变量时，先把变量从主内存拷贝到自己的工作内存（CPU寄存器），再从工作内存读取数据</li><li>线程修改共享变量时，先修改工作内存中的变量值，再同步到主内存【并不能及时将新值刷新到主内存中】</li></ol></blockquote><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240513215241.png" alt="" width="40%" height="auto"><h4 id="633有序性"><a class="markdownIt-Anchor" href="#633有序性"></a> 6.3.3.有序性</h4><blockquote><p><strong>了解重排序</strong>：在计算机系统内部，程序中的指令并非严格按照源代码的顺序执行。当一个CPU核心通过流水线技术处理指令时，若前条指令未完成但不影响后续指令的执行，处理器可能会提前执行下一条或多条指令。同样地，编译器在生成机器代码的过程中也可能出于化目的重新安排源代码的执行顺序。这种现象就被称为指令重排序。（在java内存模型中，允许编译器和处理器对指令进行重排序，重排过程不会影响单线程程序的执行，但是会影响多线程并发执行的正确性）<br />比如有这样三步操作：（1）去前台取U盘 （2）去教室写作业 （3）去前台取快递<br />JVM会对指令优化，也就是重排序，新的顺序为（1）（3）（2），这样来提高效率</p><p>虽然重排序提高了CPU利用率和程序执行效率，但它也可能引入了潜在的多线程问题，尤其是在没有正确同步的情况下，可能导致不可预测的行为和数据竞争。为此，Java内存模型（JMM）通过happens-before规则来限制重排序，并确保在正确同步的多线程环境中，各线程能观察到一致且符合预期的内存状态。</p></blockquote><p>当程序没有进行正确的同步控制时，就可能出现数据竞争问题。数据竞争指的是在一个线程内写入变量的同时，另一个线程读取了同一个变量，且这两个操作之间没有通过任何同步机制来确保执行顺序。这种情况下，程序的行为可能变得不可预测，例如读取到未更新的数据或者状态混乱。<br />来看这段代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 示例：数据竞争</span><span class="token keyword">class</span> <span class="token class-name">DataRaceExample</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> sharedValue <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token class-name">Thread</span> writerThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        sharedValue <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 写操作</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Thread</span> readerThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> localCopy <span class="token operator">=</span> sharedValue<span class="token punctuation">;</span> <span class="token comment">// 读操作</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Reader sees: "</span> <span class="token operator">+</span> localCopy<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">startThreads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        writerThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        readerThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 数据竞争，因为没有同步措施</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个示例中，读者线程可能会在写者线程完成赋值之前就读取sharedValue，从而导致结果不确定。</p><blockquote><p>有序性：即程序的执行顺序按照代码的先后顺序执行。（在java内存模型中，允许编译器和处理器对指令进行重排序，重排序过程不会影响单线程程序的执行，但是会影响多线程并发执行的正确性）</p></blockquote><h4 id="634活跃性问题"><a class="markdownIt-Anchor" href="#634活跃性问题"></a> 6.3.4.活跃性问题</h4><p>上面讲到的问题都可以采取加锁的方式来解决，但是如果加锁不当也容易引入其他问题，比如『死锁』。<br />在讲『死锁』之前，我们需要先引入另外一个概念：<code>活跃性问题</code>。</p><blockquote><p>活跃性是指某件正确的事情最终会发生，但当某个操作无法继续下去的时候，就会发生活跃性问题。</p></blockquote><p>活跃性问题一般有这样几类：<code>死锁</code>，<code>活锁</code>，<code>饥饿问题</code>。</p><ul><li><strong>死锁</strong>：<br />死锁是指多个线程因为环形等待锁的关系而永远地阻塞下去。<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240513225747.png" alt="" /></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeadlockExample</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> lock1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> lock2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Thread</span> thread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Thread 1 acquired lock1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Thread 1 waiting for lock2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Thread 1 acquired lock2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Thread</span> thread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Thread 2 acquired lock2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Thread 2 waiting for lock1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Thread 2 acquired lock1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    thread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    thread2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Thread</span> <span class="token number">1</span> acquired lock1<span class="token class-name">Thread</span> <span class="token number">2</span> acquired lock2<span class="token class-name">Thread</span> <span class="token number">2</span> waiting <span class="token keyword">for</span> lock1<span class="token class-name">Thread</span> <span class="token number">1</span> waiting <span class="token keyword">for</span> lock2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>活锁</strong>：<br />死锁是两个线程都在等待对方释放锁而导致阻塞。而<code>活锁</code>的意思是线程没有阻塞，还活着呢。当多个线程都在运行并且修改各自的状态，而其他线程又依赖这个状态，就导致任何一个线程都无法继续执行，只能重复着自身的动作，于是就发生了活锁。<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240513230139.png" alt="" /><br />举一个生活中的例子，大家平时在走路的时候，迎面走来一个人，两个人互相让路，但是又同时走到了一个方向，如果一直这样重复着避让，这俩人就发生了活锁，学到了吧，嘿嘿。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LivelockExample</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> shouldTakeStep1 <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> shouldTakeStep2 <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Thread</span> thread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>shouldTakeStep1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Thread 1 takes step 1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    shouldTakeStep1 <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    shouldTakeStep2 <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Thread 1 waits for Thread 2 to take step 2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> thread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>shouldTakeStep2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Thread 2 takes step 2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    shouldTakeStep2 <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    shouldTakeStep1 <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Thread 2 waits for Thread 1 to take step 1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Thread</span> <span class="token number">1</span> takes step <span class="token number">1</span><span class="token class-name">Thread</span> <span class="token number">1</span> waits <span class="token keyword">for</span> <span class="token class-name">Thread</span> <span class="token number">2</span> <span class="token keyword">to</span> <span class="token namespace">take</span> step <span class="token number">2</span><span class="token class-name">Thread</span> <span class="token number">2</span> takes step <span class="token number">2</span><span class="token class-name">Thread</span> <span class="token number">2</span> waits <span class="token keyword">for</span> <span class="token class-name">Thread</span> <span class="token number">1</span> <span class="token keyword">to</span> <span class="token namespace">take</span> step <span class="token number">1</span><span class="token class-name">Thread</span> <span class="token number">1</span> takes step <span class="token number">1</span><span class="token class-name">Thread</span> <span class="token number">1</span> waits <span class="token keyword">for</span> <span class="token class-name">Thread</span> <span class="token number">2</span> <span class="token keyword">to</span> <span class="token namespace">take</span> step <span class="token number">2</span><span class="token class-name">Thread</span> <span class="token number">2</span> waits <span class="token keyword">for</span> <span class="token class-name">Thread</span> <span class="token number">1</span> <span class="token keyword">to</span> <span class="token namespace">take</span> step <span class="token number">1</span><span class="token class-name">Thread</span> <span class="token number">2</span> takes step <span class="token number">2</span><span class="token class-name">Thread</span> <span class="token number">2</span> waits <span class="token keyword">for</span> <span class="token class-name">Thread</span> <span class="token number">1</span> <span class="token keyword">to</span> <span class="token namespace">take</span> step <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>饥饿</strong>：<br />如果一个线程无其他异常却迟迟不能继续运行，那基本上是处于饥饿状态了<br />常见的有几种场景<ul><li>高优先级的线程一直在运行消耗CPU，所有低优先级线程一直处于等待</li><li>一些线程被永久堵塞在一个等待进入同步块的状态，而其他线程总是能在它之前持续地对该同步块进行访问</li></ul></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StarvationExample</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Runnable</span> runnable <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">StarvationExample</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" is running"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 模拟线程持续运行</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> highPriorityThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>runnable<span class="token punctuation">)</span><span class="token punctuation">;</span>        highPriorityThread<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token constant">MAX_PRIORITY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> lowPriorityThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>runnable<span class="token punctuation">)</span><span class="token punctuation">;</span>        lowPriorityThread<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token constant">MIN_PRIORITY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        highPriorityThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lowPriorityThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7线程的同步"><a class="markdownIt-Anchor" href="#7线程的同步"></a> 7.线程的同步</h2><blockquote><p>上面我们提到了多线程造成的不安全问题，那么我们应该怎么解决呢？<br />解决多线程安全问题的关键就在于实现多线程的同步，即制某个资源在同一时刻只能被一个线程访问。</p></blockquote><h3 id="71volatile关键字"><a class="markdownIt-Anchor" href="#71volatile关键字"></a> 7.1.volatile关键字</h3><blockquote><p><code>volatile</code>是用来<code>修饰变量</code>的，它的作用是<code>保证可见性、有序性</code><br /><strong>注意</strong>：<mark>不能保证原子性</mark>，对于n++,n--来说，用volatile修饰n也是线程不安全的</p></blockquote><h4 id="实现原理"><a class="markdownIt-Anchor" href="#实现原理"></a> 实现原理</h4><ul><li>代码在写入volatile修饰的变量的时候，改变线程工作内存中volatile变量副本的值，改变后的值会立即写回到主存，并且会立即使其他线程的工作内存中对应的缓存无效。这确保了其他线程在下次读取该变量时能够看到最新的值。</li><li>代码在读取volatile修饰的变量的时候，会从主存中读取volatile变量的最新值到线程工作内存中，再从工作内存中读取volatile变量的副本</li></ul><h4 id="volatile解决可见性问题"><a class="markdownIt-Anchor" href="#volatile解决可见性问题"></a> volatile解决可见性问题</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadDemo17</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Thread</span> thread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程1：开始执行 "</span> <span class="token operator">+</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程1：结束执行 "</span> <span class="token operator">+</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">Thread</span> thread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程2：修改flag = false "</span> <span class="token operator">+</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240514113308.png" alt="" /><br />给变量flag加上volatile修饰后，线程1能够接收到flag的改变，从而结束了执行，解决了内存的可见性问题。</p><h4 id="volatile关键字的缺点"><a class="markdownIt-Anchor" href="#volatile关键字的缺点"></a> volatile关键字的缺点</h4><p>volatile关键字虽然可以解决内存的可见性和指令重排序的问题，但解决不了原子性问题，对于 ++ 和 -- 操作的线程非安全问题依然解决不了，比如以下代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadDemoVolatile</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Counter</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 变量</span>        <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>         <span class="token comment">// 循环次数</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MAX_COUNT</span><span class="token punctuation">;</span>         <span class="token keyword">public</span> <span class="token class-name">Counter</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token constant">MAX_COUNT</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">MAX_COUNT</span> <span class="token operator">=</span> <span class="token constant">MAX_COUNT</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>         <span class="token comment">// ++ 方法</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">increase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token constant">MAX_COUNT</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                number<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>         <span class="token comment">// -- 方法</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">desc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token constant">MAX_COUNT</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                number<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>         <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> number<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Counter</span> counter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Counter</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> thread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>counter<span class="token operator">::</span><span class="token function">increase</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> thread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>counter<span class="token operator">::</span><span class="token function">desc</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 等待线程执行完成</span>        thread1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最终结果："</span> <span class="token operator">+</span> counter<span class="token punctuation">.</span><span class="token function">getNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 不一定等于0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="72synchronized锁"><a class="markdownIt-Anchor" href="#72synchronized锁"></a> 7.2.synchronized锁</h3><p>我们知道，在Java中，<code>每一个对象都有一把唯一的锁</code>，这也是synchronized实现线程同步的基础。【唯一的锁也就是对象的监视器锁，也称为内部锁或互斥锁】</p><blockquote><p><code>synchronized</code>是<code>基于对象头加锁</code>的，它的作用是<code>保证了原子性、可见性、有序性</code><br />特别注意：<mark>不是对代码加锁，所说的加锁操作就是给这个对象的对象头里设置了一个标志位</mark>，一个对象在同一时间只能有一个线程获取到该对象的锁。如果锁已经被其他线程获取，那么当前线程就会进入到阻塞状态，直到它获取到了锁。</p></blockquote><h4 id="同步原理"><a class="markdownIt-Anchor" href="#同步原理"></a> 同步原理</h4><ul><li>当线程进入一个使用synchronized关键词修饰的方法或代码块时，它会尝试获取对象的锁。</li><li>如果对象的锁被其他线程持有，那么当前线程就会被阻塞，直到它获取到了锁。</li><li>当线程执行完了synchronized方法或代码块后，会释放对象锁，这样其他等待获取该锁的线程就有机会执行了。</li></ul><h4 id="优点"><a class="markdownIt-Anchor" href="#优点"></a> 优点</h4><ol><li><p><strong>互斥性</strong></p><blockquote><p>synchronized  会起到互斥效果, 某个线程执行到某个对象的 synchronized 方法或代码块时, 其他线程如果也执行到同一个对象的  synchronized 方法或代码块，就会<mark>阻塞等待</mark><br />进入synchronized方法或代码块，相当于 加锁<br />退出synchronized方法或代码块，相当于 解锁</p></blockquote><p>看下图理解加锁过程：<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240514141516.jpeg" alt="" /></p><blockquote><p><strong>阻塞等待：</strong><br />针对每一把锁（监视器锁），JVM内部都维护了一个等待队列，当这个锁被某个线程占有的时候，其他线程尝试获取这把锁，但由于锁已经被占用，这些线程就会进入阻塞状态，加入到该锁的等待队列中。直到持有锁的线程释放锁，JVM将从等待队列中唤醒一个或多个线 程，使其尝试再次获取锁。如果这些线程成功获取锁，它们将继续执行；否则，将继续阻塞等待。</p></blockquote></li><li><p><strong>刷新主存</strong></p><blockquote><p><strong>synchronized的工作过程：</strong><br />获得互斥锁<br />从主存拷贝最新的变量到工作内存<br />对变量执行操作<br />将修改后的共享变量的值刷新到主存<br />释放互斥锁</p></blockquote></li><li><p><strong>可重入性</strong></p><blockquote><p>synchronized是可重入锁<br />同一个线程可以多次获取同一个对象的锁，即允许线程对同一个锁进行嵌套调用【避免了死锁的发生】</p></blockquote><p>可重入锁内部会记录当前的锁被哪个线程占用，同时也会记录一个&quot;加锁次数&quot;，对于第一次加锁，记录当前获取锁的线程并且次数加一。但是后续该线程继续申请加锁的时候，并不会直接加锁，而是将记录的&quot;加锁次数加1&quot;，后续释放锁的时候，次数减1，直到次数为0才是真正的释放锁。</p><p>可重入锁的意义就是降低程序员负担（使用成本来提高开发效率），代价就是程序的开销增大（维护锁属于哪个线程，并且加减计数，降低了运行效率）</p></li><li><p><strong>内置了锁定和释放机制</strong></p><blockquote><p>synchronized关键字内置了锁定和释放机制，使用起来比较方便，不需要手动进行锁的管理</p></blockquote></li></ol><h4 id="缺点"><a class="markdownIt-Anchor" href="#缺点"></a> 缺点</h4><ol><li><strong>性能问题</strong><br />虽然 synchronized 关键字能够保证线程安全，但是它的性能相对较差，因为在获取锁和释放锁的过程中会涉及到一定的系统开销。<br />如果是多个线程需要同时进行读操作，一个线程读操作时其他线程只有等待</li><li><strong>方法较少</strong><br />无法知道是否成功获取到锁，无法知道锁是否被其他线程持有。</li></ol><h4 id="synchronized实现线程同步的形式"><a class="markdownIt-Anchor" href="#synchronized实现线程同步的形式"></a> synchronized实现线程同步的形式</h4><table><thead><tr><th style="text-align:center">形式</th><th style="text-align:center">特点</th></tr></thead><tbody><tr><td style="text-align:center"><code>实例同步方法</code></td><td style="text-align:center">锁的是<code>当前实例对象</code>，执行同步代码前必须获得<code>当前实例的锁</code>。这意味着，<mark>同一个类的不同实例对象之间不会互斥</mark>。</td></tr><tr><td style="text-align:center"><code>静态同步方法</code></td><td style="text-align:center">锁的是<code>当前类的Class对象</code>，执行同步代码前必须获得<code>当前类的Class对象的锁</code>。这意味着，<mark>无论有多少实例对象，它们共享同一把锁</mark>。</td></tr><tr><td style="text-align:center"><code>同步代码块</code></td><td style="text-align:center">锁的是<code>括号里的对象</code>，对给定对象加锁，执行同步代码块必须<code>获得给定对象的锁</code>。这提供了<mark>更灵活的锁定范围，允许更细粒度的控制</mark>。</td></tr></tbody></table><ul><li><strong>实例同步方法：</strong><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                                              <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                                     <span class="token operator">&lt;=</span><span class="token operator">=</span><span class="token operator">></span>              <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>   <span class="token punctuation">&#125;</span>                                                   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>                                                <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><strong>静态同步方法：</strong><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                                                     <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                                            <span class="token operator">&lt;=</span><span class="token operator">=</span><span class="token operator">></span>                  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>   <span class="token punctuation">&#125;</span>                                                         <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>                                                        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><strong>同步代码块：</strong><br />需要显示指定对哪个对象加锁（Java中任意对象都可以作为锁对象）<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">synchronized</span> <span class="token punctuation">(</span>对象<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>为什么要使用同步代码块？</strong></p><ul><li>在某些情况下，我们编写的方法体可能比较<mark>庞大</mark>，同时又有一些<mark>耗时的操作</mark>，如果对整个方法体进行同步，效率会大大降低。所以我们希望能够<mark>只同步必要的代码块</mark>，对于一些<mark>不需要同步的或者耗时较长的操作</mark>，放到同步代码块之外，比如：</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Synchronized</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">running</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是耗时操作。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//需要同步的代码块写下面</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token function">running</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Synchronized</span> sync <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Synchronized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>sync<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>sync<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">这是耗时操作。这是耗时操作。这是耗时操作。<span class="token number">1</span>这是耗时操作。这是耗时操作。这是耗时操作。<span class="token number">2</span><span class="token number">1</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果表明，需要同步的代码块确实实现了<mark>同步</mark>。</p><h4 id="synchronized解决原子性问题"><a class="markdownIt-Anchor" href="#synchronized解决原子性问题"></a> synchronized解决原子性问题</h4><p>回到线程安全的原子性问题，为避免以上的问题发生，我们给 increase() 方法加上synchronized 关键字，使得<mark>两个线程无法同时调用increase() 方法</mark>，以保证++操作的三个步骤中的任何一步都不会被另外一个线程打断，这样，&quot;i++&quot;操作就永远不会因为线程切换而出错。<br />代码如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">YuanziDeo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> numThreads <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> numIncrementsPerThread <span class="token operator">=</span> <span class="token number">100000</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span><span class="token punctuation">[</span><span class="token punctuation">]</span> threads <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">[</span>numThreads<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> numThreads<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            threads<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                <span class="token function">increase</span><span class="token punctuation">(</span>numIncrementsPerThread<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            threads<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Thread</span> thread <span class="token operator">:</span> threads<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            thread<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Final value of i = "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Expected value = "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>numThreads <span class="token operator">*</span> numIncrementsPerThread<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">increase</span><span class="token punctuation">(</span><span class="token keyword">int</span> numIncrementsPerThread<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> numIncrementsPerThread<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Final</span> value of i <span class="token operator">=</span> <span class="token number">200000</span><span class="token class-name">Expected</span> value <span class="token operator">=</span> <span class="token number">200000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>这里用到的是<mark>静态同步方法</mark>，线程1和线程2进入synchronized方法时，使用的是同一把锁。</p></blockquote><h4 id="synchronized需要注意的问题"><a class="markdownIt-Anchor" href="#synchronized需要注意的问题"></a> synchronized需要注意的问题</h4><p>请看以下代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Synchronized</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token function">running</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//用同一个类创建两个对象</span>        <span class="token class-name">Synchronized</span> sync1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Synchronized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>sync1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Synchronized</span> sync2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Synchronized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>sync2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">running</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 进入了synchronized修饰的实例同步方法 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 准备离开synchronized修饰的实例同步方法 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span> 进入了<span class="token keyword">synchronized</span>修饰的实例同步方法 <span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span> 进入了<span class="token keyword">synchronized</span>修饰的实例同步方法 <span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span> 准备离开<span class="token keyword">synchronized</span>修饰的实例同步方法 <span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span> 准备离开<span class="token keyword">synchronized</span>修饰的实例同步方法 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>为什么在Thread-0还没有离开synchronized修饰的实例同步方法时，Thread-1就进入synchronized修饰的实例同步方法呢？</strong></p><blockquote><p>这是因为synchronized修饰的<mark>实例同步方法</mark>锁的对象是<mark>this对象</mark>，而使用两个对象去访问，<mark>不是同一把锁</mark>。导致没有起到线程同步的效果。<br />如果我们用同一个对象访问：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//只创建一个对象</span><span class="token class-name">Synchronized</span> sync <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Synchronized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>sync<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>sync<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>结果就是<mark>同步</mark>的<br /><strong>注：为了确保所有线程都能看到共享数据的最新值，因此所有执行读写操作的线程都必须在同一个锁上同步。</strong></p></blockquote><h3 id="73lock锁"><a class="markdownIt-Anchor" href="#73lock锁"></a> 7.3.Lock锁</h3><p>前面使用的synchronized关键字可以实现多线程间的同步问题，其实，在JDK1.5后新增的<code>ReentrantLock</code>类同样可以实现这个功能，而且<mark>在用法上比synchronized关键字更灵活</mark>。</p><blockquote><p>ReentrantLock (重入锁)，是实现Lock接口的一个类。<br />ReentrantLock 支持两种锁：<strong>公平锁</strong>和<strong>非公平锁</strong>。【默认情况下（不传参），ReentrantLock 创建的是非公平锁】</p></blockquote><h4 id="reentrantlock的源码分析"><a class="markdownIt-Anchor" href="#reentrantlock的源码分析"></a> ReentrantLock的源码分析</h4><h5 id="支持重入性"><a class="markdownIt-Anchor" href="#支持重入性"></a> 支持重入性</h5><blockquote><p>要想支持重入性，就要解决两个问题：</p><ol><li>当一个线程尝试获取已经被它自己持有的锁时，应当允许它成功获取锁。这意味着锁的获取操作必须能够识别当前持有锁的线程，并允许该线程再次获取锁。</li><li>由于锁可能会被一个线程多次获取，因此锁的释放操作必须进行计数。只有当一个线程释放锁的次数与它获取锁的次数相等时，锁才算是真正被释放，从而允许其他线程获取该锁。</li></ol></blockquote><p>针对第一个问题，我们来看看 ReentrantLock 是怎样实现的，以非公平锁为例，判断当前线程能否获得锁为例，核心方法为内部类 Sync 的 nonfairTryAcquire 方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">nonfairTryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">final</span> <span class="token class-name">Thread</span> current <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//1. 如果该锁未被任何线程占有，该锁能被当前线程获取</span><span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> acquires<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//2.若被占有，检查占有线程是否是当前线程</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 3. 再次获取，计数加一</span>        <span class="token keyword">int</span> nextc <span class="token operator">=</span> c <span class="token operator">+</span> acquires<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nextc <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// overflow</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Maximum lock count exceeded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setState</span><span class="token punctuation">(</span>nextc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码的逻辑很简单，具体请看注释。为了支持重入性，在第二步增加了处理逻辑，如果该锁已经被线程占有了，会继续检查占有线程是否为当前线程，如果是的话，同步状态加 1 返回 true，表示可以再次获取成功。每次重新获取都会对同步状态进行加一的操作，那么释放的时候处理思路是怎样的呢？（依然还是以非公平锁为例）核心方法为 tryRelease：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryRelease</span><span class="token punctuation">(</span><span class="token keyword">int</span> releases<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//1. 同步状态减1</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> releases<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalMonitorStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> free <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//2. 只有当同步状态为0时，锁成功被释放，返回true</span>        free <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">// 3. 锁未被完全释放，返回false</span>    <span class="token function">setState</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> free<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码的逻辑请看注释，需要注意的是，重入锁的释放必须得等到同步状态为 0 时锁才算成功释放，否则锁仍未释放。如果锁被获取了 n 次，释放了 n-1 次，该锁未完全释放返回 false，只有被释放 n 次才算成功释放，返回 true。到现在我们可以理清 ReentrantLock 重入性的实现了，也就是理解了同步语义的第一条。</p><h5 id="公平锁和非公平锁"><a class="markdownIt-Anchor" href="#公平锁和非公平锁"></a> 公平锁和非公平锁</h5><blockquote><p>ReentrantLock 支持两种锁：<strong>公平锁</strong>和<strong>非公平锁</strong>。</p><ul><li><strong>公平锁</strong>：多个线程按照申请锁的顺序去获得锁，线程会直接进入队列去排队，永远都是队列的第一位才能得到锁。</li><li><strong>非公平锁</strong>：多个线程去获取锁的时候，会直接去尝试获取，获取不到，再去进入等待队列，如果能获取到，就直接获取到锁。</li></ul></blockquote><ul><li>ReentrantLock 的构造方法<mark>无参</mark>时是构造非公平锁，源码为：<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    sync <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NonfairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>ReentrantLock 的构造方法<mark>有参</mark>(boolean fair)时，true为公平锁，false为非公平锁，源码为：<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> fair<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  sync <span class="token operator">=</span> fair <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">FairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">NonfairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><p>在非公平锁获取时（nonfairTryAcquire 方法），只是简单的获取了一下当前状态然后做了一些逻辑处理，并没有考虑到当前同步队列中线程等待的情况。</p><p>我们来看看公平锁的处理逻辑是怎样的，核心方法为：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">final</span> <span class="token class-name">Thread</span> current <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasQueuedPredecessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>            <span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> acquires<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> nextc <span class="token operator">=</span> c <span class="token operator">+</span> acquires<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nextc <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Maximum lock count exceeded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setState</span><span class="token punctuation">(</span>nextc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码的逻辑与 nonfairTryAcquire 基本上一致，唯一的不同在于增加了 hasQueuedPredecessors 的逻辑判断，从方法名就可以知道该方法用来判断当前节点在同步队列中是否有前驱节点的，如果有前驱节点，说明有线程比当前线程更早的请求资源，根据公平性，当前线程请求资源失败。如果当前节点没有前驱节点，才有做后面逻辑判断的必要性。</p><p><strong>公平锁每次都是从同步队列中的第一个节点获取到锁，而非公平性锁则不一定，有可能刚释放锁的线程能再次获取到锁</strong></p><h4 id="reentrantlock-的使用"><a class="markdownIt-Anchor" href="#reentrantlock-的使用"></a> ReentrantLock 的使用</h4><p><strong>ReentrantLock基本用法：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadLock</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 1.创建锁对象</span>        <span class="token class-name">Lock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 2.加锁</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 业务代码</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 3.释放锁</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注意事项：</strong><br />在使用ReentrantLock时，必须手动加锁，手动释放锁。</p><ul><li>锁必须在try代码块开始之前获取，或者在try代码块的首行【加锁之前不能有异常抛出】。否则会导致以下两个问题：<ul><li>如果锁在try代码块里面，因为try代码中的异常导致加锁失败，还会执行finally释放锁的操作，进而引发 IllegalMonitorStateException 异常。</li><li>unlock 异常会覆盖 try 里面的业务异常，增加排查错误的难度。</li></ul></li><li>ReentrantLock 的锁必须在finally 中手动释放。【这确保了无论 try 块内的代码是否抛出异常，锁都会被释放，防止死锁】</li></ul></blockquote><p>错误❎示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Lock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XxxLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// ...</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 如果在此抛出异常，会直接执行 finally 块的代码，导致 lock.lock() 没有被执行</span>    <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 不管锁是否成功，finally 块都会执行</span>    lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">doOthers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>    lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>正确✅示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Lock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XxxLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// ...</span>lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">doOthers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>    lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="reentrantlock解决原子性问题"><a class="markdownIt-Anchor" href="#reentrantlock解决原子性问题"></a> ReentrantLock解决原子性问题</h4><p>ReentrantLock 的使用方式与 synchronized 关键字类似，都是通过加锁和释放锁来实现同步的。我们来看看 ReentrantLock 的使用方式，以非公平锁为例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReentrantLockTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Thread</span> thread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    count<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>                    lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> thread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    count<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>                    lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">20000</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到，两个线程对 count 变量进行了 20000 次累加操作，说明 ReentrantLock 是支持原子性的。我们再来看看公平锁的使用方式，只需要将 ReentrantLock 的构造方法改为公平锁即可：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">20000</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到，公平锁的运行结果与非公平锁的运行结果一致，这是因为公平锁的实现方式与非公平锁的实现方式基本一致，只是在获取锁时增加了判断当前节点是否有前驱节点的逻辑判断。</p><h3 id="74reentrantlock-与-synchronized-的区别"><a class="markdownIt-Anchor" href="#74reentrantlock-与-synchronized-的区别"></a> 7.4.ReentrantLock 与 synchronized 的区别</h3><ol><li><p><strong>类 vs 关键字</strong>：</p><ul><li>ReentrantLock 是一个类，它提供了更多的灵活性和功能，如支持公平锁和非公平锁、可中断的获取锁、超时获取锁等。而 synchronized 是 Java 中的关键字，用于实现同步，其使用简单，但功能相对受限。</li></ul></li><li><p><strong>多路选择通知 vs 单路通知</strong>：</p><ul><li>ReentrantLock 可以与多个 Condition 对象一起使用，实现了多路选择通知，使得在某些情况下更灵活。而 synchronized 关键字只能通过 wait 和 notify/notifyAll 方法唤醒一个线程或者全部线程，这是一种单路通知。</li></ul></li><li><p><strong>手动释放锁 vs 自动释放锁</strong>：</p><ul><li>在使用 ReentrantLock 时，需要手动调用 <code>unlock()</code> 方法来释放锁，通常在 <code>finally</code> 块中进行，以确保在发生异常时锁能够被正确释放。而 synchronized 关键字在同步块执行完毕后会自动释放锁，无需手动操作。</li></ul></li><li><p><strong>性能</strong>：</p><ul><li>在高并发的情况下，ReentrantLock 通常提供了更好的性能，特别是在竞争激烈的场景下。因为 ReentrantLock 具有更细粒度的控制能力，可以避免某些情况下的锁竞争和线程饥饿现象。但是，随着 JDK 版本的升级，synchronized 的性能已经得到了很大的改进，在某些情况下，性能差距已经不太明显。</li></ul></li></ol><p>总的来说，ReentrantLock 提供了更多的功能和灵活性，但也需要更多的注意和管理。而 synchronized 关键字虽然使用简单，但功能相对受限。在选择使用时，需要根据具体的需求和场景进行权衡和选择。</p><h3 id="75原子类"><a class="markdownIt-Anchor" href="#75原子类"></a> 7.5.原子类</h3><h4 id="基本概念"><a class="markdownIt-Anchor" href="#基本概念"></a> 基本概念</h4><p>在Java的<code>java.util.concurrent</code>包中，除了提供底层锁，并发同步等工具类之外，还提供了一组原子操作类，大多以<code>Atomic</code>开头，它们位于<code>java.until.concurrent.atomic</code>包中。</p><blockquote><p>所谓原子操作类，就是这个操作要么全部执行成功，要么全部执行失败【<code>保证原子性</code>】，是保证并发编程安全的重要一环。<br />相比通过<code>synchronized</code>和<code>Lock</code>等方式实现的线程安全同步操作，原子类的实现机制则安全不同。它采用的是<mark>通过无锁（lock-free）的方式来实现线程安全访问，底层原理主要是基于<code>CAS</code>操作来实现</mark>。</p></blockquote><p>某些业务场景下，通过原子类来操作，即可实现线程安全的要求，又可以实现高效的并发性能，同时让编程方面更加简单。</p><h4 id="常用原子操作类"><a class="markdownIt-Anchor" href="#常用原子操作类"></a> 常用原子操作类</h4><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240515192026.jpeg" alt="" width="100%" height="auto">虽然原子操作类很多，但是大体的用法基本类似，只是针对不同的数据类型进行了单独适配，这些原子类都可以保证多线程下数据的安全性，使用起来也比较简单。<h5 id="基本类型"><a class="markdownIt-Anchor" href="#基本类型"></a> 基本类型</h5><p>基本类型的原子类，也是最常用的原子操作类，分为以下三种基础类型：</p><ul><li><code>AtomicBoolean</code>：布尔类型的原子操作类</li><li><code>AtomicInteger</code>：整数类型的原子操作类</li><li><code>AtomicLong</code>：长整数类型的原子操作类</li></ul><p>以<code>AtomicInteger</code>为例，其基本用法如下：</p><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center"><code>int get()</code></td><td style="text-align:center">获取当前值</td></tr><tr><td style="text-align:center"><code>void set(int newValue)</code></td><td style="text-align:center">设置当前值为newValue</td></tr><tr><td style="text-align:center"><code>int getAndIncrement()</code></td><td style="text-align:center">获取当前值，并自增1（先获取再自增）</td></tr><tr><td style="text-align:center"><code>int getAndDecrement()</code></td><td style="text-align:center">获取当前值，并自减1（先获取再自减）</td></tr><tr><td style="text-align:center"><code>int incrementAndGet()</code></td><td style="text-align:center">自增1，并获取当前值（先自增再获取）</td></tr><tr><td style="text-align:center"><code>int decrementAndGet()</code></td><td style="text-align:center">自减1，并获取当前值（先自减再获取）</td></tr><tr><td style="text-align:center"><code>int getAndAdd(int delta)</code></td><td style="text-align:center">获取当前值，并增加delta（先获取再增加）</td></tr><tr><td style="text-align:center"><code>int addAndGet(int delta)</code></td><td style="text-align:center">增加delta，并获取当前值（先增加再获取）</td></tr><tr><td style="text-align:center"><code>int getAndSet(int newValue)</code></td><td style="text-align:center">获取当前值，并设置当前值为newValue</td></tr><tr><td style="text-align:center"><code>boolean compareAndSet(int expect, int update)</code></td><td style="text-align:center">如果当前值等于expect，则设置当前值为update，并返回true，否则返回false。 直接使用CAS方法【核心方法】</td></tr></tbody></table><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">AtomicInteger</span> atomicInteger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 先获取值，再自增，默认初始值为0</span>      <span class="token keyword">int</span> v1 <span class="token operator">=</span> atomicInteger<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"v1："</span><span class="token operator">+</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 获取自增后的ID值</span>      <span class="token keyword">int</span> v2 <span class="token operator">=</span> atomicInteger<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"v2："</span><span class="token operator">+</span>v2<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 获取自减后的ID值</span>      <span class="token keyword">int</span> v3 <span class="token operator">=</span> atomicInteger<span class="token punctuation">.</span><span class="token function">decrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"v3："</span><span class="token operator">+</span>v3<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 使用CAS方式，将就旧值更新成 10</span>      <span class="token keyword">boolean</span> v4 <span class="token operator">=</span> atomicInteger<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>v3<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"v4："</span><span class="token operator">+</span>v4<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 使用CAS方式，更新失败的情况</span>      <span class="token keyword">boolean</span> v5 <span class="token operator">=</span> atomicInteger<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>v3<span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"v5: "</span><span class="token operator">+</span>v5<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 先增加再获取</span>      <span class="token keyword">int</span> v6 <span class="token operator">=</span> atomicInteger<span class="token punctuation">.</span><span class="token function">addAndGet</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"v6: "</span><span class="token operator">+</span>v6<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 获取最新值</span>      <span class="token keyword">int</span> v7 <span class="token operator">=</span> atomicInteger<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"v6："</span><span class="token operator">+</span>v7<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">v1：<span class="token number">0</span>v2：<span class="token number">2</span>v3：<span class="token number">1</span>v4：<span class="token boolean">true</span>v5<span class="token operator">:</span> <span class="token boolean">false</span>v6<span class="token operator">:</span> <span class="token number">5</span>v6：<span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="原子操作解决原子性问题"><a class="markdownIt-Anchor" href="#原子操作解决原子性问题"></a> 原子操作解决原子性问题</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 初始化一个原子操作类</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">AtomicInteger</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> threads <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token class-name">CountDownLatch</span> countDownLatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span>threads<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> threads<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// 采用原子性操作累加</span>                    a<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                countDownLatch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 阻塞等待10个线程执行完毕</span>    countDownLatch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 输出结果值</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"结果值："</span> <span class="token operator">+</span> a<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">结果值：<span class="token number">10000</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>从结果可见，原子操作类也可以实现线程安全。关于底层实现原理是CAS操作，这里不再赘述。</p><p>与<code>synchronized</code>和<code>Lock</code>等实现方式相比，原子操作类因为采用无锁的方式实现，因此在某些场景下可以带来更高的执行效率。</p><h5 id="数组类型"><a class="markdownIt-Anchor" href="#数组类型"></a> 数组类型</h5><p>数组类型的原子操作类，<mark>并不是指对数组本身的原子操作，而是对数组中的元素进行原子性操作</mark>，这一点需要特别注意，如果要针对整个数组进行更新，可以采用对象引入数据类型的原子操作类进行处理。JDK提供了以下三个数组类型的原子类：</p><ul><li><code>AtomicIntegerArray</code>：整型数组类型的原子操作类</li><li><code>AtomicLongArray</code>：长整型数组类型的原子操作类</li><li><code>AtomicReferenceArray &lt;T&gt;</code>：引用类型数组类型的原子操作类</li></ul><p>相比与基本类型中的<code>AtomicInteger</code>，方法大致相同，每个方法都增加了一个参数 <code>int i</code>【第一个参数】，表示操作的数组下标。<br />以<code>AmoticIntegerArray</code>为例，其基本用法如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> value <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token class-name">AtomicIntegerArray</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicIntegerArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 将下标为[0]的元素，原子性操作加1</span>    array<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"下标为[0]的元素，更新后的值："</span> <span class="token operator">+</span> array<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">下标为<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>的元素，更新后的值：<span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="引用类型"><a class="markdownIt-Anchor" href="#引用类型"></a> 引用类型</h5><p>上文提到的基本类型只能更新一个变量，如果需要原子性更新多个变量，这个时候可以采用对象引用类型的原子操作类，将多个变量封装到一个对象中。JDK同样提供了以下三种引用类型原子类：</p><ul><li><code>AtomicReference &lt;T&gt;</code>：引用类型原子操作类</li><li><code>AtomicStampedReference &lt;T&gt;</code>：带有版本号的引用类型原子操作类,可以解决ABA问题（即变量从A变成B再变成A的问题，导致无法检测到中间的变化）</li><li><code>AtomicMarkableReference &lt;T&gt;</code>：带有标记位的引用类型原子操作类，可以用于标记对象的某种状态（如是否已处理）</li></ul><div class="markmap-container" style="height:450px">  <svg data="{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[0,1]},&quot;v&quot;:&quot;引用类型&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[1,2]},&quot;v&quot;:&quot;AtomicReference &lt;T&gt;&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[2,3]},&quot;v&quot;:&quot;T get()：获取当前引用的值。&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[3,4]},&quot;v&quot;:&quot;void set(T newValue)：设置当前引用的值为newValue。&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[4,5]},&quot;v&quot;:&quot;T getAndSet(T newValue)：获取当前引用的值，并设置当前引用的值为newValue。&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[5,8]},&quot;v&quot;:&quot;boolean compareAndSet(T expect, T update)：&lt;br&gt;\n如果当前引用的值等于expect，则设置当前引用的值为update，并返回true，&lt;br&gt;\n否则返回false。&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[8,9]},&quot;v&quot;:&quot;AtomicStampedReference &lt;T&gt;&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[9,10]},&quot;v&quot;:&quot;T getReference()：获取当前引用的值。&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[10,11]},&quot;v&quot;:&quot;int getStamp()：获取当前引用的版本号。&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[11,15]},&quot;v&quot;:&quot;boolean compareAndSet(T expectReference, T updateReference, int expectStamp, int updateStamp)：&lt;br&gt;\n如果当前引用的值等于expectReference，并且当前引用的版本号等于expectStamp，&lt;br&gt;\n则设置当前引用的值为updateReference，版本号为updateStamp，并返回true，&lt;br&gt;\n否则返回false。&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[15,16]},&quot;v&quot;:&quot;void set(T newReference, int newStamp)：设置当前引用的值为newReference，版本号为newStamp。&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[16,17]},&quot;v&quot;:&quot;AtomicMarkableReference &lt;T&gt;&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[17,18]},&quot;v&quot;:&quot;T getReference()：获取当前引用的值。&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[18,19]},&quot;v&quot;:&quot;boolean isMarked()：获取当前引用的标记位的值。&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[19,23]},&quot;v&quot;:&quot;boolean compareAndSet(T expectReference, T updateReference, boolean expectMark, boolean updateMark)：&lt;br&gt;\n如果当前引用的值等于expectReference，并且当前引用的标记位的值等于expectMark，&lt;br&gt;\n则设置当前引用的值为updateReference，标记位的值为updateMark，并返回true，&lt;br&gt;\n否则返回false。&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[23,24]},&quot;v&quot;:&quot;void set(T newReference, boolean newMark)：设置当前引用的值为newReference，标记位的值为newMark。&quot;}]}]}"></svg></div><p>以<code>AtomicReference</code>为例，其基本用法如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 设置初始值</span>      <span class="token class-name">AtomicReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> atomicUser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">User</span> user1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      atomicUser<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>user1<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 采用CAS方式，将user1更新成user2</span>      <span class="token class-name">User</span> user2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      atomicUser<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>user1<span class="token punctuation">,</span>user2<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"更新后的对象："</span> <span class="token operator">+</span> atomicUser<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span>  <span class="token class-name">User</span><span class="token punctuation">&#123;</span>      <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>      <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>            <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">return</span> <span class="token string">"User&#123;name = "</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">", age = "</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">"&#125;"</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">更新后的对象：<span class="token class-name">User</span><span class="token punctuation">&#123;</span>name <span class="token operator">=</span> 李四<span class="token punctuation">,</span> age <span class="token operator">=</span> <span class="token number">24</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="字段类型"><a class="markdownIt-Anchor" href="#字段类型"></a> 字段类型</h5><p>某种场景下，可能你只想要原子性更新对象中的某个属性值，此时可以采用字段类型的原子操作类。JKD为我们提供了以下三种字段类型的原子类：</p><ul><li><code>AtomicIntegerFieldUpdater &lt;T&gt;</code>：原子更新整型字段</li><li><code>AtomicLongFieldUpdater &lt;T&gt;</code>：原子更新长整型字段</li><li><code>AtomicReferenceFieldUpdater &lt;T&gt;</code>：原子更新引用类型字段</li></ul><div class="markmap-container" style="height:450px">  <svg data="{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[0,1]},&quot;v&quot;:&quot;字段类型&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[1,2]},&quot;v&quot;:&quot;AtomicIntegerFieldUpdater &lt;T&gt;&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[2,4]},&quot;v&quot;:&quot;AtomicIntegerFieldUpdater&lt;V&gt; newUpdater(Class&lt;T&gt; tclass, String fieldName)：&lt;br&gt;\n创建并返回一个能够原子性更新指定类中指定 int 字段的更新器【静态方法】&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[4,5]},&quot;v&quot;:&quot;int get(T obj)：获取指定对象中字段的当前值。&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[5,6]},&quot;v&quot;:&quot;void set(T obj, int newValue)：将指定对象中字段的值设置为 newValue。&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[6,9]},&quot;v&quot;:&quot;boolean compareAndSet(T obj, int expect, int update)：&lt;br&gt;\n如果 obj 中字段的当前值等于 expect，则将其更新为 update，并返回 true，&lt;br&gt;\n否则返回 false。&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[9,10]},&quot;v&quot;:&quot;AtomicLongFileUpdate &lt;T&gt;&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[10,12]},&quot;v&quot;:&quot;AtomicLongFiledUpdate&lt;T&gt; newUpdate(Class&lt;T&gt; clazz, String fieldName):&lt;br&gt;\n创建并返回一个能够原子性更新指定类中指定 long 字段的更新器【静态方法】&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[12,13]},&quot;v&quot;:&quot;long get(T obj)：获取指定对象中的当前值&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[13,14]},&quot;v&quot;:&quot;void set(T obj, long newValue)：将指定对象中字段的值设置为 newValue。&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[14,17]},&quot;v&quot;:&quot;boolean compareAndSet(T obj, long expect, long update)：&lt;br&gt;\n如果 obj 中字段的当前值等于 expect，则将其更新为 update，并返回 true，&lt;br&gt;\n否则返回 false。&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[17,18]},&quot;v&quot;:&quot;AtomicReferenceFiledUpdater&amp;lt;T, V&amp;gt;&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[18,20]},&quot;v&quot;:&quot;AtomicReferenceFieldUpdater&amp;lt;T, V&amp;gt; newUpdater(Class&lt;T&gt; tclass, Class&lt;V&gt; vclass, String fieldName)：&lt;br&gt;\n创建并返回一个能够原子性更新指定类中指定引用类型字段的更新器【静态方法】&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[20,21]},&quot;v&quot;:&quot;V get(T obj)：获取指定对象中字段的当前值&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[21,22]},&quot;v&quot;:&quot;void set(T obj, V newValue)：将指定对象中字段的值设置为 newValue&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[22,25]},&quot;v&quot;:&quot;boolean compareAndSet(T obj, V expect, V update)：&lt;br&gt;\n如果 obj 中字段的当前值等于 expect，则将其更新为 update，并返回 true，&lt;br&gt;\n否则返回 false。&quot;}]}]}"></svg></div><blockquote><p>需要注意的是：<mark>这些字段类型的原子类需要满足以下条件才可以使用</mark></p><ul><li>被操作的字段不能是 static 类型</li><li>被操作的字段不能是 final 类型</li><li>被操作的字段必须被声明为 volatile 类型</li><li>属性必须对于当前的 Updater 对象可见，简单的说就是尽量使用 public 修饰字段</li></ul></blockquote><p>以<code>AtomicIntegerFieldUpdater</code>为例，构造一个整数类型的属性引用，具体用法如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 设置初始值</span>      <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">AtomicIntegerFieldUpdater</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> updater <span class="token operator">=</span> <span class="token class-name">AtomicIntegerFieldUpdater</span><span class="token punctuation">.</span><span class="token function">newUpdater</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 将 age 的年龄原子性操作加1</span>      updater<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"更新后的属性值："</span> <span class="token operator">+</span> updater<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span>  <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>      <span class="token comment">// age 要用 public、volatile 修饰</span>      <span class="token keyword">public</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">更新后的属性值：<span class="token number">24</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="累加器类型"><a class="markdownIt-Anchor" href="#累加器类型"></a> 累加器类型</h5><p>累加器类型的原子操作类，是从JDK1.8开始加入的，专门用来执行数值类型的数据累加操作，性能更好。</p><blockquote><p>它的实现原理与基本数据类型的原子类略有不同，当多线程竞争时采用分段累加的思路来实现目标值，在多线程环境中，它比基本数据类型的原子类性能要高出不少，特别是写多的场景。</p></blockquote><p>JDK为我们提供了以下四种累加器类型的原子类：</p><ul><li><code>LongAdder</code>：用于累加long类型数据</li><li><code>DoubleAdder</code>：用于累加double类型数据</li><li><code>LongAccumulator</code>：用于累加long类型数据，并且可以自定义函数操作</li><li><code>DoubleAccumulator</code>：用于累加double类型数据，并且可以自定义函数操作</li></ul><p>以<code>LongAdder</code>为例，具体用法如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">LongAdder</span> adder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LongAdder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 自增加 1，默认初始值为0</span>  adder<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  adder<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  adder<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最新值："</span> <span class="token operator">+</span>  adder<span class="token punctuation">.</span><span class="token function">longValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">最新值：<span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="原子操作的底层原理"><a class="markdownIt-Anchor" href="#原子操作的底层原理"></a> 原子操作的底层原理</h4><p>这里不详细介绍其原理，如果你对ThreadLocal类的原理感兴趣，可以先参考：<a href="https://zhuanlan.zhihu.com/p/101430930">CAS机制详解</a></p><h2 id="8线程的通信"><a class="markdownIt-Anchor" href="#8线程的通信"></a> 8.线程的通信</h2><blockquote><p>线程通信是指多个线程之间共享信息或数据，以协调它们的执行。这在并发编程中非常重要，因为需要确保线程之间的正确协作，以避免竞态条件、死锁等问题。</p></blockquote><h3 id="81volatile可见性"><a class="markdownIt-Anchor" href="#81volatile可见性"></a> 8.1.volatile可见性</h3><p>同上，可以解决线程的可见性和有序性问题，但不能保证操作的原子性。</p><h3 id="82锁与同步"><a class="markdownIt-Anchor" href="#82锁与同步"></a> 8.2.锁与同步</h3><p>同上，通过<code>synchronized</code>关键字和<code>Lock</code>锁保证多个线程正确访问共享数据。</p><h3 id="83等待通知机制"><a class="markdownIt-Anchor" href="#83等待通知机制"></a> 8.3.等待/通知机制</h3><p>上面一种是基于&quot;锁&quot;的方式，线程需要不断地去尝试获得锁，如果失败了，再继续尝试。这可能会消耗服务器资源。<br />而基于对象的等待/通知机制是一种更加轻量化的方式，它允许一个或多个线程在满足特定条件下进入等待状态，而在其他线程完成某个操作后通过发送通知的方式唤醒这些等待中的线程。这一机制主要依赖<code>java.lang.Object</code>类提供的<code>wait()</code>、<code>notify()</code>和<code>notifyAll()</code>方法来实现。</p><ul><li><code>wait()</code>：当前线程调用该方法时，会释放当前线程所持有的锁，并进入等待状态，直到其他线程调用<code>notify()</code>或<code>notifyAll()</code>方法唤醒当前线程。</li><li><code>notify()</code>：随机唤醒一个正在等待该对象监视器的线程。</li><li><code>notifyAll()</code>：唤醒所有正在等待该对象监视器的线程。</li></ul><blockquote><p><strong>注意</strong>：<br />在使用等待/通知机制时，必须确保在<code>synchronized</code>修饰的方法或代码块内调用这些方法，因为只有持有对象锁的线程才可以执行它们，否则会抛出<code>IllegalMonitorStateException</code>异常。<br />此外，在调用<code>wait()</code>方法后，线程在被唤醒后需要重新获得锁才能继续执行。<br /><strong>此外</strong>：<br />Lock接口的实现类<code>ReentrantLock</code>也提供了类似的机制。通过实现<code>Condition</code>接口，也可以实现等待/唤醒机制，相比于synchronized使用Object类的三个方法来实现线程的阻塞和运行两个状态的切换，ReentrantLock使用Condition阻塞队列的<code>await()</code>、<code>signal()</code>、<code>signalAll()</code>三个方法来实现线程阻塞和运行两个状态的切换，进而实现线程间的通信。这些方法的使用和synchronized的使用类型，不再赘述。<br /><strong>经典范式(生产者-消费者)</strong>：</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">SharedResource</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> data<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> available <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">produce</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>available<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 如果数据可用，等待消费者消费</span>        <span class="token punctuation">&#125;</span>        data <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Produced: "</span> <span class="token operator">+</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>        available <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 通知消费者可以消费数据</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">consume</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>available<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 如果数据不可用，等待生产者生产</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Consumed: "</span> <span class="token operator">+</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>        available <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 通知生产者可以生产数据</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProducerConsumerExample</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SharedResource</span> resource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SharedResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    resource<span class="token punctuation">.</span><span class="token function">produce</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    resource<span class="token punctuation">.</span><span class="token function">consume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        consumer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Produced</span><span class="token operator">:</span> <span class="token number">1</span><span class="token class-name">Consumed</span><span class="token operator">:</span> <span class="token number">1</span><span class="token class-name">Produced</span><span class="token operator">:</span> <span class="token number">2</span><span class="token class-name">Consumed</span><span class="token operator">:</span> <span class="token number">2</span><span class="token class-name">Produced</span><span class="token operator">:</span> <span class="token number">3</span><span class="token class-name">Consumed</span><span class="token operator">:</span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个示例中：</p><ul><li>生产者线程生成数据并调用produce()方法。produce()方法在数据可用时等待，并在生成新数据后通知消费者。</li><li>消费者线程消费数据并调用consume()方法。consume()方法在数据不可用时等待，并在消费数据后通知生产者。</li></ul><h3 id="84join方法"><a class="markdownIt-Anchor" href="#84join方法"></a> 8.4.join方法</h3><p><code>join( )</code>方法是Java中<code>Thread</code>类的一个关键实例方法，用于同步线程执行。当一个线程调用另一个线程的<code>join( )</code>方法时，当前线程将进入等待状态，直到被调用<code>join( )</code>的线程完成其任务并结束。这在需要确保主线程等待子线程执行完毕之后再继续执行的场景中非常有用。【若在join方法中传入了参数，则是等待调用join()方法的线程执行完毕，或者直到指定的毫秒数之后】</p><p>例如，假设主线程创建了一个耗时计算的任务交给子线程执行，并且主线程希望在子线程完成计算后获取结果：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JoinExample</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">LongRunningTask</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是子线程，开始执行耗时计算..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 模拟耗时操作</span>                <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token function">performComputation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 执行计算</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是子线程，计算完成，结果为: "</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">performComputation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">42</span><span class="token punctuation">;</span> <span class="token comment">// 示例计算结果</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Thread</span> longRunning <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LongRunningTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        longRunning<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 主线程等待子线程完成</span>        longRunning<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 子线程结束后，主线程可以安全地访问子线程的结果（此处假设已通过共享变量或其他机制传递）</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"主线程：子线程已完成，我可以继续执行后续操作了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="85threadlocal类"><a class="markdownIt-Anchor" href="#85threadlocal类"></a> 8.5.ThreadLocal类</h3><p><code>ThreadLocal</code>是一个用于创建线程本地变量的工具类。它通过维护一个内部弱引用的Map来管理每个线程的本地变量。这里不详细介绍其原理，如果你对<code>ThreadLocal</code>类的原理感兴趣，可以先参考：<a href="https://yasinshaw.com/articles?keyword=threadlocal">ThreadLocal类原理</a>。</p><p>一些朋友称<code>ThreadLocal</code>为线程本地变量或线程本地存储。严格来说，<code>ThreadLocal</code>类并不用于多线程间的通信，而是<mark>确保每个线程都有自己&quot;独立&quot;的变量，线程之间互不干扰</mark>。<code>ThreadLocal</code>为每个线程创建一个变量副本，每个线程可以访问自己内部的副本变量。</p><p><code>ThreadLocal</code>类最常用的方法是<code>set</code>方法和<code>get</code>方法。以下是一个示例代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadLocalExample</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 创建一个ThreadLocal变量</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> threadLocalValue <span class="token operator">=</span> <span class="token class-name">ThreadLocal</span><span class="token punctuation">.</span><span class="token function">withInitial</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 创建并启动两个线程</span>        <span class="token class-name">Thread</span> thread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    threadLocalValue<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>threadLocalValue<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> threadLocalValue<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>                threadLocalValue<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> thread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    threadLocalValue<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>threadLocalValue<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> threadLocalValue<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>                threadLocalValue<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span> <span class="token number">2</span><span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span> <span class="token number">4</span><span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span><span class="token operator">:</span> <span class="token number">1</span><span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span> <span class="token number">6</span><span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span> <span class="token number">8</span><span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span> <span class="token number">10</span><span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span><span class="token operator">:</span> <span class="token number">2</span><span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span><span class="token operator">:</span> <span class="token number">3</span><span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span><span class="token operator">:</span> <span class="token number">4</span><span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span><span class="token operator">:</span> <span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注意事项</strong>:</p><ul><li><strong>独立副本</strong>：每个线程都有自己独立的副本变量，线程之间互不干扰。</li><li><strong>内存泄漏</strong>：由于<code>ThreadLocal</code>使用的是弱引用，未及时清理的线程副本变量可能会导致内存泄漏，因此在使用完<code>ThreadLocal</code>变量后，建议调用其<code>remove()</code>方法清理数据。</li></ul></blockquote><h3 id="86管道通信"><a class="markdownIt-Anchor" href="#86管道通信"></a> 8.6.管道通信</h3><p>Java中的管道通信是通过管道输入流和管道输出流来实现的。<mark>这种通信方式主要用于两个线程之间传递数据，管道的一端连接输入流，另一端连接输出流</mark>。JDK提供了<code>PipedInputStream</code>、<code>PipedOutputStream</code>、<code>PipedReader</code>、<code>PipedWriter</code>，前两者实现字节流的管道通信，后两者实现字符流的管道通信。</p><p>管道通信的输入流和输出流通过<code>connect()</code>进行连接，如果没有将输入流和输出流绑定起来，对于该流的访问将会抛出异常【输入流调用方法连接输出流 或者 输出流调用方法连接输入流 任选其一即可】<br /><mark>一个输出流可以绑定到多个输入流，但是一个输入流不能绑定到多个输出流。</mark></p><p><strong>应用场景</strong>：<br />管道通信的使用多半和I/O流有关，当我们一个线程需要先获取另一个线程发送的数据（字符串或文件等），就需要使用管道通信了。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 这里的示例代码使用的是基于字符的：</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Pipe</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ReaderThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name">PipedReader</span> reader<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">ReaderThread</span><span class="token punctuation">(</span><span class="token class-name">PipedReader</span> reader<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>reader <span class="token operator">=</span> reader<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"this is reader"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> receive <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>receive <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>receive<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">WriterThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name">PipedWriter</span> writer<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">WriterThread</span><span class="token punctuation">(</span><span class="token class-name">PipedWriter</span> writer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>writer <span class="token operator">=</span> writer<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"this is writer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> receive <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    writer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">PipedWriter</span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PipedWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">PipedReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PipedReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        writer<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这里注意一定要连接，才能通信</span>        <span class="token comment">//reader.connect(writer);</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ReaderThread</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WriterThread</span><span class="token punctuation">(</span>writer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">this</span> is reader<span class="token keyword">this</span> is writertest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习总结 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Stream流</title>
      <link href="/2024/05/06/stream-liu/"/>
      <url>/2024/05/06/stream-liu/</url>
      
        <content type="html"><![CDATA[<h1 id="java-stream流"><a class="markdownIt-Anchor" href="#java-stream流"></a> Java Stream流</h1><div class="markmap-container" style="height:450px">  <svg data="{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[0,1]},&quot;v&quot;:&quot;Java Stream流&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[1,2]},&quot;v&quot;:&quot;概念&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[2,4]},&quot;v&quot;:&quot;stream是对集合操作的增强，流不是集合的元素，不是一种数据结构，不负责数据的存储流，&lt;br&gt;\n更像是一个迭代器，可以单向的遍历一个集合中的每一个元素 ，并且不可循环【数据源】&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[4,5]},&quot;v&quot;:&quot;&lt;img src=\&quot;https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240506221332.png\&quot; width=\&quot;200\&quot; height=\&quot;100\&quot;&gt;&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[5,6]},&quot;v&quot;:&quot;Stream特性&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[6,7]},&quot;v&quot;:&quot;不存储数据[按照特定的规则对数据进行计算，一般会输出结果]&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[7,8]},&quot;v&quot;:&quot;不会改变数据源[通常情况下会产生一个新的集合或一个值]&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[8,9]},&quot;v&quot;:&quot;具有延迟执行特性[只有调用终端操作时，中间操作才会执行]&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[9,10]},&quot;v&quot;:&quot;Stream的生成&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[10,11]},&quot;v&quot;:&quot;Collection.stream()[同步流]&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[11,12]},&quot;v&quot;:&quot;Collection.parallelStream()[并发、异步流]&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[12,13]},&quot;v&quot;:&quot;Arrays.stream()&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[13,14]},&quot;v&quot;:&quot;Stream的静态方法&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[14,15],&quot;f&quot;:true},&quot;v&quot;:&quot;Stream.of()&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[15,16],&quot;f&quot;:true},&quot;v&quot;:&quot;Stream.iterate()&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[16,17],&quot;f&quot;:true},&quot;v&quot;:&quot;Stream.generate()&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[17,18]},&quot;v&quot;:&quot;文件创建&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[18,19],&quot;f&quot;:true},&quot;v&quot;:&quot;BufferedReader.lines()&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[19,20],&quot;f&quot;:true},&quot;v&quot;:&quot;Files.lines()&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[20,21]},&quot;v&quot;:&quot;其他&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[21,22],&quot;f&quot;:true},&quot;v&quot;:&quot;Pattrn.splitAsStream()&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[22,23],&quot;f&quot;:true},&quot;v&quot;:&quot;JarFile.stream()&quot;}]}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[23,24]},&quot;v&quot;:&quot;中间操作&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[24,25]},&quot;v&quot;:&quot;筛选、去重：filter()、distinct()&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[25,26]},&quot;v&quot;:&quot;映射：map()、flatMap()&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[26,27]},&quot;v&quot;:&quot;排序：sorted()&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[27,28]},&quot;v&quot;:&quot;跳过、截取：skip()、limit()&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[28,29]},&quot;v&quot;:&quot;结合：concat()&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[29,30]},&quot;v&quot;:&quot;调试：peek()&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[30,31]},&quot;v&quot;:&quot;终端操作&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[31,32]},&quot;v&quot;:&quot;遍历：forEach()&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[32,33]},&quot;v&quot;:&quot;匹配：findFirst()、findAny()、anyMatch()、allMatch()、noneMatch()&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[33,34]},&quot;v&quot;:&quot;规约：reducing()&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[34,35]},&quot;v&quot;:&quot;聚合：max()、min()、count()&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[35,36]},&quot;v&quot;:&quot;收集：&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[36,37],&quot;f&quot;:true},&quot;v&quot;:&quot;toArray()&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[37,38],&quot;f&quot;:true},&quot;v&quot;:&quot;toList()&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[38,39],&quot;f&quot;:true},&quot;v&quot;:&quot;collect()&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:10,&quot;p&quot;:{&quot;lines&quot;:[39,40],&quot;f&quot;:true},&quot;v&quot;:&quot;统计：summarizing()[存在各种数据类型]、counting()、averaging()[存在各种数据类型]&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:10,&quot;p&quot;:{&quot;lines&quot;:[40,41],&quot;f&quot;:true},&quot;v&quot;:&quot;分组：groupingBy()、partitioningBy()&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:10,&quot;p&quot;:{&quot;lines&quot;:[41,42],&quot;f&quot;:true},&quot;v&quot;:&quot;接合：joining()&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:10,&quot;p&quot;:{&quot;lines&quot;:[42,43],&quot;f&quot;:true},&quot;v&quot;:&quot;规约：reduce()&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:10,&quot;p&quot;:{&quot;lines&quot;:[43,44],&quot;f&quot;:true},&quot;v&quot;:&quot;归集：toList()、toSet()、toMap()&quot;}]}]}]}]}"></svg></div><h2 id="1概述"><a class="markdownIt-Anchor" href="#1概述"></a> 1.概述</h2><h3 id="11概念"><a class="markdownIt-Anchor" href="#11概念"></a> 1.1.概念</h3><ul><li><strong>Stream不是集合元素，它不是数据结构并不保存数据，它是有关算法和计算的，它更像一个高级版本的Iterator</strong>。原始版本的Iterator，用户只能显式地一个一个遍历元素并对其执行某些操作；高级版本的Stream，用户只要给出需要对其包含的元素执行什么操作，比如，“过滤掉长度大于 10 的字符串”、“获取每个字符串的首字母”等，Stream会隐式地在内部进行遍历，做出相应的数据转换。<strong>Stream就如同一个迭代器（Iterator），单向，不可往复，数据只能遍历一次，遍历过一次后即用尽了</strong>，就好比流水从面前流过，一去不复返。</li><li>而和迭代器又不同的是，<strong>Stream可以并行化操作</strong>，迭代器只能命令式地、串行化操作。顾名思义，当使用串行方式去遍历时，每个item读完后再读下一个item。而使用并行去遍历时，数据会被分成多个段，其中每一个都在不同的线程中处理，然后将结果一起输出。Stream的并行操作依赖于Java7中引入的Fork/Join框架（JSR166y）来拆分任务和加速处理过程。</li><li>Stream 的另外一大特点是，<strong>数据源本身可以是无限的</strong>。</li></ul><h3 id="12stream流的特性"><a class="markdownIt-Anchor" href="#12stream流的特性"></a> 1.2.Stream流的特性</h3><ul><li>不存储数据[按照特定的规则对数据进行计算，一般会输出结果]</li><li>不会改变数据源[通常情况下会产生一个新的集合或一个值]</li><li>具有延迟执行特性[只有调用终端操作时，中间操作才会执行]</li></ul><h3 id="13stream流的作用"><a class="markdownIt-Anchor" href="#13stream流的作用"></a> 1.3.Stream流的作用</h3><p>结合Lambda表达式，简化集合、数组操作，提高代码的效率。</p><h3 id="14stream流的使用步骤"><a class="markdownIt-Anchor" href="#14stream流的使用步骤"></a> 1.4.Stream流的使用步骤</h3><ul><li>获取数据源，将数据源中的数据读取到流中<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240507103133.png" alt="" /></li><li>对流中的数据进行各种各样的处理[筛选、过滤……]    <strong>中间操作</strong>-&gt;方法调用完毕后会返回另一个流，还可以继续调用其他方法[建议使用链式编程]</li><li>对流中的数据进行整合处理[遍历、统计……]    <strong>终端操作</strong>-&gt;方法调用完毕后，流就关闭了，不能再调用其他方法</li></ul><h2 id="2stream的生成"><a class="markdownIt-Anchor" href="#2stream的生成"></a> 2.Stream的生成</h2><h3 id="21collectionstream-collectionparallelstream"><a class="markdownIt-Anchor" href="#21collectionstream-collectionparallelstream"></a> 2.1.Collection.stream()、Collection.parallelStream()</h3><ul><li>通过Collection接口中的<strong>stream</strong>()方法获取数据源为<strong>集合</strong>的流对象【同步流】：<code>Stream&lt;T&gt; stream() = list.stream();</code></li><li>通过Collection接口中的<strong>parallelStream</strong>()方法获取数据源为<strong>集合</strong>的流对象【并发、异步流】：<code>Stream&lt;T&gt; parallelStream() = list.parallelStream();</code></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 创建一个顺序流</span>    <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stream <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"创建一个顺序流"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    stream<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 创建一个并行流</span>    <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> parallelStream <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">parallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"创建一个并行流"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    parallelStream<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*  输出：创建一个顺序流        a        b        c        创建一个并行流        b        c        a* */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>「stream和parallelStream的简单区分」</strong>: stream是顺序流，由主线程按顺序对流执行操作，而parallelStream是并行流，内部以多线程并行执行的方式对流进行操作，但前提是流中的数据处理没有顺序要求。例如筛选集合中的奇数，两者的处理不同之处：<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240507102247.png" alt="" /></p></blockquote><h3 id="22arraysstream"><a class="markdownIt-Anchor" href="#22arraysstream"></a> 2.2.Arrays.stream()</h3><ul><li>通过Arrays工具类中的<strong>stream</strong>(T[] array)方法获取数据源为<strong>数组</strong>的流对象：<code>IntStream stream = Arrays.stream(array);</code>[除了IntStream，还有LongStream、DoubleStream……]</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">IntStream</span> stream <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="23stream的静态方法"><a class="markdownIt-Anchor" href="#23stream的静态方法"></a> 2.3.Stream的静态方法</h3><ul><li>通过Stream工具类中的<strong>of</strong>(T… values)方法获取数据源为<strong>一堆零散数据</strong>的流对象：<code>Stream&lt;T&gt; stream = Stream.of(array);</code></li><li>通过Stream工具类中的<strong>iterate</strong>(T seed, UnaryOperator f)方法获取数据源为<strong>无限</strong>的流对象，其中第一个参数是种子值，第二个参数是一个函数，用于生成后续的元素：<code>Stream&lt;T&gt; stream = Stream.iterate(0, n -&gt; n + 2);</code></li><li>通过Stream工具类中的<strong>generate</strong>(Supplier s)方法获取数据源为<strong>无限</strong>的流对象，其中参数是一个供应商函数，用于生成元素：<code>Stream&lt;T&gt; stream = Stream.generate(Math::random);</code></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stream <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stream<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stream2 <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">iterate</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">-></span> x <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//limit(4)表示只取前4个元素</span>stream2<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Double</span><span class="token punctuation">></span></span> stream3 <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token operator">::</span><span class="token function">random</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//limit(3)表示只取前3个元素</span>stream3<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*输出结果：  使用Stream.of()：  1  2  3  4  使用Stream.iterate()：  0  3  6  9  使用Stream.generate()：  0.34339747950763355  0.8263192360076247  0.6455630248922111 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="24文件创建"><a class="markdownIt-Anchor" href="#24文件创建"></a> 2.4.文件创建</h3><ul><li>BufferedReader.lines()方法获取数据源为<strong>文件</strong>的流对象：<code>Stream&lt;String&gt; stream = new BufferedReader(new FileReader(filePath)).lines();</code></li><li>通过Files工具类中的<strong>lines</strong>(Path path, Charset cs)方法获取数据源为<strong>文件</strong>的流对象：<code>Stream&lt;String&gt; stream = Files.lines(Paths.get(filePath), Charset.forName(charsetName));</code>【安全性更强，推荐使用】</li></ul><blockquote><p>BufferedReader.lines() 和 Files.lines() 都是用于<strong>从文件中逐行读取数据</strong>的方法，但它们的用法和实现细节略有不同。前者需要手动创建 BufferedReader 对象，并在使用完后<strong>手动关闭流</strong>，而后者更为简洁，因为这个方法是Files工具类的一个静态方法，所以不需要手动创建对象，<strong>不需要手动关闭流</strong></p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>        <span class="token comment">// 使用BufferedReader.lines()创建数据源为文件的流</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stream <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">lines</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stream<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 使用Files.lines()创建数据源为文件的流</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> lines <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">lines</span><span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 等价于：Stream&lt;String> lines = Files.lines(Path.of("input.txt"));</span>            lines<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="25其他"><a class="markdownIt-Anchor" href="#25其他"></a> 2.5.其他</h3><ul><li><strong>Pattrn.splitAsStream(CharSequence input)</strong>：是Pattern类中的一个方法，用于将字符串根据指定的正则表达式分割为流对象，其中参数为字符串，返回值为流对象。</li><li><strong>JarFile.stream()</strong>：是JarFile类中的一个方法，用于将Jar文件中的条目(文件)转换为流对象，返回值为流对象。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>        <span class="token comment">// Pattrn.splitAsStream(CharSequence input)</span>        <span class="token comment">// 定义正则表达式</span>        <span class="token class-name">String</span> regex <span class="token operator">=</span> <span class="token string">"\\s+"</span><span class="token punctuation">;</span> <span class="token comment">// 表示一个或多个空白字符</span>        <span class="token comment">// 创建 Pattern 对象</span>        <span class="token class-name">Pattern</span> pattern <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 使用 splitAsStream() 方法分割字符串并返回流,并对流进行遍历操作</span>        pattern<span class="token punctuation">.</span><span class="token function">splitAsStream</span><span class="token punctuation">(</span><span class="token string">"Java is a programming language"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 使用JarFile.stream()</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">JarFile</span> jarFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JarFile</span><span class="token punctuation">(</span><span class="token string">"a.jar"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">JarEntry</span><span class="token punctuation">></span></span> entryStream <span class="token operator">=</span> jarFile<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            entryStream<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>entry <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3中间操作"><a class="markdownIt-Anchor" href="#3中间操作"></a> 3.中间操作</h2><p>中间操作又可以分为<strong>无状态（Stateless）操作</strong>与<strong>有状态（Stateful）操作</strong>，前者是指元素的处理不受之前元素的影响；后者是指该操作只有拿到所有元素之后才能继续下去。<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240508161846.png" alt="" /></p><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td><code>Stream&lt;T&gt; filter(Predicate&lt;? super T&gt; predicate)</code></td><td>过滤流中的元素，返回符合条件的元素组成的流</td></tr><tr><td><code>Stream&lt;T&gt; distinct()</code></td><td>元素去重，返回不含重复的元素的流 【依赖元素的hashCode()和equals()方法，注意判断是否需要进行重写】</td></tr><tr><td><code>Stream&lt;R&gt; map(Function&lt;? super T, ? extends R&gt; mapper)</code></td><td>将流中的元素映射到另一个流中，返回映射后的流 【第一个类型是流中原本的元素类型，第二个类型是映射后的元素类型】</td></tr><tr><td><code>Stream&lt;T&gt; flatMap(Function&lt;? super T, ? extends Stream&lt;? extends T&gt;&gt; mapper)</code></td><td>将流中的元素映射到另一个流中，返回映射后的流，其中映射后的流可以是多个元素组成的流，而不是单个元素。【第一个类型是流中原本的元素类型，第二个类型是映射后的流中元素的类型】</td></tr><tr><td><code>Stream&lt;T&gt; sorted()</code></td><td>对流中的元素进行排序，返回排序后的流</td></tr><tr><td><code>Stream&lt;T&gt; sorted(Comparator&lt;? super T&gt; comparator)</code></td><td>对流中的元素进行排序，返回排序后的流，其中参数为比较器，用于比较元素大小。【依赖元素的compareTo()方法，注意判断是否需要进行重写】</td></tr><tr><td><code>Stream&lt;T&gt; skip(long n)</code></td><td>跳过前n个元素，返回剩余的元素组成的流</td></tr><tr><td><code>Stream&lt;T&gt; limit(long maxSize)</code></td><td>截取前maxSize个元素，返回截取后的流</td></tr><tr><td><code>Stream&lt;T&gt; concat(Stream&lt;? extends T&gt; a, Stream&lt;? extends T&gt; b)</code></td><td>将两个流合并为一个流，返回合并后的流 【如果a和b的类型不同，合并出来的会是他们共同的父类</td></tr><tr><td><code>Stream&lt;T&gt; peek(Consumer&lt;? super T&gt; action)</code></td><td>对流中的元素进行操作，返回操作后的流，但不改变原流。【参数为消费者，用于对元素进行操作】</td></tr></tbody></table><h3 id="31筛选-去重"><a class="markdownIt-Anchor" href="#31筛选-去重"></a> 3.1.筛选、去重</h3><p>filter()和distinct()方法用于筛选和去重流中的元素。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"隔壁老王"</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"隔壁老王"</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"小思思"</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"用filter()筛选名字长度大于2的人物:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        array<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>p <span class="token operator">-></span> p<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"用distinct()去重:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        array<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token comment">/*  用filter()筛选名字长度大于2的人物:  Person&#123;name = 隔壁老王, age = 25&#125;  Person&#123;name = 隔壁老王, age = 25&#125;  Person&#123;name = 小思思, age = 23&#125;   用distinct()去重:  Person&#123;name = 张三, age = 23&#125;  Person&#123;name = 隔壁老王, age = 25&#125;  Person&#123;name = 李四, age = 24&#125;  Person&#123;name = 小思思, age = 23&#125;  */</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="32映射"><a class="markdownIt-Anchor" href="#32映射"></a> 3.2.映射</h3><h4 id="321map-方法"><a class="markdownIt-Anchor" href="#321map-方法"></a> 3.2.1.<strong>map() 方法</strong>：</h4><ul><li><code>map()</code> 方法接受一个函数作为参数，该函数用于将流中的每个元素映射到另一个值。这个映射后的值可以是<strong>任何类型</strong>，最后返回的流包含这些映射后的元素。</li><li>对于每个输入元素，<code>map()</code> 方法都会生成一个对应的输出元素。</li><li><code>map()</code> 方法返回的流与原始流的元素数量相同，但是每个元素都经过了映射函数的转换。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span>               <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">,</span>               <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"隔壁老王"</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">,</span>               <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"小思思"</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 调用map的方法一:</span>       array<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">Person</span> person<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">return</span> person<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 调用map的方法二(lambda表达式):</span>       array<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>p <span class="token operator">-></span> p<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 调用map的方法三(方法引用)</span>       array<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">/*    * 输出：    * 张三    * 隔壁老王    * 小思思   */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="322flatmap-方法"><a class="markdownIt-Anchor" href="#322flatmap-方法"></a> 3.2.2.<strong>flatMap() 方法</strong>：</h4><ul><li><code>flatMap()</code> 方法也接受一个函数作为参数，但是这个函数的返回类型是一个流。这个函数会将流中的每个元素映射到<strong>另一个流</strong>。</li><li>与 <code>map()</code> 方法不同，<code>flatMap()</code> 方法会将这些内部流合并成一个单一的流。内部流中的所有元素都会被合并到结果流中，形成一个扁平化的流。</li><li><code>flatMap()</code> 方法可以处理嵌套的流结构，即使每个元素映射后的流可能包含多个元素，最终返回的流也只是一个单一的流。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//首先初始化输入列表</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list1 <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list2 <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list3 <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span> <span class="token punctuation">></span></span> list4 <span class="token operator">=</span><span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">,</span><span class="token string">"5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>list1<span class="token punctuation">,</span>list2<span class="token punctuation">,</span>list3<span class="token punctuation">,</span>list4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//开始执行操作</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> listT <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token operator">::</span><span class="token function">stream</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>listT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*给定输入：[[1],[2],[3],[4,5]]要求输出：[1,2,3,4,5]*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看一下具体的执行流程。橙色的是stream的通用执行流程，不管你中间态用哪个方法，这里是不变的，蓝色的是<code>ArrayListSpliterator</code>分割器。红色的执行流程是flatMap的执行流程。<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240508125402.png" alt="" /></p><p>可以看到<code>ArrayListSpliterator</code>先取出第一个元素<code>[1]</code>这个一维数组传递给<code>flatMap</code>，然后flatMap执行了我们传入的<code>Collection::stream</code>方法，该方法是初始化一个stream头节点。也就是再生成了一个stream</p><p>重点就是这里了。再次把[1]这个一维数组放入了新的stream里面。然后把结果态节点<code>ReduceOps</code>传递给了新的stream作为新的stream的结果态节点。</p><p>这个时候新的stream开始执行<code>ArrayListSpliterator</code>。从而把[1]一维数组进行for循环，取出了其中的<code>1</code>这个元素，然后把1传入了同一个<code>ReduceOps</code>进行处理从而组成了一个结果list-&gt;[1]。</p><p>把步骤总结如下：</p><p>1.取出二维数组的第一个一维数组<br />2.把一维数组和结果态节点重新创建一个stream<br />3.执行stream把一维数组的元素循环放入结果态的list<br />循环二维数组，不断重复上述步骤，就可以把二维数组展开成一维数组了。</p><h4 id="323map和flatmap的区别"><a class="markdownIt-Anchor" href="#323map和flatmap的区别"></a> 3.2.3.<strong>map()和flatMap()的区别</strong></h4><blockquote><p><strong>总的来说:</strong></p><ul><li><code>map()</code> 方法是一对一的映射，而 <code>flatMap()</code> 方法可以处理一对多的映射，可以将多个流合并成一个流。</li><li><code>map()</code>和<code>faltMap()</code>的参数差别在于，前者传入一个实体返回一个实体，后者则是传入一个实体返回一个Stream流，那既然是流，最好返回值本身就是一个Stream，或者能被转换成Stream的对象!</li></ul></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"Holle world and you world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 调用flatMap的方法一:</span>list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Stream</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">String</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\s+"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 调用flatMap的方法二:</span>list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>t <span class="token operator">-></span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\s+"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* * 输出: Holle  *       world  *       and  *       you  *       world  * flatMap会把按空格拆分后所有的单词流合并成一个流返回.  * 这就意味着，当你调用 forEach(System.out::println) 方法时，它会直接作用于这个合并后的流上，  * 并打印出每个单词。  * */</span>  <span class="token comment">//Map方法</span>  list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>t <span class="token operator">-></span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\s+"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/*输出:java.util.stream.ReferencePipeline$Head@b1bc7ed  而Map方法最后的结果为一个地址，并没有对数组里面的结果进行细分,最后的结果依旧为一个整体  这是因为map里面的参数Stream.of(t.split("\\s+"))会将每个元素映射成一个流,  而map() 方法返回的是一个包含映射后元素的流对象,这个流没有重写`toString`方法  导致返回的是一个包含多个流的流,在使用.forEach方法时,默认打印对象的 toString() 方法的结果。  在这种情况下，由于没有重写 toString() 方法，所以它打印的是默认的对象地址信息。  因为list中只有一个元素,所以外部流对象只包含一个内部流对象,输出一个地址*/</span>  <span class="token comment">/*list.stream().map(new Function&lt;String, String>() &#123;            @Override            public String apply(String s) &#123;                return s.split("\\s+");            &#125;        &#125;).forEach(System.out::println);*/</span>  <span class="token comment">// 在return s.split("\\s+");会报错，是因为split()方法返回的是一个数组，而map()方法要求返回的是一个对象。map并不能处理一对多的映射      </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="33排序"><a class="markdownIt-Anchor" href="#33排序"></a> 3.3.排序</h3><ul><li><code>sorted()</code> 方法用于对流中的元素进行排序。默认情况下，排序是按照自然顺序进行的，即升序。【其中的元素必须实现 Comparable 接口，否则会抛出 ClassCastException 异常】</li><li><code>sorted(Comparator&lt;T&gt; comparator)</code> 方法用于对流中的元素进行排序，并指定排序规则。我们可以使用lambda表达式来创建一个Comparator实例。可以自定义排序规则。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">#自然序排序一个listlist<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  #自然序逆序元素，使用<span class="token class-name">Comparator</span> 提供的<span class="token function">reverseOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 方法list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">reverseOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  # 使用<span class="token class-name">Comparator</span> 来排序一个listlist<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token operator">::</span><span class="token function">getAge</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  # 颠倒使用<span class="token class-name">Comparator</span> 来排序一个list的顺序，使用<span class="token class-name">Comparator</span> 提供的<span class="token function">reversed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 方法list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token operator">::</span><span class="token function">getAge</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reversed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>Comparator.thenComparing(Comparator&lt;? super T&gt; other)</code>: 实现多字段排序，如果第一个比较器比较结果相等，则使用第二个比较器进行比较。可以搭配使用Comparator.reverseOrder() 实现降序和升序</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 按年龄升序，如果年龄相等，再按零花钱升序</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span>userInfo<span class="token punctuation">></span></span> userList3 <span class="token operator">=</span> userList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span>userInfo<span class="token operator">::</span><span class="token function">getAge</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenComparing</span><span class="token punctuation">(</span>userInfo<span class="token operator">::</span><span class="token function">getMoney</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 按年龄降序，如果年龄相等，再按零花钱降序</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span>userInfo<span class="token punctuation">></span></span> userList3 <span class="token operator">=</span> userList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span>userInfo<span class="token operator">::</span><span class="token function">getAge</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenComparing</span><span class="token punctuation">(</span>userInfo<span class="token operator">::</span><span class="token function">getMoney</span><span class="token punctuation">,</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">reverseOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 也可以等价于 .sorted(Comparator.comparing(userInfo::getAge).thenComparing(Comparator.comparing(userInfo::getMoney).reversed()))</span>  <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>自定义排序规则</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 按照名字的长度排序，长的在前面。【如果使用compareTo，是按照字典序排序】</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"lisi"</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span> <span class="token operator">-></span> s2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> s1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="34跳过-截取"><a class="markdownIt-Anchor" href="#34跳过-截取"></a> 3.4.跳过、截取</h3><ul><li><code>skip(long n)</code>：如果流的当前长度大于n，则跳过前n个；否则将会得到一个长度为0的空流。</li><li><code>limit(long n)</code>：参数是一个long型，如果集合当前长度大于参数则进行截取；否则不进行操作。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo10StreamSkip</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> original <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"张无忌"</span><span class="token punctuation">,</span> <span class="token string">"张三丰"</span><span class="token punctuation">,</span> <span class="token string">"周芷若"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> result <span class="token operator">=</span> original<span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 ：流中剩下 "周芷若"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo11StreamLimit</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> original <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"张无忌"</span><span class="token punctuation">,</span> <span class="token string">"张三丰"</span><span class="token punctuation">,</span> <span class="token string">"周芷若"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> result <span class="token operator">=</span> original<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2：截取了 "张无忌" 和 "张三丰"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="35结合"><a class="markdownIt-Anchor" href="#35结合"></a> 3.5.结合</h3><ul><li><code>concat(Stream&lt;? extends T&gt; a, Stream&lt;? extends T&gt; b)</code> : 合并a和b两个流为一个流 【如果a和b的类型不同，合并出来的会是他们共同的父类】</li></ul><blockquote><p>备注：这是一个静态方法，与 java.lang.String 当中的 concat 方法是不同的。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo12StreamConcat</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> streamA <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"张无忌"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> streamB <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"张翠山"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> result <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>streamA<span class="token punctuation">,</span> streamB<span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*输出:        张无忌        张翠山  */</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="36调试"><a class="markdownIt-Anchor" href="#36调试"></a> 3.6.调试</h3><ul><li><code>peek(Comsumer&lt;? super T&gt; action)</code>：它接受一个 Consumer 函数作为参数，该函数会被应用到流中的每个元素上。【不会销毁流对象】</li></ul><blockquote><p>这个方法通常用于调试或记录流中元素的中间状态，或者在调试代码时查看流中元素的值，而不会对流进行实际操作。</p></blockquote><h4 id="361对流中的元素进行遍历"><a class="markdownIt-Anchor" href="#361对流中的元素进行遍历"></a> 3.6.1.对流中的元素进行遍历</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span>userInfo<span class="token punctuation">></span></span> userList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>userList<span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token function">userInfo</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token function">userInfo</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token function">userInfo</span><span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 调用peek()方法遍历流中的元素</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span>userInfo<span class="token punctuation">></span></span> list <span class="token operator">=</span> userList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*输出:userInof&#123;Age = 18, Money = 30&#125;userInof&#123;Age = 18, Money = 34&#125;userInof&#123;Age = 17, Money = 28&#125;[userInof&#123;Age = 18, Money = 30&#125;, userInof&#123;Age = 18, Money = 34&#125;, userInof&#123;Age = 17, Money = 28&#125;]*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="362对流中的对象进行修改"><a class="markdownIt-Anchor" href="#362对流中的对象进行修改"></a> 3.6.2.对流中的对象进行修改</h4><p>在Java的Stream中，它实际上是对原始数据的引用。</p><ul><li>对于基本数据类型：修改只会作用在<code>peek()</code>方法的内部，因为基本数据类型是按值传递的，<code>peek()</code>方法中的参数是局部变量，对它们的修改不会影响到原始数据。所以，对基本数据类型进行的修改只会作用在peek()方法的内部。</li><li>对于引用数据类型：<ul><li>对于不可变对象（如<code>String</code>）：对它们的操作会返回一个新对象，而不会修改原始数据。所以对不可变对象的操作也只会作用在<code>peek()</code>方法的内部，不会影响流中的数据或原始数据。</li><li>对于可变对象（如<code>StringBuilder</code>、自己创建的类<code>userInfo</code>等）：对它们的操作会直接修改原始数据。因此，对可变对象的操作会影响流中的数据以及原始数据。</li></ul></li></ul><blockquote><p><strong>对于流中的对象进行修改：</strong><br />实际上，流中的操作不会直接修改原始数据，而是操作原始数据中的对象。这意味着对流中的对象进行的任何修改都会影响原始数据。然而，需要注意的是，如果流中的对象是不可变对象，对它们进行的修改只会影响到流中的对象，而不会修改原始数据。这种修改只会作用在peek()方法的内部，不会影响到原始数据。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 流中对象是不可变对象String，对其修改只会作用在peek()方法内部，不会影响流中的数据或原始数据</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"banana"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"cherry"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list1<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                s <span class="token operator">+=</span> <span class="token string">"_suffix"</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">// 修改字符串内容</span>        <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*输出：apple_suffixapplebanana_suffix       banana                -> 这里的输出顺序是先运行一次peek()方法，再运行一次forEach()方法，这样子迭代下去的cherry_suffix            因为中间操作peek()属于无状态，所以元素的处理不受之前元素的影响，会直接执行完整条流中的所有操作         cherry[apple, banana, cherry]*/</span><span class="token comment">// 调用peek()方法遍历流中的对象,将用户的年龄加10,注意:这个修改会修改到流中数据和原始数据</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span>userInfo<span class="token punctuation">></span></span> userList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>userList<span class="token punctuation">,</span>      <span class="token keyword">new</span> <span class="token function">userInfo</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token keyword">new</span> <span class="token function">userInfo</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token keyword">new</span> <span class="token function">userInfo</span><span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>userList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span>userInfo <span class="token operator">-></span> userInfo<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*输出:userInof&#123;Age = 28, Money = 30&#125;userInof&#123;Age = 28, Money = 34&#125;userInof&#123;Age = 27, Money = 28&#125;[userInof&#123;Age = 28, Money = 30&#125;, userInof&#123;Age = 28, Money = 34&#125;, userInof&#123;Age = 27, Money = 28&#125;]*/</span><span class="token comment">// 流中对象是StringBuilder类型，属于可变对象，对它们进行的操作会影响流中的数据以及原始数据。</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">StringBuilder</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">"banana"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">"cherry"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span>stringBuilder <span class="token operator">-></span> stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*输出：appleapplebananaapplecherryapple[appleapple, bananaapple, cherryapple]*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="363peek方法的时序图"><a class="markdownIt-Anchor" href="#363peek方法的时序图"></a> 3.6.3.peek()方法的时序图</h4><p>针对前面的代码在peek()方法后执行forEach()方法时，输出顺序是先运行一次peek()方法，再运行一次forEach()方法，这样子迭代下去的这个问题，我们通过时序图来解释。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//首先初始化输入列表</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list1 <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list2 <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list3 <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span> <span class="token punctuation">></span></span> list4 <span class="token operator">=</span><span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"5"</span><span class="token punctuation">,</span><span class="token string">"4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>list1<span class="token punctuation">,</span>list2<span class="token punctuation">,</span>list3<span class="token punctuation">,</span>list4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//开始执行操作</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> listT <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token operator">::</span><span class="token function">stream</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span>e <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>x <span class="token operator">-></span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span>e <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240508120158.png" alt="" /><br />通过时序图我们可以发现，由于中间操作peek()、filter()和flatMap()都是属于无状态，所以在流(Stream)中，对于每个元素，会先执行完整条流中的所有操作，然后才处理下一个元素。这意味着，对于每个元素，先运行完整条流中的操作链，然后再处理下一个元素。而不是等待所有元素的某个操作完成后再进行下一个操作。</p><h4 id="364peek方法的坑"><a class="markdownIt-Anchor" href="#364peek方法的坑"></a> 3.6.4.peek()方法的坑</h4><ul><li><p><strong>坑一：peek() 不影响流的生成和消费</strong><br />peek()是一个中间操作，它并不会终止流的处理流程，因此如果不跟一个终端操作（如collect(), forEach(), count()等），则peek()中的操作不会被执行，换言之，只有当流被消耗时，peek()里的操作才会真正发生。</p></li><li><p><strong>坑二：peek() 的执行次数取决于下游操作</strong><br />peek()方法中的动作会在流的每个元素上执行一次，但具体执行多少次取决于下游的终端操作。例如，如果你在排序(sorted())前使用了peek()，而在排序后又使用了一次peek()，则同一个元素可能会被两次peek()。</p></li><li><p><strong>坑三：并发流中的peek()行为</strong><br />对于并行流，peek()操作的执行顺序没有保证，而且可能会多次执行（取决于JVM的具体调度）。如果你在并行流中依赖peek()的顺序性或唯一性，可能会遇到意想不到的问题。</p></li><li><p><strong>坑四：资源管理</strong><br />如果在peek()中打开了一些资源（如文件、数据库连接等），但在peek()内部并未妥善关闭它们，可能会导致资源泄露。因为在没有终端操作的情况下，流可能不会立即执行，资源也就无法及时释放。</p></li><li><p><strong>坑五：对流元素的修改可能无效</strong><br />peek()通常用于读取或打印流元素，而不是修改它们。虽然理论上可以尝试在peek()中修改元素，但由于流的惰性求值和可能的不可变性，这样的修改可能不会反映到源集合或后续流操作中。</p></li><li><p><strong>坑六：对于可变对象的处理可能会影响流中的数据和原始数据</strong><br />peek()方法通常用于读取或打印流元素，而不是修改它们。然而，如果流中的元素是可变对象，并且在peek()中对其进行了修改，这些修改可能会影响到流中的数据以及原始数据。这是因为可变对象的特性使得对其进行的修改会在流中传递，可能会对后续的操作产生意外的影响。因此，在处理可变对象时，需要格外小心，并确保了解其对流处理的影响。</p></li></ul><h2 id="4终结操作"><a class="markdownIt-Anchor" href="#4终结操作"></a> 4.终结操作</h2><p>结束操作又可以分为<strong>短路操作</strong>与<strong>非短路操作</strong>，前者是指遇到某些符合条件的元素就可以得到最终结果；而后者是指必须处理所有元素才能得到最终结果。<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240508163154.png" alt="" /></p><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td><code>forEach(Consumer&lt;? super T&gt; action)</code></td><td>遍历流中的元素，并对每个元素执行指定的操作。</td></tr><tr><td><code>findFirst()</code></td><td>返回流中的第一个元素，如果流为空，则返回一个空的Optional对象。</td></tr><tr><td><code>findAny()</code></td><td>返回流中的任意一个元素，如果流为空，则返回一个空的Optional对象。</td></tr><tr><td><code>anyMatch(Predicate&lt;? super T&gt; predicate)</code></td><td>判断流中是否存在至少一个元素满足指定的条件。返回一个boolean值。</td></tr><tr><td><code>allMatch(Predicate&lt;? super T&gt; predicate)</code></td><td>判断流中是否所有元素都满足指定的条件。返回一个boolean值。</td></tr><tr><td><code>noneMatch(Predicate&lt;? super T&gt; predicate)</code></td><td>判断流中是否没有元素满足指定的条件。返回一个boolean值。</td></tr><tr><td><code>reduce(BinaryOperator&lt;T&gt; accumulator)</code></td><td>将流中的元素按照指定的规则进行合并，返回合并后的结果。如果流为空，返回的 Optional 对象也为空。</td></tr><tr><td><code>reduce(T identity, BinaryOperator&lt;T&gt; accumulator)</code></td><td>对流中的元素进行累积操作，使用指定的初始值，并返回累积结果。如果流为空，返回的是初始值。</td></tr><tr><td><code>max(Comparator&lt;? super T&gt; comparator)</code></td><td>返回流中最大的元素，如果流为空，则返回一个空的Optional对象。</td></tr><tr><td><code>min(Comparator&lt;? super T&gt; comparator)</code></td><td>返回流中最小的元素，如果流为空，则返回一个空的Optional对象。</td></tr><tr><td><code>count</code></td><td>返回流中元素的数量【long类型】。</td></tr><tr><td><code>toArray()</code></td><td>将流中的元素转换为数组，返回一个数组。</td></tr><tr><td><code>toList()</code></td><td>将流中的元素转换为List，返回一个List。</td></tr><tr><td><code>collect(Collector&lt;? super T, A, R&gt; collector)</code></td><td>将流中的元素收集到一个容器中，返回该容器。方法中的参数<code>A</code>和<code>R</code>表示中间结果容器的类型和最终结果的类型。</td></tr></tbody></table><h3 id="41遍历"><a class="markdownIt-Anchor" href="#41遍历"></a> 4.1.遍历</h3><p><code>forEach(Consumer&lt;? super T&gt; action)</code>：遍历流中的元素，并对每个元素执行指定的操作。【打印、计算、转换……】</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// forEach遍历打印</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list1 <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list1<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// forEach遍历求和</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list2 <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">AtomicInteger</span> sum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//将sum声明为AtomicInteger类型，因为AtomicInteger是原子性的，可以被匿名内部类访问。</span>list2<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> num<span class="token punctuation">)</span> <span class="token operator">-></span> sum<span class="token punctuation">.</span><span class="token function">addAndGet</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Sum: "</span> <span class="token operator">+</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 Sum: 27</span><span class="token comment">// forEach遍历实现字母小写到大写的转换</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> strings <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">,</span> <span class="token string">"cherry"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> upperCaseStrings <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>strings<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token operator">-></span> upperCaseStrings<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Upper case strings: "</span> <span class="token operator">+</span> upperCaseStrings<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 Upper case strings: [APPLE, BANANA, CHERRY]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="42匹配"><a class="markdownIt-Anchor" href="#42匹配"></a> 4.2.匹配</h3><ul><li><code>findFirst()</code>：返回流中的第一个元素，如果流为空，则返回一个空的Optional对象。</li><li><code>findAny()</code>：返回流中的任意一个元素，如果流为空，则返回一个空的Optional对象。</li><li><code>anyMatch(Predicate&lt;? super T&gt; predicate)</code>：判断流中是否存在至少一个元素满足指定的条件。返回一个boolean值。</li><li><code>allMatch(Predicate&lt;? super T&gt; predicate)</code>：判断流中是否所有元素都满足指定的条件。返回一个boolean值。</li><li><code>noneMatch(Predicate&lt;? super T&gt; predicate)</code>：判断流中是否没有元素满足指定的条件。返回一个boolean值。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list1 <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list1<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 输出：Optional[3]</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list1<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findAny</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：Optional[3]</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list1<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">anyMatch</span><span class="token punctuation">(</span>x <span class="token operator">-></span> x <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 输出：true</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list1<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">allMatch</span><span class="token punctuation">(</span>x <span class="token operator">-></span> x <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 输出：false</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list1<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">noneMatch</span><span class="token punctuation">(</span>x <span class="token operator">-></span> x <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 输出：false</span><span class="token comment">// 如果流为空，则返回的 Optional 对象也为空。</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list2 <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list2<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：Optional.empty</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list2<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findAny</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 输出：Optional.empty</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list2<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">anyMatch</span><span class="token punctuation">(</span>x <span class="token operator">-></span> x <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 输出：false</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list2<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">allMatch</span><span class="token punctuation">(</span>x <span class="token operator">-></span> x <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：true</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list2<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">noneMatch</span><span class="token punctuation">(</span>x <span class="token operator">-></span> x <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 输出：true</span><span class="token comment">// 如果list是null,在执行流操作时，会抛出NullPointerException异常。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="43规约"><a class="markdownIt-Anchor" href="#43规约"></a> 4.3.规约</h3><ul><li><code>reduce(BinaryOperator&lt;T&gt; accumulator)</code>：将流中的元素按照指定的规则进行合并，返回合并后的结果。如果流为空，返回的 Optional 对象也为空。<ul><li>参数：<code>BinaryOperator&lt;T&gt; accumulator</code>,<code>BinaryOperator</code>继承于 <code>BiFunction</code>, 这里实现 <code>BiFunction.apply(param1,param2)</code> 接口即可。支持lambda表达式，形如：(result,item)-&gt;{…} 。</li><li>返回值：返回Optional对象，由于结果存在空指针的情况（当集合为空时）因此需要使用Optional。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list<span class="token operator">=</span><span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将数组进行累加求和</span><span class="token comment">//由于返回的是 Optional ，因此需要get()取出值。</span><span class="token class-name">Integer</span> total<span class="token operator">=</span>list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span>item<span class="token punctuation">)</span><span class="token operator">-></span>result<span class="token operator">+</span>item<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span> <span class="token comment">// 输出：15</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> strings <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">,</span> <span class="token string">"World"</span><span class="token punctuation">,</span> <span class="token string">"!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用 reduce 方法将字符串列表中的字符串拼接成一个新的字符串</span> <span class="token class-name">String</span> result <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>partialResult<span class="token punctuation">,</span> str<span class="token punctuation">)</span> <span class="token operator">-></span> partialResult <span class="token operator">+</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：Hello World!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><code>reduce(T identity, BinaryOperator&lt;T&gt; accumulator)</code>：对流中的元素进行累积操作，使用指定的初始值，并返回累积结果。如果流为空，返回的是初始值.<ul><li>参数1：T identity 为一个初始值（默认值） ，当集合为空时，就返回这个默认值，当集合不为空时，该值也会参与计算。</li><li>参数2：BinaryOperator<T> accumulator 这个与一个参数的reduce相同。</li><li>返回值：并非 Optional，由于有默认值 identity ，因此计算结果不存在空指针的情况。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list<span class="token operator">=</span><span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> total<span class="token operator">=</span>list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span>item<span class="token punctuation">)</span><span class="token operator">-></span>result<span class="token operator">+</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结果为：15 </span>list<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>total<span class="token operator">=</span>list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span>item<span class="token punctuation">)</span><span class="token operator">-></span>result<span class="token operator">+</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//数组为空时，结果返回默认值0  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><code>reduce(U identity, BiFunction&lt;U, ? super T, U&gt; accumulator,BinaryOperator&lt;U&gt; combiner)</code>：这个方法允许更复杂的规约操作，可以用于计算任意类型的累加器值，而不仅仅是原始数据类型。同时，<strong>由于存在并行执行的可能性，需要确保累加器函数和组合器函数的实现是线程安全的</strong>。<ul><li>第一个参数和第二个参数的定义同上，第三个参数比较特殊，后面慢慢讲。</li><li>可以看到该方法有两个泛型 T 和 U ：<br />（1）泛型T是集合中元素的类型，<br />（2）泛型U是计算之后返回结果的类型，U的类型由第一个参数 identity 决定。<br />也就是说，三个参数的reduce()可以返回与集合中的元素不同类型的值，方便我们对复杂对象做计算式和转换。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> list<span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>              <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>              <span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>              <span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"王五"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>              <span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"小明"</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>              <span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"小红"</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> total<span class="token operator">=</span>list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>                <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment">/*初始值 identity*/</span>                <span class="token punctuation">,</span><span class="token punctuation">(</span>integer<span class="token punctuation">,</span> person<span class="token punctuation">)</span><span class="token operator">-></span>integer<span class="token operator">+</span> person<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">/*累加计算 accumulator*/</span>                <span class="token punctuation">,</span><span class="token punctuation">(</span>integer1<span class="token punctuation">,</span>integer2<span class="token punctuation">)</span><span class="token operator">-></span>integer1<span class="token operator">+</span>integer2 <span class="token comment">/*第三个参数 combiner*/</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结果：15</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>其实这相当于<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Integer</span> total<span class="token operator">=</span>list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mapToInt</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token operator">::</span><span class="token function">getAge</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结果也是：15  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><p>第三个参数 <code>BinaryOperator&lt;U&gt; combiner</code> 是个什么鬼？<br />这个参数的lambda表达式我是这么写的：<code>(integer1,integer2)-&gt;integer1+integer2</code><br />现在我将其打印出来：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Integer</span> total<span class="token operator">=</span>list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>                <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                <span class="token punctuation">,</span><span class="token punctuation">(</span>integer<span class="token punctuation">,</span> person<span class="token punctuation">)</span><span class="token operator">-></span>integer<span class="token operator">+</span> person<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">,</span><span class="token punctuation">(</span>integer1<span class="token punctuation">,</span>integer2<span class="token punctuation">)</span><span class="token operator">-></span> <span class="token punctuation">&#123;</span>                    <span class="token comment">//这个println居然没有执行！！！</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"integer1="</span> <span class="token operator">+</span> integer1 <span class="token operator">+</span> <span class="token string">", integer2="</span> <span class="token operator">+</span> integer2<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> integer1 <span class="token operator">+</span> integer2<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结果：15</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发现这个参数的lambda表达式根本就没有执行？！<br />我换了一种方式，换成 parallelStream ，然后把线程id打印出来：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Integer</span> total<span class="token operator">=</span>list<span class="token punctuation">.</span><span class="token function">parallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>                  <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                <span class="token punctuation">,</span><span class="token punctuation">(</span>integer<span class="token punctuation">,</span> person<span class="token punctuation">)</span><span class="token operator">-></span>integer<span class="token operator">+</span> person<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">,</span><span class="token punctuation">(</span>integer1<span class="token punctuation">,</span>integer2<span class="token punctuation">)</span><span class="token operator">-></span> <span class="token punctuation">&#123;</span>                      <span class="token comment">//由于用的 parallelStream ，可发生并行计算，所以我增加线程id的打印：</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"threadId="</span><span class="token operator">+</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">", integer1="</span><span class="token operator">+</span>integer1<span class="token operator">+</span><span class="token string">", integer2="</span><span class="token operator">+</span>integer2<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> integer1 <span class="token operator">+</span> integer2<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*结果如下：threadId=1, integer1=4, integer2=5threadId=30, integer1=1, integer2=2threadId=1, integer1=3, integer2=9threadId=1, integer1=3, integer2=1215*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>把 stream 换成并行的 parallelStream，<br />可以看出，有两个线程在执行任务：线程1和线程30 ，<br />每个线程会分配几个元素做计算，<br />如上面的线程30分配了元素1和2，线程1分配了3、4、5。<br />至于线程1为什么会有两个3，是由于线程30执行完后得到的结果为3（1+2），而这个3又会作为后续线程1的入参进行汇总计算。<br />可以多跑几次，每次执行的结果不一定相同，如果看不出来规律，可以尝试增加集合中的元素个数，数据量大更有利于并行计算发挥作用。</p><p><mark>因此，第三个参数 <code>BinaryOperator&lt;U&gt; combiner</code> 的作用为：汇总所有线程的计算结果得到最终结果，</mark><br />并行计算会启动多个线程执行同一个计算任务，每个线程计算完后会有一个结果，最后要将这些结果汇总得到最终结果。</p><p>我们再来看一个有意思的结果，把第一个参数 identity 从0换成1：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Integer</span> total<span class="token operator">=</span>list<span class="token punctuation">.</span><span class="token function">parallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>                    <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">,</span><span class="token punctuation">(</span>integer<span class="token punctuation">,</span> person<span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"$ threadId="</span><span class="token operator">+</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">", integer="</span><span class="token operator">+</span>integer<span class="token operator">+</span><span class="token string">", scoreBean.getScore()="</span><span class="token operator">+</span>person<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token keyword">return</span> integer<span class="token operator">+</span> person<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>                  <span class="token punctuation">,</span><span class="token punctuation">(</span>integer1<span class="token punctuation">,</span>integer2<span class="token punctuation">)</span><span class="token operator">-></span> <span class="token punctuation">&#123;</span>                            <span class="token comment">//由于用的 parallelStream ，可发生并行计算，所以我增加线程id的打印：</span>                      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"threadId="</span><span class="token operator">+</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">", integer1="</span><span class="token operator">+</span>integer1<span class="token operator">+</span><span class="token string">", integer2="</span><span class="token operator">+</span>integer2<span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token keyword">return</span> integer1 <span class="token operator">+</span> integer2<span class="token punctuation">;</span>                  <span class="token punctuation">&#125;</span>          <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/*结果如下：  $ threadId=30, integer=1, scoreBean.getScore()=2  $ threadId=1, integer=1, scoreBean.getScore()=3  $ threadId=32, integer=1, scoreBean.getScore()=5  $ threadId=33, integer=1, scoreBean.getScore()=4  $ threadId=31, integer=1, scoreBean.getScore()=1  threadId=33, integer1=5, integer2=6  threadId=31, integer1=2, integer2=3  threadId=33, integer1=4, integer2=11  threadId=33, integer1=5, integer2=15  20*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>预期结果应该是16（初始值1+原来的结果15），但实际结果为20，多加了4次1，猜测是多加了四次初始值，<br />从打印的结果可以发现：<br />（1）并行计算时用了5个线程（线程id依次为：30, 1, 32, 33, 31），汇总合并时用了两个线程（线程id为33和31）<br />（2）并行计算的每一个线程都用了初始值参与计算，因此多加了4次初始值。</p><blockquote><p>总结：<br />使用 parallelStream 时，初始值 identity 应该设置一个不影响计算结果的值，比如本示例中设置为 0 就不会影响结果。<br />我觉得这个初始值 identity 有两个作用：<code>确定泛型U的类型</code> 和 <code>避免空指针</code>。<br />但是如果初始值本身就是一个复杂对象那该怎么办呢？<br />比如是初始值是一个数组，那么应该设定为一个空数组。如果是其他复杂对象那就得根据你reduce的具体含义来设定初始值了。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">combiner<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> accumulator<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>identity<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> accumulator<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token comment">//combiner.apply(u1,u2) 接收两个相同类型U的参数 </span><span class="token comment">//accumulator.apply(u, t) 接收两个不同类型的参数U和T，U是返回值的类型，T是集合中元素的类型</span><span class="token comment">//这个等式恒等，parallelStream计算时就不会产生错误结果</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="44聚合"><a class="markdownIt-Anchor" href="#44聚合"></a> 4.4.聚合</h3><ul><li><code>max(Comparator&lt;? super T&gt; comparator)</code>: 返回流中最大的元素，如果流为空，则返回一个空的Optional对象。</li><li><code>max(Comparator&lt;? super T&gt; comparator)</code>: 返回流中最小的元素，如果流为空，则返回一个空的Optional对象。</li><li><code>count()</code>: 返回个数【long类型】</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">compare</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 输出：Optional[5]</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">intValue</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 输出：1</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 输出：5</span>  list <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">compare</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 输出：Optional.empty</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="45收集"><a class="markdownIt-Anchor" href="#45收集"></a> 4.5.收集</h3><h4 id="451toarray"><a class="markdownIt-Anchor" href="#451toarray"></a> 4.5.1.toArray</h4><ul><li><code>toArray()</code>: 返回一个Object[]数组，其中包含Stream中的所有元素。</li><li><code>toArray(IntFunction&lt;A[]&gt; generator)</code>：可以指定返回数组的类型。参数 generator 是一个数组生成器函数，它根据提供的数组长度创建一个新数组。这使得我们可以在返回的数组中指定元素的类型。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>             <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">,</span>             <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">,</span>             <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"王五"</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">)</span>     <span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array1 <span class="token operator">=</span>list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>array1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 输出：[Person&#123;name = 张三, age = 23&#125;, Person&#123;name = 李四, age = 24&#125;, Person&#123;name = 王五, age = 25&#125;]</span>     <span class="token class-name">Person</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array2 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span>v <span class="token operator">-></span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>array2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 输出：[Person&#123;name = 张三, age = 23&#125;, Person&#123;name = 李四, age = 24&#125;, Person&#123;name = 王五, age = 25&#125;]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="452tolist"><a class="markdownIt-Anchor" href="#452tolist"></a> 4.5.2.toList</h4><ul><li><code>toList()</code>: 返回一个包含Stream中所有元素的List。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">434</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 输出：[32, 11, 23, 434, 54]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="453collect"><a class="markdownIt-Anchor" href="#453collect"></a> 4.5.3.collect</h4><ul><li><code>collect(Collector&lt;? super T, A, R&gt; collector)</code>: 将Stream中的元素收集到一个容器中，并返回该容器。</li></ul><h5 id="4531统计"><a class="markdownIt-Anchor" href="#4531统计"></a> 4.5.3.1.统计</h5><ul><li><code>Collectors.counting()</code>: 返回流中元素的个数。</li><li><code>Collectors.summingInt(ToIntFunction&lt;? super T&gt; mapper)</code>: 返回流中元素的和。</li><li><code>Collectors.summingDouble(ToDoubleFunction&lt;? super T&gt; mapper)</code>: 返回流中元素的和。</li><li><code>Collectors.summingLong(ToLongFunction&lt;? super T&gt; mapper)</code>: 返回流中元素的和。</li><li><code>Collectors.averagingInt(ToIntFunction&lt;? super T&gt; mapper)</code>: 返回流中元素的平均值。</li><li><code>Collectors.averagingDouble(ToDoubleFunction&lt;? super T&gt; mapper)</code>: 返回流中元素的平均值。</li><li><code>Collectors.averagingLong(ToLongFunction&lt;? super T&gt; mapper)</code>: 返回流中元素的平均值。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> numbers <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 个数</span><span class="token class-name">Long</span> collect <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">counting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"collect = "</span> <span class="token operator">+</span> collect<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// collect = 5</span><span class="token comment">// 求和</span><span class="token keyword">int</span> sum <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">summingInt</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">intValue</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Sum: "</span> <span class="token operator">+</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Sum: 15</span><span class="token comment">// 平均值</span><span class="token keyword">double</span> average <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">averagingInt</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">intValue</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Average: "</span> <span class="token operator">+</span> average<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Average: 3.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4532分组"><a class="markdownIt-Anchor" href="#4532分组"></a> 4.5.3.2分组</h5><ul><li><code>Collectors.groupingBy(Function&lt;? super T, ? extends K&gt; classifier)</code>: 根据给定的分类函数对Stream中的元素进行分组，并返回一个Map，其中键是分类函数的结果，值是包含对应分类的元素的List。</li><li><code>Collectors.partitioningBy(Predicate&lt;? super T&gt; predicate)</code>: 根据给定的断言函数对Stream中的元素进行分区，并返回一个Map，其中键是true和false，值是包含对应分类的元素的List。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> words <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">,</span> <span class="token string">"orange"</span><span class="token punctuation">,</span> <span class="token string">"grape"</span><span class="token punctuation">,</span> <span class="token string">"cherry"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 按单词的首字母分组</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> groupedByFirstLetter <span class="token operator">=</span> words<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span>word <span class="token operator">-></span> word<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Grouped by first letter: "</span> <span class="token operator">+</span> groupedByFirstLetter<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 输出：Grouped by first letter: &#123;a=[apple], b=[banana], c=[cherry], g=[grape], o=[orange]&#125;</span><span class="token comment">// 按单词的长度进行分区</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> partitionedByLength <span class="token operator">=</span> words<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">partitioningBy</span><span class="token punctuation">(</span>word <span class="token operator">-></span> word<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Partitioned by length (>5): "</span> <span class="token operator">+</span> partitionedByLength<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出：Partitioned by length (>5): &#123;false=[apple, grape], true=[banana, orange, cherry]&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4533连接"><a class="markdownIt-Anchor" href="#4533连接"></a> 4.5.3.3连接</h5><ul><li><code>Collectors.joining(CharSequence delimiter)</code>: 将stream中的元素用特定的连接符（没有的话，则直接连接）连接成一个字符串。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>        <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"王五"</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">)</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> collect <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>p <span class="token operator">-></span> p<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collect<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 张三,李四,王五</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list1 <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span><span class="token string">"B"</span><span class="token punctuation">,</span><span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> collect1 <span class="token operator">=</span> list1<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collect1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// A-B-C</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4534规约"><a class="markdownIt-Anchor" href="#4534规约"></a> 4.5.3.4.规约</h5><p>Collectors类提供的reducing方法，相比于stream本身的reduce方法，增加了对自定义归约的支持。</p><ul><li><strong><code>Collectors.reducing(BinaryOperator&lt;T&gt; op)</code></strong>：这是最基本的 <code>reducing</code> 方法。它接受一个二元运算符，对流中的所有元素进行归约。该方法将返回一个收集器Optional，它使用提供的运算符对流中的元素进行归约。</li><li><strong><code>Collectors.reducing(T identity, BinaryOperator&lt;T&gt; op)</code></strong>：此方法是 <code>reducing</code> 方法的扩展，允许你指定一个初始值。提供的初始值将用作归约操作的起始值。如果流为空，则结果将是提供的初始值。</li><li><strong><code>Collectors.reducing(U identity, Function&lt;? super T, ? extends U&gt; mapper, BinaryOperator&lt;U&gt; op)</code></strong>：这个方法允许你在进行归约之前先将元素映射到另一种类型。你可以指定一个映射函数，并提供一个初始值。然后，它将使用映射函数将元素映射为指定类型，再使用提供的初始值对映射后的结果进行归约。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 只传一个参数：定义运算规则</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">reducing</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">sum</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Optional[10]</span><span class="token comment">// 等价于：System.out.println(list.stream().reduce(Integer::sum));</span><span class="token comment">// 传递两个参数：定义一个初始值和运算规则</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">reducing</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">sum</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 10</span><span class="token comment">// 等价于：System.out.println(list.stream().reduce(0, Integer::sum));</span><span class="token comment">// 传递三个参数：定义一个初始值、映射函数和运算规则</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">reducing</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> x <span class="token operator">-></span> x <span class="token operator">*</span> x<span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">sum</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//10</span><span class="token comment">// 等价于：System.out.println(list.stream().map(x -> x * x).reduce(0, Integer::sum));先映射在规约</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4535归集"><a class="markdownIt-Anchor" href="#4535归集"></a> 4.5.3.5.归集</h5><ul><li><code>Collectors.toList()</code>: 将Stream中的元素收集到一个List中，并返回该List,元素可以重复,有序。</li><li><code>Collectors.toSet()</code>: 将Stream中的元素收集到一个Set中，并返回该Set，元素不能重复，无序</li><li><code>Collectors.toMap(Function&lt;? super T, ? extends K&gt; keyMapper, Function&lt;? super T, ? extends U&gt; valueMapper)</code>: 将Stream中的元素收集到一个Map中，并返回该Map。如果键重复会抛出 IllegalStateException 异常<ul><li>参数一表示键的生成规则</li><li>参数二表示值的生成规则</li><li><strong>Function</strong><ul><li>泛型一：表示流中每一个数据的类型</li><li>泛型二：表示Map集合中键的数据类型</li></ul></li><li><strong>重写方法apply</strong><ul><li>形参：依次表示流里面的每一个数据</li><li>方法体：生成键/值的代码</li><li>返回值：已经生成的键/值</li></ul></li></ul></li><li><code>Collectors.toMap(Function&lt;? super T, ? extends K&gt; keyMapper, Function&lt;? super T, ? extends U&gt; valueMapper, BinaryOperator&lt;U&gt; mergeFunction)</code>: 收集到 Map 集合中，允许指定一个合并函数来处理键冲突。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token string">"张无忌-男-15"</span><span class="token punctuation">,</span> <span class="token string">"周芷若-女-14"</span><span class="token punctuation">,</span> <span class="token string">"赵敏-女-13"</span><span class="token punctuation">,</span> <span class="token string">"张强-男-20"</span><span class="token punctuation">,</span>        <span class="token string">"张三丰-男-100"</span><span class="token punctuation">,</span> <span class="token string">"张翠山-男-40"</span><span class="token punctuation">,</span> <span class="token string">"张良-男-35"</span><span class="token punctuation">,</span> <span class="token string">"王二麻子-男-37"</span><span class="token punctuation">,</span> <span class="token string">"谢广坤-男-41"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//收集List集合当中</span><span class="token comment">//需求：</span><span class="token comment">//我要把所有的男性收集起来</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> newList1 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>s <span class="token operator">-></span> <span class="token string">"男"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>newList1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [张无忌-男-15, 张强-男-20, 张三丰-男-100, 张翠山-男-40, 张良-男-35, 王二麻子-男-37, 谢广坤-男-41]</span><span class="token comment">//收集Set集合当中</span><span class="token comment">//需求：</span><span class="token comment">//我要把所有的男性收集起来</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> newList2 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>s <span class="token operator">-></span> <span class="token string">"男"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>newList2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [张强-男-20, 张良-男-35, 张三丰-男-100, 张无忌-男-15, 谢广坤-男-41, 张翠山-男-40, 王二麻子-男-37]</span><span class="token comment">//收集Map集合当中</span><span class="token comment">//我要把所有的男性收集起来</span><span class="token comment">//键：姓名。 值：年龄</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>s <span class="token operator">-></span> <span class="token string">"男"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span>          <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token annotation punctuation">@Override</span>              <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token annotation punctuation">@Override</span>              <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123;张强=20, 张良=35, 张翠山=40, 王二麻子=37, 张三丰=100, 张无忌=15, 谢广坤=41&#125;</span><span class="token comment">// lambda表达式简化</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> map2 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>s <span class="token operator">-></span> <span class="token string">"男"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span>                s <span class="token operator">-></span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                s <span class="token operator">-></span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123;张强=20, 张良=35, 张翠山=40, 王二麻子=37, 张三丰=100, 张无忌=15, 谢广坤=41&#125;</span><span class="token comment">// 收集到 Map 集合中，处理键冲突</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> persons <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>                <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Alice"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Bob"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Alice"</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> personMapWithMergeFunction <span class="token operator">=</span> persons<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">,</span> <span class="token class-name">Person</span><span class="token operator">::</span><span class="token function">getAge</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>existing<span class="token punctuation">,</span> replacement<span class="token punctuation">)</span> <span class="token operator">-></span> existing<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 如果已经存在，保留原先存在的值</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>personMapWithMergeFunction<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123;Alice=30, Bob=25&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5java-stream-底层实现"><a class="markdownIt-Anchor" href="#5java-stream-底层实现"></a> 5.Java Stream 底层实现</h2><p><strong>参考文章：</strong><a href="https://www.cnblogs.com/CarpenterLee/p/6637118.html">深入理解Java Stream流水线</a></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习总结 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-IO流</title>
      <link href="/2024/05/05/java-io-liu/"/>
      <url>/2024/05/05/java-io-liu/</url>
      
        <content type="html"><![CDATA[<h2 id="java-io流"><a class="markdownIt-Anchor" href="#java-io流"></a> Java IO流</h2><div class="markmap-container" style="height:400px">  <svg data="{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[0,1]},&quot;v&quot;:&quot;Java IO流&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[1,2]},&quot;v&quot;:&quot;Java IO 基础知识&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[2,3],&quot;f&quot;:true},&quot;v&quot;:&quot;概述&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[3,6],&quot;f&quot;:true},&quot;v&quot;:&quot;IO 即 Input/Output，输入和输出。&lt;br&gt;\n数据输入到计算机内存的过程即输入，反之输出到外部存储（比如数据库，文件，远程主机）的过程即输出。&lt;br&gt;\n数据传输过程类似于水流，因此称为 IO 流。&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[6,7],&quot;f&quot;:true},&quot;v&quot;:&quot;关系图&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:10,&quot;p&quot;:{&quot;lines&quot;:[7,8],&quot;f&quot;:true},&quot;v&quot;:&quot;InputStream &lt;img src=\&quot;https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240505131542.png\&quot; alt=\&quot;\&quot;&gt;&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:10,&quot;p&quot;:{&quot;lines&quot;:[8,9],&quot;f&quot;:true},&quot;v&quot;:&quot;OutputStream &lt;img src=\&quot;https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240505131750.png\&quot; alt=\&quot;\&quot;&gt;&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:10,&quot;p&quot;:{&quot;lines&quot;:[9,10],&quot;f&quot;:true},&quot;v&quot;:&quot;Reader &lt;img src=\&quot;https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240505132056.png\&quot; alt=\&quot;\&quot;&gt;&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:10,&quot;p&quot;:{&quot;lines&quot;:[10,11],&quot;f&quot;:true},&quot;v&quot;:&quot;Writer &lt;img src=\&quot;https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240505132130.png\&quot; alt=\&quot;\&quot;&gt;&quot;}]}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[11,12],&quot;f&quot;:true},&quot;v&quot;:&quot;字节流&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[12,13],&quot;f&quot;:true},&quot;v&quot;:&quot;InputStream(字节输入流)&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:10,&quot;p&quot;:{&quot;lines&quot;:[13,14],&quot;f&quot;:true},&quot;v&quot;:&quot;FileInputStream(文件字节输入流)&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:10,&quot;p&quot;:{&quot;lines&quot;:[14,15],&quot;f&quot;:true},&quot;v&quot;:&quot;DataInputStream(数据输入流)&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:10,&quot;p&quot;:{&quot;lines&quot;:[15,16],&quot;f&quot;:true},&quot;v&quot;:&quot;ObjectInputStream(对象输入流)&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[16,17],&quot;f&quot;:true},&quot;v&quot;:&quot;OutputStream(字节输出流)&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:10,&quot;p&quot;:{&quot;lines&quot;:[17,18],&quot;f&quot;:true},&quot;v&quot;:&quot;FileOutputStream(文件字节输出流)&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:10,&quot;p&quot;:{&quot;lines&quot;:[18,19],&quot;f&quot;:true},&quot;v&quot;:&quot;DataOutputStream(数据输出流)&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:10,&quot;p&quot;:{&quot;lines&quot;:[19,20],&quot;f&quot;:true},&quot;v&quot;:&quot;ObjectOutputStream(对象输出流)&quot;}]}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[20,21],&quot;f&quot;:true},&quot;v&quot;:&quot;字符流&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[21,22],&quot;f&quot;:true},&quot;v&quot;:&quot;Reader(字符输入流)&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:10,&quot;p&quot;:{&quot;lines&quot;:[22,23],&quot;f&quot;:true},&quot;v&quot;:&quot;InputStreamReader(转换流)&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:10,&quot;p&quot;:{&quot;lines&quot;:[23,24],&quot;f&quot;:true},&quot;v&quot;:&quot;FileReader(文件字符输入流)&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[24,25],&quot;f&quot;:true},&quot;v&quot;:&quot;Writer(字符输出流)&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:10,&quot;p&quot;:{&quot;lines&quot;:[25,26],&quot;f&quot;:true},&quot;v&quot;:&quot;OutputStreamWriter(转换流)&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:10,&quot;p&quot;:{&quot;lines&quot;:[26,27],&quot;f&quot;:true},&quot;v&quot;:&quot;FileWriter(文件字符输出流)&quot;}]}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[27,28],&quot;f&quot;:true},&quot;v&quot;:&quot;字节缓冲流&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[28,29],&quot;f&quot;:true},&quot;v&quot;:&quot;BufferedInputStream(字节缓冲输入流)&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[29,30],&quot;f&quot;:true},&quot;v&quot;:&quot;BufferedOutputStream(字节缓冲输出流)&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[30,31],&quot;f&quot;:true},&quot;v&quot;:&quot;字符缓冲流&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[31,32],&quot;f&quot;:true},&quot;v&quot;:&quot;BufferedReader(字符缓冲输入流)&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[32,33],&quot;f&quot;:true},&quot;v&quot;:&quot;BufferedWriter(字符缓冲输出流)&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[33,34],&quot;f&quot;:true},&quot;v&quot;:&quot;打印流&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[34,35],&quot;f&quot;:true},&quot;v&quot;:&quot;PrintStream(打印流)&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[35,36],&quot;f&quot;:true},&quot;v&quot;:&quot;PrintWriter(打印流)&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[36,37],&quot;f&quot;:true},&quot;v&quot;:&quot;随机访问流&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[37,38],&quot;f&quot;:true},&quot;v&quot;:&quot;RandomAccessFile&quot;}]}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[38,39]},&quot;v&quot;:&quot;Java IO 设计模式&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[39,40],&quot;f&quot;:true},&quot;v&quot;:&quot;装饰器模式&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[40,41],&quot;f&quot;:true},&quot;v&quot;:&quot;适配器模式&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[41,42],&quot;f&quot;:true},&quot;v&quot;:&quot;工厂模式&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[42,43],&quot;f&quot;:true},&quot;v&quot;:&quot;观察者模式&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[43,44]},&quot;v&quot;:&quot;Java IO 模型详解&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[44,45],&quot;f&quot;:true},&quot;v&quot;:&quot;何为I/O？&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[45,46],&quot;f&quot;:true},&quot;v&quot;:&quot;阻塞/非阻塞/同步/异步 IO&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[46,47],&quot;f&quot;:true},&quot;v&quot;:&quot;Java 中3种常见的IO模型&quot;}]}]}"></svg></div><h2 id="java-io-基础知识"><a class="markdownIt-Anchor" href="#java-io-基础知识"></a> Java IO 基础知识</h2><h3 id="1-概述"><a class="markdownIt-Anchor" href="#1-概述"></a> 1. 概述</h3><ul><li>IO 即 Input/Output，输入和输出。数据输入到计算机内存的过程即输入，反之输出到外部存储（比如数据库，文件，远程主机）的过程即输出。数据传输过程类似于水流，因此称为 IO 流。</li><li>IO流在Java中分为<code>输入流</code>和<code>输出流</code>，而根据数据的处理方式又分为<code>字节流</code>和<code>字符流</code>。<br />Java IO流的40多个类都是从如下4个抽象类基类中派生出来的：<ul><li><code>InputStream/Reader</code>：所有输入流的基类，前者是字节输入流，后者是字符输入流。</li><li><code>OutputStream/Writer</code>：所有输出流的基类，前者是字节输出流，后者是字符输出流。</li></ul></li></ul><blockquote><p>注意：</p><ul><li>字节流可以处理所有类型的数据，包括文本和二进制，而字符流更适合处理文本数据。</li><li>字节流在处理文本数据时需要考虑字符编码的问题，而字符流会根据指定的字符编码进行正确解析，因此更适合处理中文文本。</li></ul></blockquote><p><strong>关系类图</strong></p><ul><li><strong>InputStream</strong> <img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240505131542.png" alt="" /></li><li><strong>OutputStream</strong> <img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240505131750.png" alt="" /></li><li><strong>Reader</strong> <img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240505132056.png" alt="" /></li><li><strong>Writer</strong> <img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240505132130.png" alt="" /></li></ul><h3 id="2-字节流"><a class="markdownIt-Anchor" href="#2-字节流"></a> 2. 字节流</h3><h4 id="21-inputstream字节输入流"><a class="markdownIt-Anchor" href="#21-inputstream字节输入流"></a> 2.1 InputStream(字节输入流)</h4><h5 id="211-概述"><a class="markdownIt-Anchor" href="#211-概述"></a> 2.1.1 概述</h5><p><code>InputStream</code> 用于从源头（通常是文件）读取数据（字节信息）到内存中，java.io.InputStream 抽象类是所有字节输入流的父类。</p><h5 id="212-常用方法"><a class="markdownIt-Anchor" href="#212-常用方法"></a> 2.1.2 常用方法</h5><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td><code>read()</code></td><td>返回输入流中下一个字节的数据。返回的值介于 0 到 255 之间。如果未读取任何字节，则代码返回 -1 ，表示文件结束。</td></tr><tr><td><code>read(byte b[ ])</code></td><td>从输入流中读取一些字节存储到数组 b 中。如果数组 b 的长度为零，则不读取。如果没有可用字节读取，返回 -1。如果有可用字节读取，则最多读取的字节数最多等于 b.length ， 返回读取的字节数。这个方法等价于 read(b, 0, b.length)。</td></tr><tr><td><code>read(byte b[], int off, int len)</code></td><td>在read(byte b[ ]) 方法的基础上增加了 off 参数（偏移量）和 len 参数（要读取的最大字节数）。</td></tr><tr><td><code>skip(long n)</code></td><td>忽略输入流中的 n 个字节 ,返回实际忽略的字节数。</td></tr><tr><td><code>available()</code></td><td>返回输入流中可以读取的字节数</td></tr><tr><td><code>close()</code></td><td>关闭输入流释放相关的系统资源。</td></tr><tr><td>从 Java 9 开始，InputStream 新增加了多个实用的方法:</td><td></td></tr><tr><td><code>readAllBytes()</code></td><td>读取输入流中的所有字节，返回字节数组。</td></tr><tr><td><code>readNBytes(byte[] b, int off, int len)</code></td><td>阻塞直到读取 len 个字节。</td></tr><tr><td><code>transferTo(OutputStream out)</code></td><td>将所有字节从一个输入流传递到一个输出流。</td></tr></tbody></table><h5 id="213-实现类"><a class="markdownIt-Anchor" href="#213-实现类"></a> 2.1.3 实现类</h5><ul><li><strong>FileInputStream</strong><ul><li>FileInputStream 是一个比较常用的字节输入流对象，可直接指定文件路径，可以直接读取单字节数据，也可以读取至字节数组中。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">InputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Number of remaining bytes:"</span><span class="token operator">+</span>fis<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> content<span class="token punctuation">;</span>    <span class="token keyword">long</span> skip <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The actual number of skipped bytes:"</span><span class="token operator">+</span>skip<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The content read from file："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>content <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** input.txt文件内容：LLJavaGuide* 输出：* Number of remaining bytes:11* The actual number of skipped bytes:2* The content read from file：JavaGuide* */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>使用技巧：一般我们是不会直接单独使用 FileInputStream ，通常会配合 BufferedInputStream（字节缓冲输入流，下面会讲到）来使用。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//我们可以通过readAllBytes()读取输入流中所有字节并将其直接赋值给一个String对象</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//创建一个BufferedInputStream 对象</span>    <span class="token class-name">BufferedInputStream</span> bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//读取文件的内容并复制到String对象中</span>    <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bis<span class="token punctuation">.</span><span class="token function">readAllBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><strong>DataInputStream</strong>（数据流）<ul><li>DataInputStream 用于读取指定类型数据，不能单独使用，必须结合 FileInputStream</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//必须将fis作为构造参数才能使用</span>    <span class="token class-name">DataInputStream</span> dis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataInputStream</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//可以读取任意具体的类型数据</span>    dis<span class="token punctuation">.</span><span class="token function">readBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从文件中读取一个 boolean 类型的字节数据。</span>    dis<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从文件中读取一个 int 类型的字节数据。</span>    dis<span class="token punctuation">.</span><span class="token function">readUTF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从文件中读取一个 UTF 字符串数据。</span>    dis<span class="token punctuation">.</span><span class="token function">readByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从文件中读取一个byte类型的字节数据</span>    <span class="token comment">//....</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：DataOutputStream写的文件，只能使用DataInputStream去读。并且读的时候你需要提前知道写入的顺序。读的顺序需要和写的顺序一致。才可以正常取出数据。[无论是不是DataOutputStream写的文件，用DataInputStream去读，都需要保证读取顺序与写入顺序一致]</p></blockquote></li><li><strong>ObjectInputStream</strong>(序列化)<ul><li>ObjectInputStream 用于从输入流中读取 Java 对象（反序列化），ObjectOutputStream 用于将对象写入到输出流 (序列化)。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"users"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//Object obj = ois.readObject();</span>    <span class="token comment">//System.out.println(obj instanceof List);//true</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> userList <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span><span class="token punctuation">)</span>ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">User</span> user <span class="token operator">:</span> userList<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    ois<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：用于序列化和反序列化的类必须实现 Serializable 接口，生成序列化版本号。对象中如果有属性不想被序列化，使用 transient 修饰。</p></blockquote></li></ul><h4 id="22-outputstream字节输出流"><a class="markdownIt-Anchor" href="#22-outputstream字节输出流"></a> 2.2 OutputStream(字节输出流)</h4><h5 id="221-概述"><a class="markdownIt-Anchor" href="#221-概述"></a> 2.2.1 概述</h5><p><code>OutputStream</code> 用于将数据（字节信息）写入到目的地（通常是文件），java.io.OutputStream 抽象类是所有字节输出流的父类。</p><h5 id="212-常用方法-2"><a class="markdownIt-Anchor" href="#212-常用方法-2"></a> 2.1.2 常用方法</h5><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td><code>write(int b)</code></td><td>将指定字节b写入到输出流中。</td></tr><tr><td><code>read(byte b[ ])</code></td><td>将数组b写入到输出流,等价于 read(b, 0, b.length)。</td></tr><tr><td><code>write(byte b[], int off, int len)</code></td><td>在write(byte b[])方法的基础上增加了 off 参数（偏移量）和 len 参数（要读取的最大字节数）。</td></tr><tr><td><code>flush()</code></td><td>刷新此输出流并强制写出所有缓冲的字节[多用在带有缓冲流的实现类中]</td></tr><tr><td><code>close()</code></td><td>关闭输出流释放相关的系统资源。</td></tr></tbody></table><h5 id="223-实现类"><a class="markdownIt-Anchor" href="#223-实现类"></a> 2.2.3 实现类</h5><ul><li><strong>FileOutputStream</strong><ul><li>FileOutputStream 是最常用的字节输出流对象，可直接指定文件路径，可以直接输出单字节数据，也可以输出指定的字节数组。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">FileOutputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"output.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//若文件不存在，会自动创建。第二个参数(true/false)表示是否追加。[不填默认覆盖]</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token string">"JavaGuide"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    fis<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>    fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>使用技巧：类似于 FileInputStream，FileOutputStream 通常也会配合 BufferedOutputStream（字节缓冲输出流，下面会讲到）来使用</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//方法一：</span>    <span class="token class-name">FileOutputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"output.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">BufferedOutputStream</span> bos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//方法二：</span>    <span class="token class-name">BufferedOutputStream</span> bos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"output.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><strong>DataOutputStream</strong>（数据流）<ul><li>DataOutputStream 用于写入指定类型数据，不能单独使用，必须结合 FileOutputStream</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//输出流</span>    <span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"out.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">DataOutputStream</span> dos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataOutputStream</span><span class="token punctuation">(</span>fos<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//输出任意数据类型</span>    dos<span class="token punctuation">.</span><span class="token function">writeBoolean</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dos<span class="token punctuation">.</span><span class="token function">writeByte</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：这个流可以将数据连同数据的类型一起写入文件。<mark>这个文件不是普通的文本文档，而是一个二进制文件。(记事本打不开)</mark></p></blockquote></li><li><strong>ObjectOutputStream</strong>（反序列化）<ul><li>ObjectInputStream 用于从输入流中读取 Java 对象（<strong>反序列化</strong>），ObjectOutputStream 用于将对象写入到输出流 (<strong>序列化</strong>)</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"file.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：用于序列化的类必须实现 Serializable 接口，生成序列化版本号。对象中如果有属性不想被序列化，使用 transient 修饰。</p></blockquote></li></ul><h3 id="3-字符流"><a class="markdownIt-Anchor" href="#3-字符流"></a> 3. 字符流</h3><h4 id="31-概述"><a class="markdownIt-Anchor" href="#31-概述"></a> 3.1 概述</h4><h5 id="311-为什么要有字符流"><a class="markdownIt-Anchor" href="#311-为什么要有字符流"></a> 3.1.1 为什么要有字符流</h5><p><strong>不管是文件读写还是网络发送接收，信息的最小存储单元都是字节。那为什么I/O流操作要分为字节流操作和字符流操作呢？</strong></p><ul><li>字符流是由Java虚拟机将字节转换得到的，这个过程还算是比较耗时的。</li><li>如果我们不知道编码类型就很容易出现乱码问题。</li></ul><p>因此，I/O流就干脆提供了一个直接操作字符的接口，方便我们平时对字符进行操作。如果音频文件、图片等媒体文件用字节流比较好，如果涉及到字符的话使用字符流比较好。</p><h5 id="312-字符流采用编码"><a class="markdownIt-Anchor" href="#312-字符流采用编码"></a> 3.1.2 字符流采用编码</h5><p>字符流默认采用的是<code>Unicode</code>编码，我们可以通过构造方法自定义编码。常用字符编码所占字节数：</p><ul><li>utf-8：英文占1字节，中文占3字节</li><li>unicode：任何字符都占2个字节</li><li>gbk：英文占1字节，中文占2字节</li></ul><h4 id="32-reader字符输入流"><a class="markdownIt-Anchor" href="#32-reader字符输入流"></a> 3.2 Reader(字符输入流)</h4><h5 id="321-概述"><a class="markdownIt-Anchor" href="#321-概述"></a> 3.2.1 概述</h5><p>Reader用于从源头（通常是文件）读取数据（字符信息）到内存中，java.io.Reader抽象类是所有字符输入流的父类。</p><blockquote><p>Reader 用于读取文本， InputStream 用于读取原始字节。</p></blockquote><h5 id="322-常用方法"><a class="markdownIt-Anchor" href="#322-常用方法"></a> 3.2.2 常用方法</h5><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td><code>read()</code></td><td>从输入流中读取一个字符。</td></tr><tr><td><code>read(char cbuf[])</code></td><td>从输入流中读取一些字符，并将它们储存到字符数组 cbuf 中。等价于 read(cbuf, 0, cbuf.length)。</td></tr><tr><td><code>read(char cbuf[], int off, int len)</code></td><td>在read(char cbuf[])方法的基础上增加了 off 参数（偏移量）和 len 参数（要读取的最大字符数）。</td></tr><tr><td><code>skip(long n)</code></td><td>忽略输入流中的n个字符，返回实际忽略的字符数。</td></tr><tr><td><code>close()</code></td><td>关闭输入流释放相关的系统资源。</td></tr></tbody></table><blockquote><p>空参的read方法和有参的read方法的区别：<br />空参的read方法：一次读取一个字节，遇到中文一次读取多个字节，把字节解码并转成十进制返回<br />有参的read方法：把读取字节，解码，强转三步合并了，强转之后的字符放到数组中，返回的是读取的字符数</p></blockquote><h5 id="323-实现类"><a class="markdownIt-Anchor" href="#323-实现类"></a> 3.2.3 实现类</h5><ul><li><strong>InputStreamReader</strong>(转换流)<ul><li>InputStreamReader 是字节流转换为字符流的桥梁，其子类 FileReader 是基于该基础上的封装，可以直接操作字符文件</li><li>内部有长度为8192的缓冲区，可以提高读取效率。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//字节流转换为字符流的桥梁</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InpuStreamReader</span> <span class="token keyword">extends</span> <span class="token class-name">Reader</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//用于读取字符文件</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileReader</span> <span class="token keyword">extends</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><strong>FileReader</strong><ul><li>用字符流读取文件，可以指定编码格式(不指定时，使用平台默认的字符编码-&gt;通常为utf-8)。[只能读取纯文本文件]</li><li>内部有长度为8192的缓冲区，可以提高读取效率。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">FileReader</span> fid <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> content<span class="token punctuation">;</span>    <span class="token keyword">long</span> skip <span class="token operator">=</span> fid<span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The actual number of bytes skipped: "</span> <span class="token operator">+</span> skip<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"The content of the file: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>content <span class="token operator">=</span> fid<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    fid<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** inout.txt内容：LL,我是Guide* 输出：* The actual number of bytes skipped:3* he content of the file:我是Guide * */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="33-writer字符输出流"><a class="markdownIt-Anchor" href="#33-writer字符输出流"></a> 3.3 Writer(字符输出流)</h4><h5 id="331-概述"><a class="markdownIt-Anchor" href="#331-概述"></a> 3.3.1 概述</h5><p>Writer用于将数据（字符信息）写入到目的地（通常是文件），java.io.Writer抽象类是所有字节输出流的父类。</p><h5 id="332-常用方法"><a class="markdownIt-Anchor" href="#332-常用方法"></a> 3.3.2 常用方法</h5><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td><code>write(int c)</code></td><td>写入单个字符</td></tr><tr><td><code>write(char cbuf[])</code></td><td>写入字符数组 cubf 中的所有字符。等价于 write(cbuf, 0, cbuf.length)。</td></tr><tr><td><code>write(char cbuf[], int off, int len)</code></td><td>在write(char cbuf[])方法的基础上增加了 off 参数（偏移量）和 len 参数（要写入的最大字符数）。</td></tr><tr><td><code>write(String str)</code></td><td>写入字符串 str 。等价于 write(str, 0, str.length)。</td></tr><tr><td><code>write(String str, int off, int len)</code></td><td>在write(String str)方法的基础上增加了 off 参数（偏移量）和 len 参数（要写入的最大字符数）。</td></tr><tr><td><code>append(CharSequence csq)</code></td><td>将指定的字符序列附加到指定的Writer对象并返回该Writer对象。[若要追加，在指定文件时第二个参数要传true]</td></tr><tr><td><code>append(char c)</code></td><td>将指定的字符附加到指定的Writer对象并返回该Writer对象。[若要追加，在指定文件时第二个参数要传true]</td></tr><tr><td><code>flush()</code></td><td>刷新输出流，将缓冲区中的数据写入目的地。</td></tr><tr><td><code>close()</code></td><td>关闭输出流，释放相关的系统资源。</td></tr></tbody></table><h5 id="333-实现类"><a class="markdownIt-Anchor" href="#333-实现类"></a> 3.3.3 实现类</h5><ul><li><strong>OutputStreamWriter</strong>(转换流)<ul><li>OutputStreamWriter 是字符流转换为字节流的桥梁，其子类 FileWriter 是基于该基础上的封装，可以直接将字符写入到文件。</li><li>内部有长度为8192的缓冲区，可以提高读取效率。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//字节流转换为字符流的桥梁</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OutputStreamWriter</span> <span class="token keyword">extends</span> <span class="token class-name">Writer</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//用于写入字符到文件</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileWriter</span> <span class="token keyword">extends</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><strong>FileWriter</strong><ul><li>不同系统的换行符号：<ul><li>linux：\n</li><li>windows：\r\n</li><li>mac：\r</li></ul></li><li>内部有长度为8192的缓冲区，可以提高读取效率。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">FileWriter</span> fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    fw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// input.txt: Hello World</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="4-缓冲流"><a class="markdownIt-Anchor" href="#4-缓冲流"></a> 4. 缓冲流</h3><h4 id="41-为什么要有缓冲流"><a class="markdownIt-Anchor" href="#41-为什么要有缓冲流"></a> 4.1 为什么要有缓冲流</h4><ul><li>IO操作是很消耗性能的，缓冲流可以将数据加载至缓冲区，一次性读取/写入多个字节，从而避免频繁的IO操作，提高流的传输效率。</li></ul><h4 id="42-字节缓冲流"><a class="markdownIt-Anchor" href="#42-字节缓冲流"></a> 4.2 字节缓冲流</h4><ul><li>字节缓冲流这里采用了修饰器模式来增强InputStream和OutputStream的功能，从而实现缓冲流。</li><li>字节流和字节缓冲流的性能差别主要体现在我们使用两者的时候都是调用write(int b) 和 read() 这两个一次只读一个字节的方法的时候。由于字节缓存流内部有缓冲区(一个长度为8192的字节数组)，因此，字节缓冲流会将读取到的字节放在缓存区中，大幅减少IO次数，提高读取效率</li><li>如果是调用read(byte[] b)和writer(byte[] b,int off,int len)这两个读取/写入一个字节数组的方法的话，只要字节数组的大小合适，两者的性能差距其实不大，基本可以忽略。</li></ul><h5 id="421-bufferedinputstream字节缓冲输入流"><a class="markdownIt-Anchor" href="#421-bufferedinputstream字节缓冲输入流"></a> 4.2.1 BufferedInputStream(字节缓冲输入流)</h5><ul><li>BufferedInputStream 从源头（通常是文件）读取数据（字节信息）到内存的过程中不会一个字节一个字节的读取，而是会先将读取到的字节存放在缓存区，并从内部缓冲区中单独读取字节。这样大幅减少了 IO 次数，提高了读取效率。</li><li>BufferedInputStream 内部维护了一个缓冲区，这个缓冲区实际就是一个长度为8192的字节(byte)数组，通过阅读 BufferedInputStream 源码即可得到这个结论。<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BufferedInputStream</span> <span class="token keyword">extends</span> <span class="token class-name">FilterInputStream</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 缓冲区的默认大小</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">DEFAULT_BUFFER_SIZE</span> <span class="token operator">=</span> <span class="token number">8192</span><span class="token punctuation">;</span>  <span class="token comment">// 内部缓冲区数组</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token constant">EMPTY</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 使用默认的缓冲区大小</span>  <span class="token keyword">public</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> in<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span> <span class="token constant">DEFAULT_BUFFER_SIZE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 自定义缓冲区大小</span>  <span class="token keyword">public</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> in<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">super</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Buffer size &lt;= 0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      initialSize <span class="token operator">=</span> size<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// use internal lock and lazily create buffer when not subclassed</span>          lock <span class="token operator">=</span> <span class="token class-name">InternalLock</span><span class="token punctuation">.</span><span class="token function">newLockOrNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          buf <span class="token operator">=</span> <span class="token constant">EMPTY</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// use monitors and eagerly create buffer when subclassed</span>          lock <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>          buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>缓冲区的大小默认为 8192 字节，当然了，也可以通过 BufferedInputStream(InputStream in, int size) 这个构造方法来指定缓冲区的大小。</li></ul><h5 id="422-bufferedoutputstream字节缓冲输出流"><a class="markdownIt-Anchor" href="#422-bufferedoutputstream字节缓冲输出流"></a> 4.2.2 BufferedOutputStream(字节缓冲输出流)</h5><ul><li>BufferedOutputStream 将数据（字节信息）写入到目的地（通常是文件）的过程中不会一个字节一个字节的写入，而是会先将要写入的字节存放在缓存区，并从内部缓冲区中单独写入字节。这样大幅减少了 IO 次数，提高了读取效率。</li><li>示例：往 output.txt 文件写内容：<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>     <span class="token class-name">BufferedOutputStream</span> bos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"output.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     bos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     bos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     bos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token comment">// output.txt: Hello World</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>类似于 BufferedInputStream ，BufferedOutputStream 内部也维护了一个缓冲区，并且，这个缓存区的大小也是 8192 字节。</li></ul><h4 id="43-字符缓冲流"><a class="markdownIt-Anchor" href="#43-字符缓冲流"></a> 4.3 字符缓冲流</h4><ul><li>BufferedReader （字符缓冲输入流）和 BufferedWriter（字符缓冲输出流）类似于 BufferedInputStream（字节缓冲输入流）和 BufferedOutputStream（字节缓冲输出流），内部都维护了一个长度为 8192 的字符(char)数组作为缓冲区。不过，前者主要是用来操作字符信息。</li></ul><h5 id="431-bufferedreader字符缓冲输入流"><a class="markdownIt-Anchor" href="#431-bufferedreader字符缓冲输入流"></a> 4.3.1 BufferedReader(字符缓冲输入流)</h5><ul><li>特有方法：<ul><li><code>public String readLine() throws IOException</code> ：从输入流中读取一行文本，并返回一个字符串。当达到文件末尾时，返回 <code>null</code>。</li><li><code>public Stream&lt;String&gt; lines() throws IOException</code> ：返回一个Stream<String>流，该流包含从输入流中读取的所有行。</li><li><code>public boolean ready() throws IOException</code> ：检查是否可以从流中读取数据而不是阻塞。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> str<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>str <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 输出：Hello World 1        Hello World 2        Hello World 3        Hello World 4        Hello World 5        Hello World 6*/</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      br<span class="token punctuation">.</span><span class="token function">lines</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">/* 输出：Hello World 1        Hello World 2        Hello World 3        Hello World 4        Hello World 5        Hello World 6*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h5 id="432-bufferedwriter字符缓冲输出流"><a class="markdownIt-Anchor" href="#432-bufferedwriter字符缓冲输出流"></a> 4.3.2 BufferedWriter(字符缓冲输出流)</h5><ul><li>特有方法：<ul><li><code>public void newLine() throws IOException</code> ：写入一个换行符。[跨平台的换行]</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">BufferedWriter</span> bw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"output.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      bw<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      bw<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      bw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">/* output.txt:  Hello World                  Java*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="5-打印流"><a class="markdownIt-Anchor" href="#5-打印流"></a> 5. 打印流</h3><ul><li>PrintStream 属于字节打印流，是OutputStream的子类，可以将数据输出到指定的目的地。[默认输出到控制台]</li><li>PrintWriter 属于字符打印流，是Writer的子类，可以将数据输出到指定的目的地。[默认输出到控制台]</li></ul><h4 id="51-常用方法"><a class="markdownIt-Anchor" href="#51-常用方法"></a> 5.1 常用方法</h4><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td><code>println(参数类型不定x)</code></td><td>输出x带换行</td></tr><tr><td><code>print(参数类型不定x)</code></td><td>输出x不带换行</td></tr><tr><td><code>flush()</code></td><td>刷新输出流，将缓冲区中的数据写入目的地。</td></tr><tr><td><code>close()</code></td><td>关闭输出流，释放相关的系统资源。</td></tr></tbody></table><blockquote><p>改变流的输出方向：<strong>System.setOut(new PrintStream(new FileOutputStream(文件名)))</strong></p></blockquote><h4 id="52-示例"><a class="markdownIt-Anchor" href="#52-示例"></a> 5.2 示例</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>       <span class="token comment">// 可以改变标准输出流的输出方向吗？ 可以// 标准输出流不再指向控制台，指向“log”文件。</span>       <span class="token class-name">PrintStream</span> printStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"log"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 修改输出方向，将输出方向修改到"log"文件。</span>       <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setOut</span><span class="token punctuation">(</span>printStream<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 修改输出方向</span>       <span class="token comment">// 再输出</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello kitty"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       printStream<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       printStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-随机访问流"><a class="markdownIt-Anchor" href="#6-随机访问流"></a> 6. 随机访问流</h3><h4 id="61-概述"><a class="markdownIt-Anchor" href="#61-概述"></a> 6.1 概述</h4><p>随机访问流指的是支持随意跳转到文件的任意位置进行读写的RandomAccessFile。</p><h4 id="62-构造方法"><a class="markdownIt-Anchor" href="#62-构造方法"></a> 6.2 构造方法</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// openAndDelete 参数默认为false 表示打开文件并且这个文件不会被删除</span><span class="token keyword">public</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">(</span><span class="token class-name">File</span> file<span class="token punctuation">,</span><span class="token class-name">String</span> mode<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">throws</span> <span class="token class-name">FileNotFoundException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span>mode<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 私有方法</span><span class="token keyword">private</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">(</span><span class="token class-name">File</span> file<span class="token punctuation">,</span><span class="token class-name">String</span> mode<span class="token punctuation">,</span><span class="token keyword">boolean</span> opeanAndDelete<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">throws</span> <span class="token class-name">FileNotFoundException</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 省略大部分代码</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>RandomAccessFile的构造方法如上，我们可以指定mode（读写模式）：</p><ul><li><code>r</code>：只读模式</li><li><code>rw</code>：读写模式</li><li><code>rws</code>：相对于rw，rws同步更新对 “文件的内容” 或 “元数据” 的修改到外部储存设备。</li><li><code>rwd</code>：相对于rw，rwd同步更新对 “文件的内容” 的修改到外部储存设备。<br />文件内容指的是文件中实际保存的数据，元数据则是用来描述文件属性如文件的大小信息、创建和修改时间。</li></ul><h4 id="63-常用方法"><a class="markdownIt-Anchor" href="#63-常用方法"></a> 6.3 常用方法</h4><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td><code>RandomAccessFile(File file,String mode)</code></td><td>mode取r(读)或rw(可读写)等，通过mode可以确定流对文件的访问权限</td></tr><tr><td><code>seek(long a)</code></td><td>将流的读写位置定位到距离文件开头 a 个字节处。</td></tr><tr><td><code>getFilePointer()</code></td><td>获取流的当前读写位置，返回的是一个 long 类型的值，表示距离文件开头的字节偏移量</td></tr><tr><td><code>read()</code></td><td>从文件中读取一个字节的数据，并返回读取到的字节。如果到达文件末尾，则返回 -1。这个方法每次只读取一个字节。</td></tr><tr><td><code>read(byte[] buffer)</code></td><td>从文件中读取一定数量的字节，并将它们存储到指定的字节数组 buffer 中。返回值为实际读取的字节数，如果到达文件末尾且没有更多的字节可供读取，则返回 -1；否则返回实际读取的字节数。</td></tr><tr><td><code>readFully(byte[] buffer)</code></td><td>从文件中读取指定数量的字节，并将它们存储到指定的字节数组 buffer 中。与 read() 方法不同的是，readFully() 方法更严格，如果文件中的数据不足以填满整个 buffer，则 readFully() 方法会抛出 EOFException 异常，而不是返回部分读取的数据。</td></tr><tr><td><code>write(int b)</code></td><td>向文件中写入一个字节的数据。参数 b 表示要写入的字节。</td></tr><tr><td><code>write(byte[] buffer)</code></td><td>向文件中写入指定字节数组 buffer 中的数据。写入的数据数量取决于 buffer 的长度。</td></tr><tr><td><code>writeBytes(String s)</code></td><td>向文件中写入指定的字符串 s。写入的数据是字符串 s 的字节表示形式。</td></tr><tr><td><code>writeUTF(String s)</code></td><td>向文件中写入指定的字符串 s，使用UTF-8编码。在写入时，会在字符串前面添加两个字节的长度信息，以便读取时能够正确地解析字符串。</td></tr><tr><td><code>length()</code></td><td>获取文件的长度，返回值为文件的字节数。</td></tr><tr><td><code>close()</code></td><td>关闭文件流，释放相关的系统资源。</td></tr><tr><td><code>getFD()</code></td><td>返回与此文件关联的文件描述符对象（FileDescriptor）[通常用于创建新的IO流，如FileInputStream、FileOutputStream、RandomAccessFile等]</td></tr></tbody></table><blockquote><p><strong>注意：</strong></p><ul><li>在 RandomAccessFile 中，seek(long a) 和 getFilePointer() 方法是按字节定位的，这意味着它们不会意识到文件中的字符编码。因此，如果文件中包含多字节字符（例如中文），直接按字节定位可能会导致位置计算错误。</li><li>在使用 RandomAccessFile 写出数据时，数据以字节形式写出到文件中。</li></ul></blockquote><h4 id="64-使用场景"><a class="markdownIt-Anchor" href="#64-使用场景"></a> 6.4 使用场景</h4><p>RandomAccessFile 比较常见的一个应用就是实现大文件的 断点续传 。何谓断点续传？简单来说就是上传文件中途暂停或失败（比如遇到网络问题）之后，不需要重新上传，只需要上传那些未成功上传的文件分片即可。分片（先将文件切分成多个文件分片）上传是断点续传的基础。</p><h4 id="65-示例"><a class="markdownIt-Anchor" href="#65-示例"></a> 6.5 示例</h4><p>RandomAccessFile 读写数据</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">RandomAccessFile</span> raf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">,</span> <span class="token string">"rw"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//将若干数据写入到文件中</span>       raf<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"\r\n忆高考"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       raf<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"\r\n年年忆今朝，茫茫赶国考；"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       raf<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"\r\n不成真秀才，只图自逍遥。"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       raf<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       raf<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       raf<span class="token punctuation">.</span><span class="token function">seek</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>raf<span class="token punctuation">.</span><span class="token function">getFD</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//或者：BufferedReader br = new BufferedReader(new FileReader(raf.getFD()));</span>       <span class="token class-name">String</span> str<span class="token punctuation">;</span>       <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>str <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       br<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       raf<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token comment">/* 输出： 忆高考         年年忆今朝，茫茫赶国考；         不成真秀才，只图自逍遥。         a*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>RandomAccessFile 可以帮助我们合并文件分片，示例代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token class-name">String</span> fileName<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">RandomAccessFile</span> oSaveFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span><span class="token string">"rw"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token constant">DOWNLOAD_THREAD_NUM</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">BufferedInputStream</span> bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span>                    <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>fileName <span class="token operator">+</span> <span class="token constant">FILE_TEMP_SUFFIX</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len<span class="token operator">=</span> bis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    oSaveFile<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        logUtils<span class="token punctuation">.</span><span class="token function">inof</span><span class="token punctuation">(</span><span class="token string">"文件合并完毕 &#123;&#125;"</span><span class="token punctuation">,</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>分片上传常常使用在大文件的上传问题中，《Java 面试指北》中详细介绍了大文件的上传问题</p></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习总结 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java正则表达式</title>
      <link href="/2024/05/04/java-zheng-ze-biao-da-shi/"/>
      <url>/2024/05/04/java-zheng-ze-biao-da-shi/</url>
      
        <content type="html"><![CDATA[<h3 id="java正则表达式"><a class="markdownIt-Anchor" href="#java正则表达式"></a> Java正则表达式</h3><h4 id="1概述"><a class="markdownIt-Anchor" href="#1概述"></a> 1.概述</h4><ul><li>正则表达式是一种描述字符串模式的语言。</li><li>正则表达式可以用来搜索、编辑或处理文本。</li><li>Java 提供了 java.util.regex 包，它包含了 Pattern 和 Matcher 类，用于处理正则表达式的匹配操作。</li></ul><h4 id="2作用"><a class="markdownIt-Anchor" href="#2作用"></a> 2.作用</h4><ul><li>验证用户输入的数据是否合法。[检验字符串是否满足某种格式]</li><li>提取数据中的有效信息。</li><li>替换字符串中的部分字符。[对文本进行格式化]</li></ul><h4 id="3基本语法"><a class="markdownIt-Anchor" href="#3基本语法"></a> 3.基本语法</h4><table><thead><tr><th>符号</th><th>含义</th><th>例子</th></tr></thead><tbody><tr><td><code>[]</code></td><td>里面的内容出现一次</td><td>[a-z]: a-z之间的任意字符</td></tr><tr><td><code>()</code></td><td>分组[按左括号计算组数,从1开始]</td><td>a(bc)+: bc为第一组,<code>+</code>作用在第一组<code>(bc)</code>上</td></tr><tr><td><code>^</code></td><td>取反</td><td>[^a-z]: 不是a-z之间的任意字符</td></tr><tr><td><code>&amp;&amp;</code></td><td>交集,不能写单个的<code>&amp;</code></td><td>[a-z&amp;&amp;[^bc]]: a-z之间的任意字符,但排除bc</td></tr><tr><td><code>|</code></td><td>写在方括号外面表示并集,不能写两个的<code>||</code></td><td>[a-zA-Z]: a-z或A-Z之间的任意字符。 x|X: 大小写x都可以 。 <mark><strong>注意:</strong> [a-z|A-Z]中的<code>|</code>只是一个普通的字符,并不表示并集。</mark></td></tr><tr><td><code>.</code></td><td>任意字符[回车符号不匹配]</td><td>a.b: 可以是acb、a0b、a吖b等。</td></tr><tr><td><code>\</code></td><td>转义字符</td><td>\\d : 匹配一个数字字符[0-9]。其中第一个<code>\</code>是用作转义字符，用于将后面的<code>\</code>转义成普通字符。第二个<code>\</code>后面紧跟着的d表示匹配一个数字字符。在正则表达式中，\d 是一个特殊的元字符，用于匹配数字字符。</td></tr><tr><td><code>\d</code></td><td>数字</td><td>\\d: 匹配一个数字字符[0-9]。</td></tr><tr><td><code>\D</code></td><td>非数字</td><td>\\D: 匹配一个非数字字符[^0-9]。</td></tr><tr><td><code>\s</code></td><td>空格</td><td>\\s: 匹配一个空白字符[ \t\n\x0B\f\r]。</td></tr><tr><td><code>\S</code></td><td>非空格</td><td>\\S: 匹配一个非空白字符[^ \t\n\x0B\f\r]。</td></tr><tr><td><code>\w</code></td><td>字母数字下划线</td><td>\\w: 匹配一个单词字符[a-zA-Z_0-9]。</td></tr><tr><td><code>\W</code></td><td>非字母数字下划线</td><td>\\W: 匹配一个非单词字符[^a-zA-Z_0-9]。</td></tr><tr><td><code>?</code></td><td>0或1次[作用在前者]</td><td>a?b: ab或b。?作用在a上，表示a为可选字符。</td></tr><tr><td><code>*</code></td><td>0或n次[作用在前者]</td><td>a*b: ab、abb、abbbb、…。*作用在a上，表示a为0或n次。</td></tr><tr><td><code>+</code></td><td>1或n次[作用在前者]</td><td>a+b: ab、abb、abbbb、…。+作用在a上，表示a为1或n次。</td></tr><tr><td><code>&#123;n&#125;</code></td><td>n次[作用在前者,填写具体次数]</td><td>a{2}b: abb。{n}作用在a上，表示a为n次。</td></tr><tr><td><code>&#123;n,m&#125;</code></td><td>n到m次[作用在前者,填写范围]</td><td>a{2,4}b: abb、abbb、abbbb。{n,m}作用在a上，表示a为n到m次。</td></tr><tr><td><code>&#123;n,&#125;</code></td><td>n次及以上[作用在前者,填写范围]</td><td>a{2,}b: abb、abbb、abbbb、…。{n,}作用在a上，表示a为n次以上。</td></tr><tr><td><code>&#123;,m&#125;</code></td><td>0到m次[作用在前者,填写范围]</td><td>a{,4}b: abb、abbb、abbbb、…。{,m}作用在a上，表示a为0到m次。</td></tr><tr><td><code>(?i)</code></td><td>忽略大小写[作用在后者]</td><td>(?i)abc: 匹配abc或ABC、…。a((?i)b)c: 只忽略b的大小写。</td></tr><tr><td><code>[\u4E00-\u9FFF·]</code></td><td>中文</td><td>[\u4E00-\u9FFF·]</td></tr></tbody></table><blockquote><p><strong>Java的反斜杠<code>\</code>:</strong></p><ul><li>在其他语言中，\ 表示：<strong>我想要在正则表达式中插入一个普通的（字面上的）反斜杠，请不要给它任何特殊的意义。</strong></li><li>在 Java 中，\ 表示：<strong>我要插入一个正则表达式的反斜线，所以其后的字符具有特殊的意义。</strong></li></ul><p>所以，在其他的语言中（如 Perl），一个反斜杠 \ 就足以具有转义的作用，而在 Java 中正则表达式中则需要有两个反斜杠才能被解析为其他语言中的转义作用。也可以简单的理解在 Java 的正则表达式中，两个 \\ 代表其他语言中的一个 \，这也就是为什么表示一位数字的正则表达式是 \\d，而表示一个普通的反斜杠是 \\。</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">System.out.print(&quot;\\&quot;);    &#x2F;&#x2F; 输出为 \System.out.print(&quot;\\\\&quot;);  &#x2F;&#x2F; 输出为 \\<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote><h4 id="4常用到的类"><a class="markdownIt-Anchor" href="#4常用到的类"></a> 4.常用到的类</h4><ul><li>Pattern: 正则表达式的编译表示。</li><li>Matcher: 正则表达式的匹配表示。</li></ul><h5 id="41-pattern类"><a class="markdownIt-Anchor" href="#41-pattern类"></a> 4.1. Pattern类</h5><p><code>Pattern</code>类表示正则表达式模式，并提供了一系列静态方法来编译和处理正则表达式。</p><ul><li><strong>编译正则表达式：</strong> 使用<code>Pattern.compile()</code>方法来编译正则表达式字符串，并返回一个<code>Pattern</code>对象。<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Pattern</span> pattern <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"ab+c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 参数是你要匹配的正则表达式字符串。</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h5 id="42-matcher类"><a class="markdownIt-Anchor" href="#42-matcher类"></a> 4.2. Matcher类</h5><p><code>Matcher</code>类用于对字符串进行匹配操作，并提供了一系列方法来执行匹配和检索操作。</p><ul><li><p><strong>创建Matcher对象：</strong> 使用<code>Pattern.matcher()</code>方法将要匹配的字符串与<code>Pattern</code>对象相关联，创建一个<code>Matcher</code>对象。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Matcher</span> matcher <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span><span class="token string">"abbbbbbcsa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 参数是你要匹配的字符串。</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>匹配操作：</strong></p><ul><li><code>matches()</code>: 尝试将整个输入序列与模式匹配。</li><li><code>find()</code>: 尝试查找输入序列中与模式匹配的子序列。</li><li><code>group()</code>: 返回当前匹配的子字符串。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Match found!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><strong>检索操作：</strong></p><ul><li><code>start()</code>: 返回当前匹配的子字符串的起始索引。</li><li><code>end()</code>: 返回当前匹配的子字符串的结束索引。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> text <span class="token operator">=</span> <span class="token string">"The quick brown fox jumps over the lazy dog."</span><span class="token punctuation">;</span><span class="token comment">// 匹配单词中的元音字母</span><span class="token class-name">Pattern</span> pattern <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"the"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Matcher</span> matcher <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 输出匹配的子字符串的起始和结束索引</span><span class="token keyword">while</span> <span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Start index: "</span> <span class="token operator">+</span> matcher<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出: 31 -> 't'</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"End index: "</span> <span class="token operator">+</span> matcher<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 输出: 34 -> ' '</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>替换操作：</strong></p></li><li><p><code>replaceAll(String replacement)</code>: 将匹配的子字符串替换为指定的字符串。</p></li><li><p><code>replaceFirst(String replacement)</code>: 将匹配的第一个子字符串替换为指定的字符串。</p></li><li><p><code>appendReplacement(StringBuffer sb, String replacement)</code>: 将匹配的子字符串替换为指定的字符串，并将替换后的字符串添加到<code>StringBuffer</code>或<code>StringBuilder</code>对象中。</p></li><li><p><code>appendTail(StringBuffer sb)</code>: 将未匹配的子字符串添加到<code>StringBuffer</code>或<code>StringBuilder</code>对象中。</p></li></ul><h5 id="43-正则表达式标志"><a class="markdownIt-Anchor" href="#43-正则表达式标志"></a> 4.3. 正则表达式标志</h5><p>正则表达式编译时可以使用一些标志来修改匹配的行为。这些标志通常作为第二个参数传递给<code>Pattern.compile()</code>方法。</p><ul><li><p><strong>忽略大小写（CASE_INSENSITIVE / (?i)）：</strong> 使匹配不区分大小写。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Pattern</span> pattern <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"cat"</span><span class="token punctuation">,</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">CASE_INSENSITIVE</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 或者</span><span class="token class-name">Pattern</span> pattern <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"(?i)cat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><strong>多行模式（MULTILINE / (?m)）：</strong> 使<code>^</code>和<code>$</code>匹配每行的开始和结束，而不是整个输入序列的开始和结束。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Pattern</span> pattern <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"^dog"</span><span class="token punctuation">,</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">MULTILINE</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 或者</span><span class="token class-name">Pattern</span> pattern <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"(?m)^dog"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><strong>单行模式（DOTALL / (?s)）：</strong> 使<code>.</code>匹配包括换行符在内的所有字符。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Pattern</span> pattern <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">".*"</span><span class="token punctuation">,</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">DOTALL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 或者</span><span class="token class-name">Pattern</span> pattern <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"(?s).*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><p>这些是一些常见的标志，但Java支持更多其他标志，可以根据需要使用。标志可以组合使用，例如<code>Pattern.compile(&quot;pattern&quot;, Pattern.CASE_INSENSITIVE | Pattern.MULTILINE)</code>。</p><h4 id="5捕获分组和非捕获分组"><a class="markdownIt-Anchor" href="#5捕获分组和非捕获分组"></a> 5.捕获分组和非捕获分组</h4><h5 id="51-捕获分组后续还要继续使用本组的数据"><a class="markdownIt-Anchor" href="#51-捕获分组后续还要继续使用本组的数据"></a> 5.1. 捕获分组[后续还要继续使用本组的数据]</h5><p><strong>基本概念:</strong></p><ul><li>每组都是由<code>()</code>括起来。</li><li>捕获分组：捕获分组会记住匹配的文本，并可以在匹配后引用这些文本。<br /><strong>分组规则:</strong></li><li>从1开始,连续不间断</li><li>以左括号为基准,最左边的是第一组,其次为第二组,以此类推<br /><strong>使用规则:</strong></li><li>正则表达式内部使用: \\组号</li><li>正则表达式外部使用: $组号</li></ul><h5 id="52-非捕获分组分组后不再使用本组数据"><a class="markdownIt-Anchor" href="#52-非捕获分组分组后不再使用本组数据"></a> 5.2. 非捕获分组[分组后不再使用本组数据]</h5><table><thead><tr><th>符号</th><th>含义</th><th>例子</th></tr></thead><tbody><tr><td><code>(?:regex)</code></td><td>匹配<code>regex</code>,获取所有文本,包括<code>regex</code></td><td>Java(?:8|11|17)</td></tr><tr><td><code>(?=regex)</code></td><td>匹配<code>regex</code>,只获取前面部分文本,不包括<code>regex</code></td><td>Java(?=8|11|17)</td></tr><tr><td><code>(?!regex)</code></td><td>获取不匹配<code>regex</code>的文本的前面部分,不包括<code>regex</code></td><td>Java(?!8|11|17)</td></tr></tbody></table><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">String str &#x3D; &quot;Java自从95年问世以来，经历了很多版本，目前企业中用的最多的是Java8和Java11，&quot; +                &quot;因为这两个是长期支持版本，下一个长期支持版本是Java17，相信在未来不久Java17也会逐渐登上历史舞台&quot;;    &#x2F;&#x2F;?: 匹配&#96;regex&#96;,获取所有文本,包括&#96;regex&#96;    String regex2 &#x3D; &quot;Java(?:8|11|17)&quot;;&#x2F;&#x2F;Java8 Java11 Java17 Java17    &#x2F;&#x2F;?&#x3D; 匹配&#96;regex&#96;,只获取前面部分文本,不包括&#96;regex&#96;    String regex1 &#x3D; &quot;Java(?&#x3D;8|11|17)&quot;;&#x2F;&#x2F;Java Java Java Java    &#x2F;&#x2F;?! 获取不匹配&#96;regex&#96;的文本的前面部分,不包括&#96;regex&#96;    String regex3 &#x3D; &quot;Java(?!8|11|17)&quot;;&#x2F;&#x2F;Java    Pattern p &#x3D; Pattern.compile(regex1);    Matcher matcher &#x3D; p.matcher(str);    while (matcher.find())&#123;        System.out.print(matcher.group()+&quot; &quot;);    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习总结 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础学习</title>
      <link href="/2024/03/27/java-ji-chu-xue-xi/"/>
      <url>/2024/03/27/java-ji-chu-xue-xi/</url>
      
        <content type="html"><![CDATA[<h3 id="不同类型数组的初始化值"><a class="markdownIt-Anchor" href="#不同类型数组的初始化值"></a> 不同类型数组的初始化值</h3><p>整数型：默认初始化值<strong>0</strong><br />小数型：默认初始化值<strong>0.0</strong><br />字符型：默认初始化值<code>/u0000</code>,即<strong>空格</strong><br />布尔型：默认初始化值 <strong>false</strong><br />引用型(除上面类型之外)：默认初始化值<strong>null</strong></p><h3 id="基本数据类型和引用数据类型的区别"><a class="markdownIt-Anchor" href="#基本数据类型和引用数据类型的区别"></a> 基本数据类型和引用数据类型的区别</h3><ol><li><p><strong>基本数据类型（Primitive Types）：</strong></p><ul><li>Java的基本数据类型是预定义的，并且它们是直接存储数据值的。</li><li>基本数据类型包括整型（int、short、long、byte）、浮点型（float、double）、字符型（char）和布尔型（boolean）。</li><li>基本数据类型的变量存储的是实际的数据值，它们在内存中的存储是在栈（Stack）中。</li><li><strong>基本数据类型是值传递，传递的是实际的数据值。</strong></li></ul></li><li><p><strong>引用类型（Reference Types）：</strong></p><ul><li>引用类型是由类（Class）、接口（Interface）、数组（Array）和枚举（Enum）等引用数据类型所构成的。</li><li>引用类型的变量存储的是对象的引用（内存地址），而不是对象本身的实际数据。</li><li>引用类型的对象在内存中的存储是在堆（Heap）中。</li><li>引用类型的变量本质上是指向对象的引用，它们可以指向同一个对象，也可以指向不同的对象。</li><li><strong>引用类型是对象的引用传递，传递的是对象的引用。</strong></li></ul></li></ol><blockquote><p>区别总结如下：</p><ul><li><strong>基本数据类型</strong>（Primitive Types）：<ul><li>存储的是实际的数据值。</li><li>在内存中存储在栈中。</li><li>是值传递，传递的是实际的数据值。</li></ul></li><li><strong>引用类型</strong>（Reference Types）：<ul><li>存储的是对象的引用（内存地址）。</li><li>对象存储在堆中。</li><li>是引用传递，传递的是对象的引用。</li></ul></li></ul></blockquote><h3 id="idea的常用快捷键"><a class="markdownIt-Anchor" href="#idea的常用快捷键"></a> idea的常用快捷键</h3><ul><li><code>Ctrl + P</code>:查看形参</li><li><code>Ctrl + D</code>:复制当前行到下一行</li><li><code>Ctrl + Y</code>:删除代码</li><li><code>Ctrl + Shift + ,</code>:一键生成标准的JavaBean代码[需要下载ptg插件]</li><li><code>Alt + Insert</code>:生成标准的JavaBean代码</li><li><code>Ctrl + Alt + V</code>:自动将该表达式或代码块提取为一个新的变量</li><li><code>Ctrl + Alt + L</code>:格式化代码</li><li><code>Ctrl + Alt + M</code>:提取方法</li><li><code>Alt + Enter</code>:快速修复</li><li><code>Ctrl + Insert</code>:自动生成代码</li><li><code>Tab</code>:自动补全代码</li><li><code>Ctrl + B</code>:跳转到声明处</li><li><code>Ctrl + Alt + T</code>:选定结构(<code>if</code>语句,<code>while</code>语句)</li><li><code>Alt + 鼠标拖动</code>:多重选择[对多个对象同时进行删除或修改]</li><li><code>Ctrl + Shift + ↑/↓ </code>:代码上下移动</li><li><code>选中 + Shift + F6</code>:向下整体修改</li><li><code>Ctrl + N</code>:查找并导航到指定的类</li><li><code>Ctrl + F12</code>:调出当前编辑文件的结构视图或者是类的成员列表</li></ul><h3 id="方法区"><a class="markdownIt-Anchor" href="#方法区"></a> 方法区</h3><p>方法区：<strong>用于描述存储已被虚拟机加载的类信息、字段信息、方法信息、常量、静态变量、即时编译器编译后的代码缓存等数据的内存区域</strong><br />永久代(JDK8以前)/元空间(JDK8及以后)：<strong>是方法区的具体实现</strong><br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240413115206.png" alt="" /></p><blockquote><p><strong><mark>在JDK 8之前，方法区的实现通常是永久代。而在JDK 8及之后，方法区的实现主要是元空间。</mark></strong></p><p>将永久代替换为元空间的主要原因是解决了永久代存在的一些问题，使Java虚拟机更适应现代应用程序的需求。</p><ol><li><p><strong>内存管理方式</strong>：</p><ul><li><strong>永久代</strong>：<mark>永久代的内存空间是在Java堆内的一部分</mark>，它受到了Java堆内存的大小限制。</li><li><strong>元空间</strong>：<mark>元空间通常位于本地内存中</mark>，不再与Java堆绑定，因此不受Java堆内存的限制。这使得元空间可以根据需要动态扩展，避免了永久代固定大小带来的限制。</li></ul></li><li><p><strong>垃圾回收机制</strong>：</p><ul><li><strong>永久代</strong>：<mark>永久代中的垃圾回收通常由Full GC（全局垃圾回收）来执行</mark>，效率较低，并且可能会导致长时间的停顿。</li><li><strong>元空间</strong>：元空间的内存管理不再依赖于Java虚拟机的垃圾回收机制，而是<mark>由本地内存的管理机制来负责</mark>。这降低了垃圾回收的成本，并提高了应用程序的性能和稳定性。</li></ul></li><li><p><strong>动态调整大小</strong>：</p><ul><li><strong>永久代</strong>：<mark>永久代的大小是固定的，无法动态调整</mark>。这可能会导致在某些情况下出现永久代溢出的问题。</li><li><strong>元空间</strong>：<mark>元空间可以根据应用程序的需要动态调整大小，不再受到固定大小的限制</mark>。这提高了虚拟机的灵活性，并减少了出现内存溢出的风险。</li></ul></li><li><p><strong>存储内容</strong>：</p><ul><li><strong>永久代</strong>：永久代主要用于存储类的元数据信息和静态变量。</li><li><strong>元空间</strong>：元空间用于存储类的元数据信息，例如类的结构、方法信息、注解等。<mark>与永久代相比，元空间更加灵活，并且可以存储更多类型的元数据信息</mark>。</li></ul></li></ol><p>总的来说，替换永久代为元空间是为了提高Java虚拟机在处理大量类加载和卸载操作时的性能和可用性。元空间的动态调整大小、本地内存管理以及不依赖于Java虚拟机的垃圾回收机制等特性，使得它更适合应对现代应用程序的需求。</p></blockquote><h3 id="串池"><a class="markdownIt-Anchor" href="#串池"></a> 串池</h3><p><strong>基本概念</strong>：</p><ul><li>串池（String Pool）是Java中的一种特殊的内存区域，用于存储字符串常量。它是字符串常量池的另一种称呼，因为在Java中，字符串常量池主要用于存储字符串常量。[串池中的字符串是不可变的]</li><li>当我们创建一个字符串常量时，如果该字符串常量在字符串常量池中不存在，则会在字符串常量池中创建一个新的字符串对象，并将该字符串常量放入其中。如果字符串常量池中已经存在相同内容的字符串对象，则不会创建新的对象，而是直接返回已存在的对象的引用。[<strong>只有一份，全局共享</strong>]</li><li>只有<code>String</code>类型的字符串才会被添加到字符串常量池中。<code>StringBuffer</code>和<code>StringBuilder</code>类型的字符串不会自动添加到字符串常量池中。这是因为 StringBuffer 和 StringBuilder 是可变的字符串，它们的内容在运行时可以被修改，而字符串常量池中的字符串是不可变的。</li></ul><p><strong>内存管理</strong>：</p><ul><li>在JDK7版本开始从方法区中挪到了堆内存</li></ul><h3 id="字符串"><a class="markdownIt-Anchor" href="#字符串"></a> 字符串</h3><h4 id="1-基本概念"><a class="markdownIt-Anchor" href="#1-基本概念"></a> 1 基本概念</h4><p>Java字符串就是Unicode字符序列。Java里没有内置的字符串类型，而是在标准的类库中提供了一个预定义类，String。每个用<strong>双引号&quot;&quot;括起来</strong>的都是<strong>String类的一个实例</strong>。<br />字符串在日常开发中最常用， Java字符串的一个重要特点就是<strong>字符串不可变</strong></p><h4 id="2-字符串的创建"><a class="markdownIt-Anchor" href="#2-字符串的创建"></a> 2 字符串的创建</h4><ul><li>通过字符串字面量创建字符串常量。</li><li>通过调用String类的构造函数。</li><li>使用字符串连接运算符<code>+</code>创建字符串。[底层通常是使用StringBuilder(或 StringBuffer)进行字符串的拼接]</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span><span class="token comment">//通过字符串字面量创建字符串常量。</span><span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//通过调用String类的构造函数。</span><span class="token class-name">String</span> str3 <span class="token operator">=</span> <span class="token string">"Hello"</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> <span class="token string">"world"</span><span class="token punctuation">;</span><span class="token comment">//使用字符串连接运算符`+`创建字符串。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="3-字符串存储的内存原理"><a class="markdownIt-Anchor" href="#3-字符串存储的内存原理"></a> 3 字符串存储的内存原理</h4><ul><li>直接赋值或字符串连接操作中使用的是字符字面量（即单引号括起来的字符）的方式创建的字符串会复用串池中已存在的字符串常量</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span><span class="token comment">// 字符串 "abc" 存储在字符串常量池中</span><span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token char">'a'</span> <span class="token operator">+</span> <span class="token char">'b'</span> <span class="token operator">+</span> <span class="token char">'c'</span><span class="token punctuation">;</span><span class="token comment">// 在编译时自动转换为字符串常量 "abc"，在串池中已经存在"abc"，直接复用</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span class="token comment">//"=="号在比较引用类型时比较的时地址，这里的true表示s1和s2指向的对象相同</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>new出来的不会复用，而是在堆中开辟一个新的空间</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用 new 关键字创建一个新的字符串对象，不会存储在字符串常量池中</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="4-字符串操作"><a class="markdownIt-Anchor" href="#4-字符串操作"></a> 4 字符串操作</h4><ul><li><code>length()</code>:用于获取字符串的长度，即字符串中包含的字符数。</li><li><code>substring(int beginIndex, int endIndex)</code>:方法用于截取字符串的子串，从 beginIndex 开始（包括），到 endIndex 结束（不包括）。</li><li><code>concat(String str)</code>:方法用于连接两个字符串，将参数字符串 str 连接到调用方法的字符串末尾。</li><li><code>indexOf(String str)</code>:方法用于查找指定子串 str 在字符串中第一次出现的位置，如果找到了，返回该子串的起始索引；如果没有找到，返回 -1。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"Hello, world!"</span><span class="token punctuation">;</span><span class="token keyword">int</span> length <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//13</span><span class="token class-name">String</span> substring <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//"Hello"</span><span class="token class-name">String</span> newStr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">" Welcome"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//"Hello, world! Welcome"</span><span class="token keyword">int</span> index <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-string-stringbuffer-stringbuilder的区别"><a class="markdownIt-Anchor" href="#5-string-stringbuffer-stringbuilder的区别"></a> 5 String、StringBuffer、StringBuilder的区别</h4><h5 id="string"><a class="markdownIt-Anchor" href="#string"></a> String</h5><p><code>String</code> 类是 Java 中最常用的字符串类，它表示一个不可变的字符序列。这意味着一旦创建了一个 <code>String</code> 对象，它的值就无法更改。因此，每次对字符串进行修改时都会创建一个新的字符串对象，旧的字符串对象则会被丢弃。这种不可变性使得字符串在多线程环境下是安全的，并且可以作为常量使用。<br /><strong>用途</strong>：</p><ul><li>表示字符串常量。</li><li>在字符串操作不频繁的场景下使用，例如配置文件、类文件的路径等。</li></ul><h5 id="stringbuffer"><a class="markdownIt-Anchor" href="#stringbuffer"></a> StringBuffer</h5><p><code>StringBuffer</code> 类是 Java 中可变字符串的实现，它允许我们在字符串中进行添加、修改和删除操作。与 <code>String</code> 不同，<code>StringBuffer</code> 是可变的，可以动态地改变其内容，而不会创建新的对象。因此，<code>StringBuffer</code> 适用于需要频繁进行字符串操作的场景，例如在循环中构建字符串、拼接大量字符串等。<br /><strong>用途</strong>：</p><ul><li>多线程环境下需要进行频繁的字符串拼接或修改操作时使用。</li></ul><h5 id="stringbuilder"><a class="markdownIt-Anchor" href="#stringbuilder"></a> StringBuilder</h5><p><code>StringBuilder</code> 类与 <code>StringBuffer</code> 类功能类似，也是可变字符串的实现。与 <code>StringBuffer</code> 不同的是，<code>StringBuilder</code> 是非线程安全的，但是它的性能通常更好。因此，如果在单线程环境中进行字符串操作，通常优先选择 <code>StringBuilder</code>。<br /><strong>用途</strong>：</p><ul><li>单线程环境下需要频繁进行字符串操作时使用。</li></ul><blockquote><p><strong>线程问题</strong></p><ul><li>StringBuffer<br /><code>StringBuffer</code> 是线程安全的，因为它的方法都是同步的，即在方法内部使用了 <code>synchronized</code> 关键字来确保在多线程环境下操作字符串时的安全性。这意味着当多个线程同时访问同一个 <code>StringBuffer</code> 对象时，它们的操作会被正确地同步，不会发生数据不一致的情况。</li><li>StringBuilder<br /><code>StringBuilder</code> 是非线程安全的，因为它的方法没有进行同步处理。这样的设计可以提升性能[它不会引入额外的同步开销，这使得它的性能可能会稍微优于 StringBuffer。]，但也意味着在多线程环境下同时访问同一个 <code>StringBuilder</code> 对象时，可能会出现竞态条件（race condition），导致数据不一致或其他意外行为。</li></ul></blockquote><div class='spoiler collapsed'>    <div class='spoiler-title'>        点击显/隐内容[字符串图解]    </div>    <div class='spoiler-content'>        <p><strong>直接赋值</strong>：<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240413194420.png" alt="" /><br /><strong>字符数组和new</strong>：<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240413194445.png" alt="" /><br /><strong>字符串拼接的底层原理</strong>：<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240413194459.jpeg" alt="" /><br /><strong>字符串原理</strong>：<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240413194514.jpeg" alt="" /><br /><strong>面试题</strong>：<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240413194534.jpeg" alt="" /><br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240413194545.jpeg" alt="" /></p>    </div></div><h3 id="static-静态变量"><a class="markdownIt-Anchor" href="#static-静态变量"></a> static 静态变量</h3><h4 id="1-static关键字主要有两种作用"><a class="markdownIt-Anchor" href="#1-static关键字主要有两种作用"></a> 1 static关键字主要有两种作用：</h4><ul><li>为某特定数据类型或对象分配<strong>唯一</strong>的存储空间，而与创建对象的个数无关。</li><li>实现某个方法或属性与类关联在一起而不是对象关联在一起，因此不需要实例化对象，只需要用类名就可以调用静态的属性或方法。</li></ul><blockquote><p><strong>static的注意事项:</strong></p><ul><li>静态方法只能访问静态变量和静态方法</li><li>非静态方法可以访问静态变量或者静态方法,也可以访问非静态的成员变量和非静态的成员方法</li><li>静态方法中是没有this关键字<br />[总结]:<br />静态方法中,只能访问静态。<br />非静态方法可以访问所有。<br />静态方法中没有this关键字</li></ul></blockquote><h4 id="21-成员变量"><a class="markdownIt-Anchor" href="#21-成员变量"></a> 2.1 成员变量</h4><p>Java类提供了两种类型的变量：<code>用static</code>关键字修饰的<code>静态变量</code>和<code>不用static</code>关键字修饰的<code>实例变量</code>。</p><ul><li><strong>静态变量属于类</strong>，在内存中只有一个复制，只要静态变量所在的类被加载，这个静态变量就会被分配空间，因此就可以被使用了。对静态变量的引用有两种方式，分别是&quot;<strong>类.静态变量</strong>&quot;[<strong>推荐</strong>]和&quot;<strong>对象.静态变量</strong>&quot;。</li><li><strong>实例变量属于对象</strong>，只有对象被创建后，实例变量才会被分配内存空间，才能被使用，它在内存中存在多个复制，只有用&quot;<strong>对象.实例变量</strong>&quot;的方式来引用。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> score<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//非静态属性不可直接用类名直接调用,可以用利用对象调用</span>        <span class="token comment">//Student.score;  报错</span>        <span class="token class-name">Student</span> stu1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> score <span class="token operator">=</span> stu1<span class="token punctuation">.</span>score<span class="token punctuation">;</span>        <span class="token comment">//静态属性可直接用类名调用,也可以用对象调用</span>        <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token class-name">Student</span><span class="token punctuation">.</span>age<span class="token punctuation">;</span>        <span class="token keyword">int</span> age1 <span class="token operator">=</span> stu1<span class="token punctuation">.</span>age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>静态变量特点:</strong></p><ul><li>被该类所有对象共享</li><li>不属于对象,属于类</li><li>随着类的加载而加载,优先于对象存在</li><li>jdk8之前：放在方法区<br />jdk8及以后：存放在堆中反射的class对象（即类加载后会在堆中生成一个对应的class对象）的尾部。</li></ul><p><strong>静态变量调用方式:</strong></p><ul><li>类名调用[推荐]</li><li>对象名调用</li></ul></blockquote><h4 id="22-成员方法"><a class="markdownIt-Anchor" href="#22-成员方法"></a> 2.2 成员方法</h4><p>Java中提供了<code>static（静态）</code>方法和<code>非static（非静态）</code>方法。</p><ul><li>static方法是类的方法，不需要创建对象就可以被类名调用</li><li>而非static方法是对象的方法，只有对象被创建出来后才可以被使用</li><li><strong>static方法中不能使用this和super关键字，不能调用非static方法</strong>，只能访问所属类的静态成员变量和成员方法，因为当static方法被调用时，这个类的对象可能还没被创建，即使已经被创建了，也无法确定调用哪个对象的方法。同理，<strong>static方法也不能访问非static类型的变量</strong></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"say"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"run"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//System.out.println(age); 报错</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Student</span> stu1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//静态方法可以直接用类名调用，也可以用对象调用</span>        <span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stu1<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//非静态方法只能用对象调用</span>        <span class="token comment">//Student.run(); 报错</span>        stu1<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>单例设计模式：</strong><br />static一个很重要的用途就是实现单例设计模式。<strong>单例模式的特点是该类只能有一个实例</strong>，为了实现这一功能，必须隐藏类的构造函数，即把构造函数声明为private，并提供一个创建对象的方法，<strong>由于构造对象被声明为private，外界无法直接创建这个类型的对象，只能通过该类提供的方法来获取类的对象</strong>，要达到这样的目的只能把创建对象的方法声明为<code>static</code>，程序实例如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> instance<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>instance<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>instance<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> instance<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>静态方法特点:</strong></p><ul><li>多用在测试类和工具类中</li><li>Javabean类中很少会用</li></ul><p><strong>静态方法调用方式:</strong></p><ul><li>类名调用[推荐]</li><li>对象名调用</li></ul></blockquote><h4 id="23-static代码块"><a class="markdownIt-Anchor" href="#23-static代码块"></a> 2.3 static代码块</h4><p>static代码块在类中是独立于成员变量和成员函数的代码块的。静态代码块先执行(优先级比构造方法还高),静态代码块中只能调用静态属性和方法，不能调用非静态的。<br /><strong>且<code>只执行一次</code>，非静态代码块在在每次创建新对象的时候都会执行一次</strong><br />可以应用于数据的初始化</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"匿名代码块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token comment">//静态代码块先执行，且只执行一次</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"静态代码块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"构造器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"============"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*输出结果:    静态代码块    匿名代码块    构造器    ============    匿名代码块    构造器*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="24-static内部类"><a class="markdownIt-Anchor" href="#24-static内部类"></a> 2.4 static内部类</h4><ul><li><strong>static内部类可以不依赖于外部类实例对象而被实例化</strong>，而通常的内部类需要外部类实例化后才能实例化。</li><li>静态内部类不能访问外部类的普通成员变量，<strong>只能访问外部类中的静态成员和静态成员方法</strong>，因为静态内部类是与类一起加载的。</li><li><strong>只有内部类才能被申明为static</strong>。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> inter<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> score<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"say"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"run"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> sinter<span class="token punctuation">&#123;</span>        <span class="token function">sinter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是静态内部类"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//只能访问外部类中的静态成员和静态成员方法</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> inter<span class="token punctuation">&#123;</span>        <span class="token function">inter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是非静态内部类"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>age<span class="token operator">+</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//运行</span><span class="token keyword">public</span> <span class="token keyword">class</span> text <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//静态内部类可直接实例化</span>        <span class="token class-name">Student</span><span class="token punctuation">.</span>sinter sinter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token function">sinter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//非静态内部类需要创建一个外部类对象再实例化</span>        <span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Student</span><span class="token punctuation">.</span>inter inter <span class="token operator">=</span> student<span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token function">inter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="继承问题"><a class="markdownIt-Anchor" href="#继承问题"></a> 继承问题</h3><h4 id="1-继承的概念"><a class="markdownIt-Anchor" href="#1-继承的概念"></a> 1 继承的概念</h4><p>继承是<strong>面向对象三大特征之一</strong>，可以使得<strong>子类具有父类的属性和方法</strong>，还可以在<strong>子类中重新定义（重写），以及追加属性和方法（添加额外的父类没有的子类特有的方法）</strong></p><h4 id="2-实现格式"><a class="markdownIt-Anchor" href="#2-实现格式"></a> 2 实现格式</h4><ul><li>继承通过<code>extends</code>关键字实现</li><li>用法:<code>class 子类 extends 父类 &#123;&#125;</code><br />举例: class Dog extends Animal {}</li></ul><h4 id="3-子类的特点"><a class="markdownIt-Anchor" href="#3-子类的特点"></a> 3 子类的特点</h4><ul><li>可以继承父类的<strong>成员变量</strong>[如果子类中有同名的成员变量,父类的变量会被隐藏]和<strong>虚方法表中的成员方法</strong>[非private、非static、非final]</li><li>子类可以有自己的成员变量和方法</li><li>子类可以<strong>重写从父类继承下来的成员方法</strong>[如果发生了重写,则会覆盖父类继承下来的成员方法]</li><li><strong>子类并不会继承父类的构造方法</strong>[因为父类的构造方法名与子类名存在冲突],因此我们创建子类时需手动添加子类的构造方法</li></ul><blockquote><p><strong>注意:</strong><br />子类中可以使用父类中的<strong>静态方法[static修饰]</strong>,但这是因为静态方法属于类而不是对象，子类可以直接通过父类名来调用父类的静态方法,这种调用方式不涉及继承关系，只是通过类名来访问类的静态成员。它们并不会参与继承的机制。</p></blockquote><h4 id="4-继承中成员变量访问的特点"><a class="markdownIt-Anchor" href="#4-继承中成员变量访问的特点"></a> 4 继承中成员变量访问的特点</h4><ul><li><code>遵循就近原则:局部变量-&gt;成员变量-&gt;父类</code><ul><li>先在子类的局部变量找，要是找到就用这个局部变量的值（就算有一个名字一模一样的成员变量，那也不会去访问哪个成员变量的）</li><li>然后要是在局部变量里面找不到的话，就去成员变量去去找</li><li>要是成员变量找不到的话，就去父类的成员变量去找</li><li>要是父类没有就找父类的父类</li><li>……</li><li>要是都没有找到就报错</li></ul></li></ul><h4 id="5-this-super"><a class="markdownIt-Anchor" href="#5-this-super"></a> 5 this &amp; super</h4><ul><li><code>this</code>:代表本类对象(且是调用this所在方法的那个对象)的引用</li><li><code>super</code>:代表对象父类的引用,可以调用上一级的那个类的方法或属性</li></ul><p><strong>用法</strong>:可以解决无法访问子类和父类中相同名称的成员的问题</p><ul><li>成员变量:<ul><li>this.成员变量 -&gt; 访问本类成员变量</li><li>super.成员变量 -&gt; 访问父类成员变量</li></ul></li><li>成员方法:<ul><li>this.成员方法 -&gt; 访问本类成员方法</li><li>super.成员方法 -&gt; 访问父类成员方法</li></ul></li><li>构造方法:<ul><li>this(…) -&gt; 访问本类构造方法</li><li>super(…) -&gt; 访问父类构造方法</li></ul></li></ul><blockquote><p><strong>注意：</strong><br />不能在<code>静态方法</code>中使用this和super关键字。<br />因为静态方法是属于类而不是对象实例的,而<code>this</code>和<code>super</code>关键字是关于对象实例的引用。</p></blockquote><p><strong>构造方法中的默认super</strong><br />继承中构造方法的访问特点:<br />​子类会继承父类中的数据，可能还会使用父类的数据。所以，子类初始化之前，一定要先完成父类数据的初始化，原因在于，<strong>每一个子类构造方法的第一条语句默认都是：super()。但是你只要自己写了super(……)调用父类的带参构造方法,那个默认隐藏的super()就失效了。</strong><br /><mark>注意：子类中所有的构造方法默认隐藏地有一个super()，都会访问父类中无参的构造方法[如果手动添加了一个super(……)调用父类的带参构造方法,那个默认隐藏的super()就会失效]</mark></p><blockquote><p><strong>问题：如果父类中没有无参构造方法，只有带参构造方法，该怎么办呢？</strong></p><ul><li>通过使用super关键字去显示的调用父类的带参构造方法</li><li>在父类中自己提供一个无参构造方法</li></ul><p><strong>推荐方案：</strong><br />​自己给出无参构造方法</p><hr /><p><strong>补充说明</strong><br />除了已经提到的内容外，还有一些关于 <code>this</code> 和 <code>super</code> 的使用注意事项：</p><ol><li><strong>this() 和 super() 不能同时出现在同一个构造方法中</strong>：在同一个构造方法中，<code>this()</code> 和 <code>super()</code> 只能出现一个，并且必须是构造方法的第一条语句。</li><li><strong>this() 和 super() 只能用于构造方法</strong>：<code>this()</code> 和 <code>super()</code> 关键字只能用于构造方法中，不能用于普通方法。</li><li><strong>this 和 super 不能用于静态方法</strong>：<code>this</code> 和 <code>super</code> 关键字是关于对象实例的引用，而静态方法属于类而不是对象实例，因此无法在静态方法中使用这两个关键字。</li><li><strong>super 关键字可以在构造方法之外使用</strong>：<code>super</code> 关键字除了可以在构造方法中调用父类构造方法之外，还可以在子类的其他方法中使用来调用父类的方法或属性。</li></ol></blockquote><h4 id="6-方法的重写"><a class="markdownIt-Anchor" href="#6-方法的重写"></a> 6 方法的重写</h4><ul><li><strong>继承关系</strong>：方法重写是建立在类之间的继承关系上。子类可以继承父类的方法并对其进行重写。</li><li><strong>方法签名</strong>：子类中重写的方法必须与父类中被重写的方法具有相同的方法签名，包括方法名、参数列表和返回类型。[<strong>方法签名是指方法的名称以及参数的类型和顺序</strong>]。</li><li><strong>访问修饰符</strong>：子类中重写的方法的访问修饰符不能比父类中被重写方法的访问修饰符更严格。例如，如果父类中的方法是public，那么子类中重写的方法也必须是public，不能是protected或者private。</li><li><strong>异常</strong>：子类中重写的方法不能抛出比父类中被重写方法更宽泛的异常，但可以抛出更窄的异常，或者不抛出异常。</li><li><strong>返回类型</strong>：在Java 5之前，返回类型必须完全匹配。但在Java 5及以后版本，可以使用协变返回类型，即子类中重写的方法的返回类型可以是父类中被重写方法返回类型的子类型。</li><li><strong>重写的Override注解</strong>:用来检测当前的方法，是否是重写的方法，起到【校验】的作用。就是检查你写的方法有没有严格符合重写的格式。<br />下面是一个简单的示例来说明方法重写：</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">makeSound</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Animal makes a sound"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">makeSound</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Dog barks"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Animal</span> animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        animal<span class="token punctuation">.</span><span class="token function">makeSound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Output: Animal makes a sound</span>                <span class="token class-name">Animal</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dog<span class="token punctuation">.</span><span class="token function">makeSound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Output: Dog barks</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注意</strong>:<br />在Java中，<mark>不能重写静态方法</mark>。虽然子类可以定义与父类中静态方法具有相同的名称、参数格式和类型和返回值的方法，但这并不是方法重写，而是方法隐藏。<br />静态方法是与类相关联的方法，它们不是对象的一部分。当子类定义了一个与父类中静态方法同名的静态方法时，子类的方法将隐藏父类中的方法，而不是重写它。在调用静态方法时，编译器会根据引用类型来确定使用哪个方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Parent</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">staticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Parent's static method"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Child</span> <span class="token keyword">extends</span> <span class="token class-name">Parent</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">staticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Child's static method"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Parent</span><span class="token punctuation">.</span><span class="token function">staticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Output: Parent's static method</span>        <span class="token class-name">Child</span><span class="token punctuation">.</span><span class="token function">staticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Output: Child's static method</span>        <span class="token class-name">Parent</span> parent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        parent<span class="token punctuation">.</span><span class="token function">staticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Output: Parent's static method</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的示例中，即使我们使用<code>Parent类型</code>的引用指向<code>Child对象</code>，调用的仍然是<code>Parent类中的静态方法</code>。<mark>这是因为静态方法的调用是通过编译时类型（在编译时确定的类型）来决定的，而不是运行时类型（实际对象的类型）</mark>。</p></blockquote><h4 id="7-继承的优劣"><a class="markdownIt-Anchor" href="#7-继承的优劣"></a> 7 继承的优劣</h4><ul><li><strong>好处:</strong><ul><li>提高了代码的复用性(多个类相同的成员可以放到同一个父类中)</li><li>提高了代码的维护性(如果方法的代码需要修改，修改父类的一处方法即可)</li></ul></li><li><strong>弊端:</strong><ul><li>继承让类与类之间产生了关系，类的耦合性增强了，当父类发生变化时子类实现也不得不跟着变化，削弱了子类的独立性。</li></ul></li></ul><h4 id="8-java继承的注意事项"><a class="markdownIt-Anchor" href="#8-java继承的注意事项"></a> 8 java继承的注意事项</h4><ul><li>Java中类只支持单继承，不支持多继承（但是可以实现多个接口，单继承，多实现）<ul><li>错误范例：class A extends B, C { } <mark>[Java不允许存在多继承]</mark></li></ul></li><li>Java中所有类的根类都是<code>Object</code>类</li><li>Java中类支持多层继承</li><li>继承相关图解如下:</li></ul><div class='spoiler collapsed'>    <div class='spoiler-title'>        点击显/隐内容[继承相关图解]    </div>    <div class='spoiler-content'>        <p><strong>子类可以从父类继承:</strong><br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-04-05%20225901.png" alt="" /><br /><strong>方法的继承:</strong><br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-04-07%20235906.png" alt="" /><br /><strong>方法的重写:</strong><br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/Snipaste_2024-04-06_22-08-02.png" alt="" /><br /><strong>this &amp; super:</strong><br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-04-08%20174612.png" alt="" /><br /><strong>super内存图:</strong><br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-04-08%20172737.png" alt="" /></p>    </div></div><h3 id="多态问题"><a class="markdownIt-Anchor" href="#多态问题"></a> 多态问题</h3><h4 id="1-多态的概念"><a class="markdownIt-Anchor" href="#1-多态的概念"></a> 1 多态的概念</h4><ul><li><strong>同类型的对象,表现出的不同形态</strong></li><li>表现形式:<ul><li><code>父类类型 对象名称 = 子类对象</code></li><li>Fu f = new Zi();</li></ul></li><li>多态的前提:<ul><li>有继承关系</li><li>由父类引用指向子类对象</li><li>有方法重写</li></ul></li><li>多态的好处:<br />使用父类型作为参数,可以接收所有子类对象,体现多态的拓展性与便利</li></ul><h4 id="2-多态调用成员的特点"><a class="markdownIt-Anchor" href="#2-多态调用成员的特点"></a> 2 多态调用成员的特点</h4><ul><li>变量调用:<strong>编译看左边,运行也看左边</strong></li><li>方法调用:<strong>编译看左边,运行看右边</strong></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"Animal"</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">makeSound</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Animal makes a sound"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">staticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Animal's static method"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"Dog"</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">makeSound</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Dog barks"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">staticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Dog's static method"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Animal</span> animal1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 父类引用指向子类对象</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>animal1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 编译时看左边，运行时也看左边，输出: "Animal"</span>        animal1<span class="token punctuation">.</span><span class="token function">makeSound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 编译时看左边，运行时看右边，输出: "Dog barks"</span>        animal1<span class="token punctuation">.</span><span class="token function">staticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 编译时看左边，运行时也看左边，输出: "Animal's static method"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-多态的弊端"><a class="markdownIt-Anchor" href="#3-多态的弊端"></a> 3 多态的弊端:</h4><ul><li><strong>不能调用子类的特有方法[因为在编译的时侯会先检查左边的父类中有没有这个方法,如果没有直接报错]</strong></li><li>解决方案:<br />将变量转换为子类类型<br />Dog d = (Dog) a;    [只能强转为new出来的那个类型,强转类型与真实对象类型不一致会报错]</li></ul><h4 id="4-强转类型"><a class="markdownIt-Anchor" href="#4-强转类型"></a> 4 强转类型</h4><ul><li><code>instanceof</code>:用于在运行时确定一个对象是否是某个类的实例或者其子类的实例。它的语法形式为：</li><li>用法:<code>object instanceof ClassName</code><br /><code>instanceof</code>运算符返回一个布尔值，如果 object 是 ClassName 类型的实例或者其子类的实例，则返回 true，否则返回 false。[可搭配if语句使用]</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"Animal"</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">makeSound</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Animal makes a sound"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"Dog"</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">makeSound</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Dog barks"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Dog fetches a stick"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Animal</span> animal1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 父类引用指向子类对象</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>animal1 <span class="token keyword">instanceof</span> <span class="token class-name">Dog</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Dog</span> dog <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Dog</span><span class="token punctuation">)</span> animal1<span class="token punctuation">;</span>            dog<span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 如果 animal1 是 Dog 类型的实例，则调用 fetch() 方法</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在jdk14以后有以下新特性</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>animal1 <span class="token keyword">instanceof</span> <span class="token class-name">Dog</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>animal1 <span class="token keyword">instanceof</span> <span class="token class-name">Dog</span> d<span class="token punctuation">)</span>     <span class="token class-name">Dog</span> dog <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Dog</span><span class="token punctuation">)</span> animal1<span class="token punctuation">;</span>       <span class="token operator">&lt;=</span><span class="token operator">></span>     <span class="token comment">//先判断a是否为Dog类型，如果是，则强转成Dog类型，转换之后变量名为d</span>                                           <span class="token comment">//如果不是，则不强转，结果直接是false</span><span class="token punctuation">&#125;</span>                                          <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="包与导包"><a class="markdownIt-Anchor" href="#包与导包"></a> 包与导包</h3><h4 id="1-包"><a class="markdownIt-Anchor" href="#1-包"></a> 1 包</h4><h5 id="11-包的概念"><a class="markdownIt-Anchor" href="#11-包的概念"></a> 1.1 包的概念</h5><p>包就是文件夹。用来管理各种不同功能的Java类,方便后期维护。</p><h5 id="12-包的定义格式"><a class="markdownIt-Anchor" href="#12-包的定义格式"></a> 1.2 包的定义格式</h5><ul><li>包名的规则: <code>公司域名反写+包的作用</code>,需要全部英文小写,见名知意。<ul><li>eg：ink.lusy.blog</li></ul></li></ul><h5 id="13-带包编译带包运行"><a class="markdownIt-Anchor" href="#13-带包编译带包运行"></a> 1.3 带包编译&amp;带包运行</h5><ul><li>带包编译：javac -d . 全类名.java<ul><li>eg：java -d . ink.lusy.blog.HelloWorld.java</li></ul></li><li>带包运行：java 全类名<ul><li>eg：java ink.lusy.blog.HelloWorld</li></ul></li><li>全类名：包名+类名</li></ul><h4 id="2-导包"><a class="markdownIt-Anchor" href="#2-导包"></a> 2 导包</h4><h5 id="21-导包的意义"><a class="markdownIt-Anchor" href="#21-导包的意义"></a> 2.1 导包的意义</h5><ul><li>使用不同包下的类时，使用的时候要写类的全路径，写起来太麻烦了</li><li>为了简化带包的操作，Java就提供了导包的功能</li></ul><blockquote><p><strong>注意</strong>：如果同时使用两个包中的同名类，需要用全类名。[导包将不再适用]</p></blockquote><h3 id="final"><a class="markdownIt-Anchor" href="#final"></a> final</h3><p><code>final</code>：表示最终的、不可改变的</p><h4 id="1-修饰类"><a class="markdownIt-Anchor" href="#1-修饰类"></a> 1 修饰类</h4><p><strong>作用</strong>：不能再被其他类继承</p><ul><li>表明该类为最终类，不能再被其他类继承</li><li>该类中的所有方法都是最终方法(隐式地被<code>final</code>修饰)</li></ul><p><strong>应用场景</strong>：</p><ul><li><strong>工具类（Utility Classes）</strong>: 如果某个类仅提供一组静态方法或者常量，并且不需要被继承修改，可以将其定义为final，例如Java中的java.lang.Math类就是一个典型的工具类。</li><li><strong>不可变类（Immutable Classes）</strong>: 不可变类是指其实例一旦创建就不能被修改的类，一般来说，不可变类应该是final的，以确保它们的状态不会被修改。</li><li><strong>涉及安全敏感信息的类</strong>: 如果某个类涉及到处理安全敏感信息，例如密码、密钥等，为了确保安全性，应该将其定义为final，避免被子类继承修改。</li><li><strong>单例模式类（Singleton Classes）</strong>: 单例模式中的类通常需要保证只有一个实例存在，并且提供全局访问点，为了确保单例的正确性，可以将单例类定义为final，防止被继承修改。</li><li><strong>为了提高性能的类</strong>: 在一些性能敏感的场景下，为了确保类的行为不被修改并且获得更好的性能，可以将其定义为final，使得编译器可以进行更多的优化。</li><li><strong>经常需要修改的类（迭代更新会经常改动的类）</strong>：final类可以避免继承链的耦合性，减少了父类变更导致子类需要同步修改的风险，符合&quot;低耦合，高内聚&quot;的设计原则。</li></ul><h4 id="2-修饰方法"><a class="markdownIt-Anchor" href="#2-修饰方法"></a> 2 修饰方法</h4><p><strong>作用</strong>：子类不能重写(覆盖)该方法<br /><strong>应用场景</strong>：对继承没有太大意义的方法，或者父类自身特有的方法，这些方法不需要给子类使用，从而定义为最终方法，在类继承时，可以降低耦合度</p><h4 id="3-修饰变量"><a class="markdownIt-Anchor" href="#3-修饰变量"></a> 3 修饰变量</h4><ul><li>被<code>final</code>修饰的变量统称常量。</li><li><strong>常量的命名规范</strong>:<ul><li>单个单词:全部大写</li><li>多个单词:全部大写，单词之间用下划线隔开</li></ul></li></ul><blockquote><p>实际开发中，常量一般作为系统的配置信息，方便维护，提高可读性，</p></blockquote><h5 id="31-修饰局部变量"><a class="markdownIt-Anchor" href="#31-修饰局部变量"></a> 3.1 修饰局部变量</h5><p><strong>作用</strong>：<code>final</code>修饰的变量只能被赋值一次，是不可改变的<br /><strong>优点</strong>：不需要重复的创建对象。</p><blockquote><p><strong>注意</strong>：<br />这里说的final修饰的变量不可改变分为两种：</p><ul><li>对于基本数据类型：指的是数值不可改变</li><li>对于引用数据类型：指的是变量存储的地址不可改变，对象内部的数据可以改变<br />[变量存的值不可改变，对于基本数据类型而言，变量存的是数值，对于引用数据类型而言，变量存的是地址]</li></ul></blockquote><h5 id="32-修饰全局变量属性"><a class="markdownIt-Anchor" href="#32-修饰全局变量属性"></a> 3.2 修饰全局变量(属性)</h5><p>作用与上述局部变量一致，但需要注意以下3点</p><ul><li>final修饰全局变量，必须手动赋初始值</li><li>对于final修饰的全局变量，要么直接赋值，要么通过构造方法赋值</li><li>对于未直接赋值的final类型的全局变量，所有的构造方法都必须对该变量进行赋值</li></ul><h3 id="权限修饰符"><a class="markdownIt-Anchor" href="#权限修饰符"></a> 权限修饰符</h3><p><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-04-09%20105030.png" alt="" /></p><h3 id="代码块"><a class="markdownIt-Anchor" href="#代码块"></a> 代码块</h3><p>在Java中，代码块是一段用花括号 <code>&#123;&#125;</code> 括起来的代码，它可以在不同的位置出现，并且有不同的类型，包括局部代码块、构造代码块和静态代码块。</p><h4 id="1-局部代码块local-blocks"><a class="markdownIt-Anchor" href="#1-局部代码块local-blocks"></a> 1 局部代码块（Local Blocks）：</h4><ul><li>局部代码块是定义在方法体内的代码块，通常用于限定变量的作用范围。</li><li>局部代码块中声明的变量的作用范围仅限于该代码块内部。</li><li>局部代码块在执行完毕后，其中声明的变量会被销毁，不再占用内存空间。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exampleMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 开始局部代码块</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"x inside local block: "</span> <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 结束局部代码块</span>    <span class="token comment">// 这里无法访问局部代码块中的变量 x</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-构造代码块initializer-blocks"><a class="markdownIt-Anchor" href="#2-构造代码块initializer-blocks"></a> 2 构造代码块（Initializer Blocks）：</h4><ul><li>构造代码块是定义在类中，没有任何修饰符（如static、public等）的代码块，它在每次创建对象时都会被执行。</li><li>构造代码块主要用于初始化对象的共同属性，在每个构造函数之前执行。</li><li>构造代码块不能被显式调用，它会在对象创建时自动执行。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleClass</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 构造代码块</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Constructor block executed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">ExampleClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Constructor executed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ExampleClass</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExampleClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-静态代码块static-blocks"><a class="markdownIt-Anchor" href="#3-静态代码块static-blocks"></a> 3 静态代码块（Static Blocks）：</h4><ul><li>静态代码块是定义在类中，使用 static 关键字修饰的代码块，它在类加载时执行，且只执行一次。</li><li>静态代码块主要用于进行类的初始化操作，如加载驱动程序、初始化静态变量等。</li><li>静态代码块在程序启动时自动执行，无需显式调用。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleClass</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 静态代码块</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Static block executed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 执行 main 方法时会触发类的加载，从而执行静态代码块</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Inside main method"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="抽象类和抽象方法"><a class="markdownIt-Anchor" href="#抽象类和抽象方法"></a> 抽象类和抽象方法</h3><h4 id="1-基本概念-2"><a class="markdownIt-Anchor" href="#1-基本概念-2"></a> 1 基本概念</h4><ul><li>抽象方法：将<strong>共性的</strong>行为（方法）抽取到父类之后。由于每一个子类执行的内容是不一样，所以,在父类中不能确定<strong>具体的方法体</strong>，该方法就可以定义为抽象方法。</li></ul><blockquote><p>抽象方法就是以abstract修饰的方法，这种方法<mark>只声明返回的数据类型、方法名称和所需的参数</mark>，没有方法体，也就是说抽象方法只需要声明而不需要实现</p></blockquote><ul><li>抽象类:如果一个类中存在抽象方法,那么该类就必须声明为抽象类</li></ul><h4 id="2-定义格式"><a class="markdownIt-Anchor" href="#2-定义格式"></a> 2 定义格式</h4><ul><li>抽象方法：<code>public abstract 返回值类型 方法名(参数列表);</code>[分号;不能忘记]</li><li>抽象类：<code>public abstract class 类名 &#123;&#125;</code></li></ul><h4 id="3-注意事项"><a class="markdownIt-Anchor" href="#3-注意事项"></a> 3 注意事项</h4><ul><li><strong>抽象类不能实例化</strong></li><li>抽象类中不一定有抽象方法，有抽象方法的类一定是抽象类<br />[未包含抽象方法的抽象类，目的就是不想让调用者创建该类对象，通常用于某些特殊的类结构设计。比较少用]</li><li>抽象类可以有构造方法[给子类继承]</li><li>抽象类的子类<ul><li>要么重写抽象类中的所有抽象方法</li><li>要么是抽象类</li></ul></li></ul><h4 id="4-意义"><a class="markdownIt-Anchor" href="#4-意义"></a> 4 意义</h4><ul><li>抽取共性时，无法确定方法体，就可以把方法定义为抽象的。</li><li>强制让子类按照某种格式进行重写。[提高代码可读性]</li></ul><h3 id="接口"><a class="markdownIt-Anchor" href="#接口"></a> 接口</h3><h4 id="1-基本概念-3"><a class="markdownIt-Anchor" href="#1-基本概念-3"></a> 1 基本概念</h4><p>简单的说，接口就是一种被规范的标准，它定义了一组行为或功能，任何符合这个标准的类都可以被看作是这个接口的实现。<strong>接口的表现在于对行为的抽象</strong>。<br />[类是对属性的抽象，接口是对行为的抽象]</p><h4 id="2-定义和使用"><a class="markdownIt-Anchor" href="#2-定义和使用"></a> 2 定义和使用</h4><ul><li>接口用关键字<code>interface</code>来定义：<ul><li><strong>pubilc interface 接口名 {}</strong></li><li><strong>interface 接口名 {}</strong></li><li>两种定义方式的区别：接口的访问权限不一样</li></ul></li><li><strong>接口不能实例化</strong></li><li>接口和类之间是<strong>实现关系</strong>,通过<code>implements</code>关键字表示<ul><li><strong>public class 类名 implements 接口名1 接口名2 …… {}</strong></li></ul></li><li>接口的子类(实现类)<ul><li>要么重写接口中的所有抽象方法</li><li>要么是抽象类</li></ul></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 定义一个接口</span><span class="token keyword">interface</span> <span class="token class-name">Shape</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 接口中的常量</span>    <span class="token keyword">double</span> <span class="token constant">PI</span> <span class="token operator">=</span> <span class="token number">3.14159</span><span class="token punctuation">;</span><span class="token comment">//前面有默认修饰符：public static final [在编译环节会隐式添加]</span>    <span class="token comment">// 接口中的抽象方法</span>    <span class="token keyword">double</span> <span class="token function">calculateArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//前面有默认修饰符：public abstract [在编译环节会隐式添加]</span><span class="token punctuation">&#125;</span><span class="token comment">// 实现接口的类</span><span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token keyword">implements</span> <span class="token class-name">Shape</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> radius<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token keyword">double</span> radius<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>radius <span class="token operator">=</span> radius<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 实现接口中的抽象方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">calculateArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token constant">PI</span> <span class="token operator">*</span> radius <span class="token operator">*</span> radius<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 主类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 调用接口中的常量 -> 静态变量可以直接用类名调用[推荐]</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"PI 常量的值: "</span> <span class="token operator">+</span> <span class="token class-name">Shape</span><span class="token punctuation">.</span><span class="token constant">PI</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建 Circle 对象</span>        <span class="token class-name">Circle</span> circle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token number">5.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 调用实现接口的方法</span>        <span class="token keyword">double</span> area <span class="token operator">=</span> circle<span class="token punctuation">.</span><span class="token function">calculateArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"圆的面积: "</span> <span class="token operator">+</span> area<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-成员特点"><a class="markdownIt-Anchor" href="#3-成员特点"></a> 3 成员特点</h4><ul><li>成员变量<ul><li>只能是常量</li><li>默认修饰符：<strong><code>public</code> static final</strong></li></ul></li><li>构造方法<ul><li>没有</li></ul></li><li>成员方法<ul><li>只能是抽象方法[JDK7以前]</li><li>默认修饰符：<strong>public abstract</strong></li><li><code>JDK8的新特性</code>: 接口中可以定义有方法体的方法（默认、静态）</li><li><code>JDK9的新特性</code>: 接口中可以定义私有方法</li></ul></li></ul><h4 id="4-接口和类之间的关系"><a class="markdownIt-Anchor" href="#4-接口和类之间的关系"></a> 4 接口和类之间的关系</h4><ul><li>类和类的关系<br />继承关系,只能单继承,不能多继承,但是可以多层继承</li><li>类和接口的关系<br />实现关系,可以单实现,也可以多实现,还可以在继承一个类的同时实现多个接口</li><li>接口和接口的关系<br />继承关系,可以单继承,也可以多继承<br /><strong>public interface a <code>extends</code> b,c,d…{}</strong></li></ul><blockquote><p><strong>接口多继承的好处</strong>：<br />定义了许多接口，如果一个设备要同时实现那么多接口将是不小的开销，对于同能同类的可以把他用一个接口继承起来，这样这个接口就要了那些接口的全部功能，我们使用类只要实现一个就可以了。</p></blockquote><h4 id="5-jdk8以后接口中新增的方法"><a class="markdownIt-Anchor" href="#5-jdk8以后接口中新增的方法"></a> 5 JDK8以后接口中新增的方法</h4><h5 id="51-默认方法"><a class="markdownIt-Anchor" href="#51-默认方法"></a> 5.1 默认方法</h5><ul><li>允许在接口中定义<strong>默认方法</strong>，需要使用关键字<code>default</code>修饰<ul><li>作用：解决接口升级的问题[允许在接口中添加新的方法而不会破坏现有的实现类。]</li></ul></li><li>默认方法的定义格式<ul><li><strong>public <code>default</code> 返回值类型 方法名(参数列表) { }</strong></li><li>eg：public <code>default</code> void show() { }</li></ul></li><li>调用方法<ul><li>实现类直接调用接口默认方法即可。[类名.默认方法名(参数列表)]</li></ul></li><li>默认方法的注意事项<ul><li>默认方法不是抽象方法，所以<strong>不强制被重写</strong>。但是如果被重写，重写的时候要去掉<code>default</code>关键字</li><li>public可以省略，default不能省略</li><li>如果实现了多个接口，多个接口中存在相同名字的默认方法，子类就必须对该方法进行重写</li></ul></li></ul><h5 id="52-静态方法"><a class="markdownIt-Anchor" href="#52-静态方法"></a> 5.2 静态方法</h5><ul><li>允许在接口中定义<strong>静态方法</strong>，需要使用关键字<code>static</code>修饰<ul><li>调用时无需实例化接口的实现类[通常用于实现工具类或提供通用功能的方法]</li></ul></li><li>静态方法的定义格式<ul><li><strong>public <code>static</code> 返回值类型 方法名(参数列表) { }</strong></li><li>eg：public <code>static</code> void show() { }</li></ul></li><li>调用方法<ul><li>只能通过接口名调用</li></ul></li><li>静态方法的注意事项<ul><li>静态方法只能通过接口名调用，不能通过实现类名或者对象名调用</li><li>public可以省略，static不能省略</li></ul></li></ul><blockquote><p><strong>默认方法和静态方法功能上的区别</strong></p><p><strong>默认方法（Default Methods）</strong>：</p><ul><li>默认方法是接口中带有默认实现的方法，它们允许在接口中添加新的方法而不会破坏现有的实现类。</li><li>默认方法可以被实现类选择性地覆盖，以满足特定需求。</li><li>默认方法主要用于接口的演进，允许向现有接口添加新的功能而不会影响已有的实现类。</li></ul><p><strong>静态方法（Static Methods）</strong>：</p><ul><li>静态方法是在接口中带有 <code>static</code> 关键字修饰的方法，它们不是接口的实例方法，而是与接口直接关联的方法。</li><li>静态方法可以直接通过接口名称调用，无需实例化接口的实现类。</li><li>静态方法通常用于实现工具类或提供通用功能的方法。</li></ul></blockquote><h4 id="6-jdk9以后接口中新增的方法"><a class="markdownIt-Anchor" href="#6-jdk9以后接口中新增的方法"></a> 6 JDK9以后接口中新增的方法</h4><p><strong>接口中可以定义私有方法</strong></p><ul><li>权限范围：<strong>私有方法的访问权限仅限于接口内部</strong></li><li>作用：避免了代码的重复编写、隐藏接口的实现细节</li><li>私有方法的注意事项：<strong>私有方法无法被实现类覆盖或继承</strong>，它们只能在接口内部使用。</li></ul><h5 id="61-普通的私有方法对标jdk8中的默认方法"><a class="markdownIt-Anchor" href="#61-普通的私有方法对标jdk8中的默认方法"></a> 6.1 普通的私有方法[对标JDK8中的默认方法]</h5><ul><li>格式：<strong>private 返回值类型 方法名(参数列表) { }</strong></li><li>eg：private void show() { }</li></ul><h5 id="62-静态的私有方法对标jdk8中的静态方法"><a class="markdownIt-Anchor" href="#62-静态的私有方法对标jdk8中的静态方法"></a> 6.2 静态的私有方法[对标JDK8中的静态方法]</h5><ul><li>格式：<strong>private <code>static</code> 返回值类型 方法名(参数列表) { }</strong></li><li>eg：private <code>static</code> void show() { }</li></ul><h3 id="内部类"><a class="markdownIt-Anchor" href="#内部类"></a> 内部类</h3><p><strong>类的五大成员</strong>：<br />属性、方法、构造方法、代码块、内部类</p><p><strong>内部类的基本概念</strong>：<br />在一个类的里面，再定义一个类。[在A类的内部定义B类，B类就被称为内部类]</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Outer</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Inner</span> <span class="token punctuation">&#123;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//这里的Outer是外部类，Inner是内部类</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>内部类的作用</strong>：<br />内部类表示的事物是外部类的一部分，且内部类单独存在又没有任何意义<br />比如：汽车的发动机，ArrayList的迭代器。人的心脏</p><p><strong>内部类的访问特点</strong>：</p><ul><li>内部类可以直接访问外部类的成员，包括私有</li><li>外部类要访问内部类的成员，必须要创建对象[静态内部类中的静态成员不需要创建对象]</li></ul><h4 id="1-成员内部类"><a class="markdownIt-Anchor" href="#1-成员内部类"></a> 1 成员内部类</h4><ul><li>写在成员位置的，属于外部类的成员。</li><li>成员内部类可以被一些修饰符所修饰。[private、默认、protectd、public、static]</li><li>在成员内部类里面，JDK16之前不能定义静态变量，JDK16开始才可以定义静态变量</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">pubilc <span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> carName<span class="token punctuation">;</span>    <span class="token keyword">int</span> carAge<span class="token punctuation">;</span>    <span class="token keyword">int</span> carColor<span class="token punctuation">;</span>    <span class="token comment">//成员内部类</span>    <span class="token keyword">class</span> <span class="token class-name">Engine</span><span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> engineName<span class="token punctuation">;</span>        <span class="token keyword">int</span> engageAge<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="11-获取成员内部类对象"><a class="markdownIt-Anchor" href="#11-获取成员内部类对象"></a> 1.1 获取成员内部类对象</h5><ul><li>直接创建格式：<code>外部类名.内部类名 对象名 = new 外部类名().new 内部类名();</code></li><li>在外部类中编写方法，对外提供内部类的对象。[适用于内部类被private等修饰时使用]</li></ul><h5 id="12-外部类成员变量和内部类成员变量重名时在内部类如何访问"><a class="markdownIt-Anchor" href="#12-外部类成员变量和内部类成员变量重名时在内部类如何访问"></a> 1.2 外部类成员变量和内部类成员变量重名时，在内部类如何访问</h5><ul><li><code>外部类名.this.变量名</code><br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/20240414120751.png" alt="" /></li></ul><h4 id="2-静态内部类"><a class="markdownIt-Anchor" href="#2-静态内部类"></a> 2 静态内部类</h4><ul><li>静态内部类只能访问外部类中的静态变量和静态方法，要访问外部类的非静态成员，则需要通过创建外部类的实例来进行访问。</li><li>静态内部类是一种特殊的成员内部类。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">pubilc <span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> carName<span class="token punctuation">;</span>    <span class="token keyword">int</span> carAge<span class="token punctuation">;</span>    <span class="token keyword">int</span> carColor<span class="token punctuation">;</span>    <span class="token comment">//静态内部类</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Engine</span><span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> engineName<span class="token punctuation">;</span>        <span class="token keyword">int</span> engageAge<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="21-创建静态内部类对象的格式"><a class="markdownIt-Anchor" href="#21-创建静态内部类对象的格式"></a> 2.1 创建静态内部类对象的格式</h5><ul><li><code>外部类名.内部类名 对象名 = new 外部类名.内部类名();</code></li></ul><h5 id="22-成员调用"><a class="markdownIt-Anchor" href="#22-成员调用"></a> 2.2 成员调用</h5><ul><li>调用非静态成员的格式：先创建对象，用对象调用</li><li>调用静态成员的格式：<code>外部类名.内部类名.方法名()\变量名;</code></li></ul><h4 id="3-局部内部类"><a class="markdownIt-Anchor" href="#3-局部内部类"></a> 3 局部内部类</h4><ul><li>将内部类定义在方法里面就叫做局部内部类，类似于方法里面的局部变量</li><li>外界是无法直接使用，需要在方法内部创建对象并使用，</li><li>该类可以直接访问外部类的成员，也可以访问方法内的局部变量</li></ul><h4 id="4-匿名内部类"><a class="markdownIt-Anchor" href="#4-匿名内部类"></a> 4 匿名内部类</h4><ul><li>隐藏了名字的内部类，可以写在成员位置，也可以写在局部位置[更常见]</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//匿名内部类的格式</span><span class="token keyword">new</span> 类名\接口名<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    重写方法<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//最后的分号;，切记不能漏掉</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="41-格式细节"><a class="markdownIt-Anchor" href="#41-格式细节"></a> 4.1 格式细节</h5><ul><li>包含了继承或实现，方法重写，创建对象。</li><li>整体就是一个类的子类对象或者接口的实现类对象</li></ul><h5 id="42-应用场景"><a class="markdownIt-Anchor" href="#42-应用场景"></a> 4.2 应用场景</h5><p>当方法的参数是接口或者类时，<br />以接口为例，可以传递这个接口的实现类对象<br /><strong>如果实现类只要用一次，就可以用匿名内部类简化代码。</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Example</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 创建一个匿名内部类实例</span>        <span class="token class-name">EventListener</span> listener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onEvent</span><span class="token punctuation">(</span><span class="token class-name">String</span> event<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Event received: "</span> <span class="token operator">+</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">// 使用该实例</span>        <span class="token function">fireEvent</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">fireEvent</span><span class="token punctuation">(</span><span class="token class-name">EventListener</span> listener<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 模拟事件触发</span>        listener<span class="token punctuation">.</span><span class="token function">onEvent</span><span class="token punctuation">(</span><span class="token string">"Button clicked"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 定义事件监听接口</span>    <span class="token keyword">interface</span> <span class="token class-name">EventListener</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">void</span> <span class="token function">onEvent</span><span class="token punctuation">(</span><span class="token class-name">String</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id=""><a class="markdownIt-Anchor" href="#"></a> </h3><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习总结 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux学习笔记</title>
      <link href="/2024/03/16/linux/"/>
      <url>/2024/03/16/linux/</url>
      
        <content type="html"><![CDATA[<h2 id="linux学习"><a class="markdownIt-Anchor" href="#linux学习"></a> Linux学习</h2><h3 id="1-路径和特殊ip"><a class="markdownIt-Anchor" href="#1-路径和特殊ip"></a> 1 路径和特殊IP</h3><h4 id="11-基本路径"><a class="markdownIt-Anchor" href="#11-基本路径"></a> 1.1 基本路径</h4><ul><li><strong>绝对路径</strong>：以<code>根目录为起点</code>，描述路径的一种写法，路径描述以<code>/</code>开头</li><li><strong>相对路径</strong>：以<code>当前目录为起点</code>，描述路径的一种写法，路径不需要以<code>/</code>开头</li></ul><h4 id="12-特殊路径符"><a class="markdownIt-Anchor" href="#12-特殊路径符"></a> 1.2 特殊路径符</h4><ul><li><code>.</code>：表示当前目录，比如<code>cd ./Desktop</code>表示切换到当前目录下的Desktop目录内，与<code>cd Desktop</code>效果一致</li><li><code>..</code>：表示上一级目录，比如<code>cd ..</code>即可切换到上一级目录，<code>cd ../..</code>切换到上二级的目录</li><li><code>~</code>：表示home目录，比如<code>cd ~</code>即可切换到home目录,<code>cd ~/Desktop</code>,切换到home内的Desktop目录</li></ul><blockquote><p>练习：<br /><mark>当前工作目录内有一个test文件夹，文件夹内有一个文件hello.txt,描述文件的相对路径：</mark><br />test/hello.txt<br /><mark>在当前工作目录的上级目录有一个test文件夹，文件夹内有一个文件hello.txt,描述文件的相对路径：</mark><br />…/test/hello.txt<br /><mark>在home目录内有一个test文件夹，文件夹内有一个文件hello.txt,描述文件的相对路径：</mark><br />~/test/hello.txt</p></blockquote><h4 id="13-特殊ip地选"><a class="markdownIt-Anchor" href="#13-特殊ip地选"></a> 1.3 特殊IP地选</h4><ul><li><code>127.0.0.1</code>：指代本机</li><li><code>0.0.0.0</code>：<ul><li>可以用于指代本机</li><li>可以在端口绑定中来确定绑定关系</li><li>在一些IP地址限制中，表示所有IP的意思，如放行规则设置为0.0.0.0，表示允许任意IP访问</li></ul></li></ul><h4 id="14-主机名"><a class="markdownIt-Anchor" href="#14-主机名"></a> 1.4 主机名</h4><p><code>hostname</code>:查看主机名<br /><code>hostnamectl set-hostname 新名字</code>：修改主机名[更改主机名字，需要root]</p><h3 id="2-linux命令基础"><a class="markdownIt-Anchor" href="#2-linux命令基础"></a> 2 Linux命令基础</h3><h4 id="21-ls展示内容"><a class="markdownIt-Anchor" href="#21-ls展示内容"></a> 2.1 ls(展示内容)</h4><ul><li><code>ls</code>：展示当前工作目录(默认是home目录)下的内容(文件/文件夹)</li><li>用法：<code>ls [-a -l -h] [Linux路径]</code><br /><code>-a</code>:可以展示出隐藏的内容(<strong>以.开头的文件或文件夹默认被隐藏，需要-a才能显示出来</strong>)<br /><code>-l</code>:以列表的形式展开内容，展示更多细节(存在缩写:<code>ls -l</code>&lt;=&gt;<code>ll</code>)<br /><code>-h</code>:需要和-l选项搭配使用，以展示更加人性化的文件大小单位<br /><code>没有路径参数</code>：显示当前工作目录下的内容</li><li>组合使用：命令的选项是可以组合使用的，比如<code>ls -lah</code>,等同于<code>ls -a -l -h</code></li></ul><p><strong>图例：</strong> <img src="https://cdn.jsdelivr.net/gh/lusysakura3/Pictures@master/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-03-17%20104031.png" alt="Alt" /></p><h4 id="22-cd切换目录"><a class="markdownIt-Anchor" href="#22-cd切换目录"></a> 2.2 cd(切换目录)</h4><ul><li><code>cd</code>：可以切换当前目录</li><li>用法：<code>cd [Linux路径]</code><br /><code>使用路径参数</code>：切换到指定路径<br /><code>没有路径参数</code>：切换工作目录到当前用户的home</li></ul><h4 id="23-pwd显示路径"><a class="markdownIt-Anchor" href="#23-pwd显示路径"></a> 2.3 pwd(显示路径)</h4><ul><li><code>pwd</code>：输出当前所在的工作目录</li><li>用法：<code>pwd</code>(没有选项和参数)<br /><strong>图例：</strong> <img src="https://cdn.jsdelivr.net/gh/lusysakura3/Pictures@master/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-03-17%20205029.png" alt="Alt" /></li></ul><h4 id="24-mkdir创建目录"><a class="markdownIt-Anchor" href="#24-mkdir创建目录"></a> 2.4 mkdir(创建目录)</h4><ul><li><code>mkdir</code>：可以创建新的目录(文件夹)</li><li>用法：<code>mkdir [-p] Linux路径</code><br /><code>-p</code>：表示自动创建不存在的父目录，适用于创建连续多级的目录<br /><code>Linux路径</code>：即要创建的文件夹的路径</li><li>注意：普通用户下只有在自己的home目录下创建新目录的权限<br /><strong>图例：</strong><img src="https://cdn.jsdelivr.net/gh/lusysakura3/Pictures@master/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-03-17%20211000.png" alt="Alt" /></li></ul><h4 id="25-touch创建文件"><a class="markdownIt-Anchor" href="#25-touch创建文件"></a> 2.5 touch(创建文件)</h4><ul><li><code>touch</code>：可以创建新的文件</li><li>用法：<code>touch Linux路径</code><br /><code>Linux路径</code>：要创建的文件的路径</li></ul><h4 id="26-catmore查看文件"><a class="markdownIt-Anchor" href="#26-catmore查看文件"></a> 2.6 cat/more(查看文件)</h4><h5 id="261-cat"><a class="markdownIt-Anchor" href="#261-cat"></a> 2.6.1 cat</h5><ul><li><code>cat</code>：可以查看文件里面的内容</li><li>用法：<code>cat Linux路径</code></li></ul><h5 id="262-more"><a class="markdownIt-Anchor" href="#262-more"></a> 2.6.2 more</h5><ul><li><code>more</code>：可以查看文件里面的内容</li><li>用法：<code>more Linux路径</code></li><li>快捷键：<ul><li><code>Space</code>(空格键)：下一页</li><li><code>b</code>：上一页</li><li><code>\n</code>(回车键)：下一行</li><li><code>q</code>：退出</li></ul></li></ul><blockquote><p><strong>区别：</strong></p><ul><li><code>cat</code>是直接将内容全部显示出来</li><li><code>more</code>支持翻页，如果文件内容过多，可以一页页的展示</li></ul></blockquote><h4 id="27-cp复制文件文件夹"><a class="markdownIt-Anchor" href="#27-cp复制文件文件夹"></a> 2.7 cp(复制文件/文件夹)</h4><ul><li><code>cp</code>：可以用于复制文件/文件夹</li><li>用法：<code>cp [-r] 参数1 参数2</code><br /><code>-r</code>：用于复制文件夹，表示递归<br /><code>参数1</code>：Linux路径，表示被复制的文件/文件夹<br /><code>参数2</code>：Linux路径，表示要复制去的地方</li></ul><h4 id="28-mv移动文件文件夹"><a class="markdownIt-Anchor" href="#28-mv移动文件文件夹"></a> 2.8 mv(移动文件/文件夹)</h4><ul><li><code>mv</code>：可以用于移动文件/文件夹</li><li>用法：<code>mv 参数1 参数2</code><br /><code>参数1</code>：Linux路径，表示被移动的文件或文件夹<br /><code>参数2</code>：Linux路径，表示要移动去的地方，如果目标不存在，则进行改名，确保目标存在</li></ul><h4 id="29-rm删除文件文件夹"><a class="markdownIt-Anchor" href="#29-rm删除文件文件夹"></a> 2.9 rm(删除文件/文件夹)</h4><ul><li><p><code>rm</code>：可以用于删除文件/文件夹</p></li><li><p>用法：<code>rm [-r -f] 参数1 参数2 …… 参数n</code><br /><code>-r</code>：删除文件夹<br /><code>-f</code>：强制删除（不会弹出提示确认信息）</p><ul><li>普通用户删除内容不会弹出提示，只有root管理员用户删除内容会有提示</li><li>所以一般普通用户用不到<code>-f</code>选项</li></ul><p><code>参数1 参数2 …… 参数n</code>：表示要删除的文件/文件夹路径，按照空格隔开</p></li><li><p>支持通配符*：<code>用来做模糊匹配</code><br /><code>*</code>：通配符，即匹配任意内容(包含空)</p><ul><li><code>test*</code> 表示匹配任何以test开头的内容</li><li><code>*test</code> 表示匹配任何以test结尾的内容</li><li><code>*test*</code>表示匹配任何含有test的内容</li></ul></li></ul><p><strong>图例：</strong><img src="https://cdn.jsdelivr.net/gh/lusysakura3/Pictures@master/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-03-17%20232921.png" alt="Alt" /></p><h4 id="210-which查找命令的程序文件"><a class="markdownIt-Anchor" href="#210-which查找命令的程序文件"></a> 2.10 which(查找命令的程序文件)</h4><ul><li><code>which</code>：查看所使用的一系列命令的程序文件存放在哪里</li><li>用法：<code>which 要查找的命令(cd,cp,pwd……)</code></li></ul><h4 id="211-find查找文件"><a class="markdownIt-Anchor" href="#211-find查找文件"></a> 2.11 find(查找文件)</h4><ul><li><code>find</code>：可以搜索指定的文件</li><li>用法：<br />①按文件名查找：<code>find 起始路径 -name &quot;被查找文件名&quot;</code>[文件名支持通配符]<br />②按文件大小查找：<code>find 起始路径 -size +/- n[kMG]</code><ul><li><code>+,-</code>：表示大于和小于</li><li><code>n</code>：表示大小数字</li><li><code>kMG</code>：表示单位大小，<code>k</code>(小写字母)表示kb，<code>M</code>表示MB，<code>G</code>表示GB</li></ul></li></ul><blockquote><p><strong>注意：</strong><br /><code>find</code>命令存在权限问题，普通用户使用<code>find</code>命令时可能受到权限限制，无法搜索到部分目录或文件。</p></blockquote><h4 id="212-grep过滤文件行"><a class="markdownIt-Anchor" href="#212-grep过滤文件行"></a> 2.12 grep(过滤文件行)</h4><ul><li><code>grep</code>：从文件中通过关键字过滤文件行</li><li>用法：<code>grep [-n] &quot;关键字&quot; 文件路径</code><br /><code>-n</code>：表示在结果中显示匹配的行的行号<br /><code>&quot;关键字&quot;</code>：表示要过滤的关键词，带有空格或其他特殊符号，建议使用&quot; &quot;将关键词包围起来<br /><code>文件路径</code>：表示过滤内容的文件路径，<strong>可作为内容输入端口</strong></li></ul><h4 id="213-wc数量统计"><a class="markdownIt-Anchor" href="#213-wc数量统计"></a> 2.13 wc(数量统计)</h4><ul><li><code>wc</code>：可以统计文件的行数、单词数量等</li><li>用法：<code>wc [-c -m -l -w] 文件路径</code><br /><code>-c</code>：统计bytes数量<br /><code>-m</code>：统计字符数量<br /><code>-l</code>：统计行数<br /><code>-w</code>：统计单词数量<br /><strong>没有输入选项</strong>：默认输出<code>行数</code>、<code>单词数</code>、<code>字节数</code><br /><code>文件路径</code>：可以作为内容输入的端口</li></ul><h4 id="214-管道符"><a class="markdownIt-Anchor" href="#214-管道符"></a> 2.14 | (管道符)</h4><ul><li><code>|</code>：将管道符左边命令的结果，作为右边命令的输入</li><li>用法：可以和<code>grep</code>、<code>wc</code>……结合使用。</li></ul><blockquote><p><strong>注意：</strong><br /><code>|</code>可以多次嵌套使用。<br />下图例子：<code>cat hello.txt | grep &quot;lusy&quot; | grep love</code><br />先通过<code>cat hello.txt | grep &quot;lusy&quot;</code>筛选出<br /><strong>lusy</strong> love you<br /><strong>lusy</strong> qq lus<br />wwsa <strong>lusy</strong><br />再进行<code>| grep love</code>筛选出<br />lusy <strong>love</strong></p></blockquote><p><strong>图例：</strong><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-03-18%20184306.png" alt="Alt" /></p><h4 id="215-echo输出内容"><a class="markdownIt-Anchor" href="#215-echo输出内容"></a> 2.15 echo(输出内容)</h4><ul><li><code>echo</code>：输出指定的内容[类似于C中的printf语句]</li><li>用法：<code>echo &quot;输出的内容&quot;</code> [带有空格或其他特殊符号，建议使用&quot; &quot;将关键词包围起来]</li></ul><h4 id="216-反引号"><a class="markdownIt-Anchor" href="#216-反引号"></a> 2.16 ` (反引号)</h4><ul><li>用法：被`包围的内容将会被当成命令执行，可以和echo搭配使用</li></ul><h4 id="217-和重定项符"><a class="markdownIt-Anchor" href="#217-和重定项符"></a> 2.17 &gt;和&gt;&gt;(重定项符)</h4><ul><li><code>&gt;/&gt;&gt;</code>：修改文件内容</li><li>用法：<ul><li><code>&gt;</code>：将左侧命令的结果，<strong>覆盖</strong>写到符号右侧指定的文件中</li><li><code>&gt;&gt;</code>：将左侧命令的结果，<strong>追加</strong>写入符号右侧指定的文件中</li></ul></li></ul><h4 id="218-tail查看文件尾部"><a class="markdownIt-Anchor" href="#218-tail查看文件尾部"></a> 2.18 tail(查看文件尾部)</h4><ul><li><code>tail</code>：可以查看文件尾部内容，跟踪文件的最新更改</li><li>用法：<code>tail [-f -n] Linux路径</code><br /><code>-f</code>：表示持续跟踪，会实时更新[要退出持续跟踪，可以按<code>Ctrl + C</code>]<br /><code>-n</code>：n是具体数字，表示要查看尾部多少行，不填默认<strong>10</strong>行</li></ul><p><strong>图例：</strong><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-03-18%20204315.png" alt="Alt" /></p><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-03-18%20204642.png" alt='' style="float: right; width: 300px; height: auto;"><h4 id="219-vivim编辑文件"><a class="markdownIt-Anchor" href="#219-vivim编辑文件"></a> 2.19 vi/vim(编辑文件)</h4><ul><li><code>vi/vim</code>：编辑器，可以编辑文件内容[vim是vi的pro版本]</li><li>用法：<code>vi/vim 文件路径</code><ul><li>如果文件路径表示的文件<strong>不存在</strong>，那么此命令会用于<strong>编辑新文件</strong></li><li>如果文件路径表示的文件<strong>存在</strong>，那么此命令会用于<strong>编辑已有文件</strong></li></ul></li><li>注意：通过vi/vim命令编辑文件，会打开一个新的窗口，此时这个窗口是<strong>命令模式</strong>窗口，<strong>命令模式</strong>是vi/vim编辑器的入口和出口，如右图<ul><li>进入vi/vim编辑器会进入<strong>命令模式</strong></li><li>通过<strong>命令模式</strong>输入键盘指令<code>i、a、o</code>[任选一个即可]，可以进入<strong>输入模式</strong></li><li><strong>输入模式</strong>需要退回到<strong>命令模式</strong>，如何通过命令才可以进入<strong>底线命令模式</strong></li></ul></li></ul><table><thead><tr><th>模式</th><th>命令</th><th>描述</th><th>模式</th><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>命令模式</td><td><code>i</code></td><td>在当前光标位置进入 输入模式</td><td>命令模式</td><td><code>yy</code></td><td>复制当前行</td></tr><tr><td>命令模式</td><td><code>a</code></td><td>在当前光标位置 之后 进入 输入模式</td><td>命令模式</td><td><code>nyy</code></td><td>n是数字,复制当前行和下面的n行</td></tr><tr><td>命令模式</td><td><code>o</code></td><td>在当前光标下一行进入输入模式</td><td>命令模式</td><td><code>p</code></td><td>粘贴复制的内容</td></tr><tr><td>命令模式</td><td><code>I</code></td><td>在当前行的开头,进入输入模式</td><td>命令模式</td><td><code>u</code></td><td>撤销修改</td></tr><tr><td>命令模式</td><td><code>A</code></td><td>在当前行的结尾,进入输入模式</td><td>命令模式</td><td><code>ctrl + r</code></td><td>反向撤销修改</td></tr><tr><td>命令模式</td><td><code>O</code></td><td>在当前光标上一行进入输入模式</td><td>命令模式</td><td><code>gg</code></td><td>跳到首行</td></tr><tr><td>输入模式</td><td><code>esc</code></td><td>任何情况下输入<code>esc</code>都能回到命令模式</td><td>命令模式</td><td><code>G</code></td><td>跳到行尾</td></tr><tr><td>命令模式</td><td><code>键盘上、键盘k</code></td><td>向上移动光标</td><td>命令模式</td><td><code>dd</code></td><td>删除光标所在行的内容</td></tr><tr><td>命令模式</td><td><code>键盘下、键盘j</code></td><td>向下移动光标</td><td>命令模式</td><td><code>ndd</code></td><td>n是数字,表示删除当前光标向下n行</td></tr><tr><td>命令模式</td><td><code>键盘左、键盘h</code></td><td>向左移动光标</td><td>命令模式</td><td><code>dG</code></td><td>从当前行开始,向下全部删除</td></tr><tr><td>命令模式</td><td><code>键盘右、键盘1</code></td><td>向后移动光标</td><td>命令模式</td><td><code>dgg</code></td><td>从当前行开始,向上全部删除</td></tr><tr><td>命令模式</td><td><code>0</code></td><td>移动光标到当前行的开头</td><td>命令模式</td><td><code>d$</code></td><td>从当前光标开始,删除到本行的结尾</td></tr><tr><td>命令模式</td><td><code>$</code></td><td>移动光标到当前行的结尾</td><td>命令模式</td><td><code>de</code></td><td>从当前光标开始,删除到本行的开头</td></tr><tr><td>命令模式</td><td><code>pageup(PgUp)</code></td><td>向上翻页</td><td>底线命令模式</td><td><code>:wq</code></td><td>保存并退出</td></tr><tr><td>命令模式</td><td><code>pangdown(PgDn)</code></td><td>向下翻页</td><td>底线命令模式</td><td><code>:q!</code></td><td>强制退出</td></tr><tr><td>命令模式</td><td><code>/</code></td><td>进入搜索模式</td><td>底线命令模式</td><td><code>:w</code></td><td>仅保存</td></tr><tr><td>命令模式</td><td><code>n</code></td><td>向下继续搜索</td><td>底线命令模式</td><td><code>:set nu</code></td><td>显示行号</td></tr><tr><td>命令模式</td><td><code>N</code></td><td>向上继续搜索</td><td>底线命令模式</td><td><code>:set paste</code></td><td>设置粘贴模式</td></tr></tbody></table><h3 id="3-root用户"><a class="markdownIt-Anchor" href="#3-root用户"></a> 3 root用户</h3><h4 id="31-root用户和普通用户"><a class="markdownIt-Anchor" href="#31-root用户和普通用户"></a> 3.1 root用户和普通用户</h4><ul><li><code>root用户(超级管理员)</code>：拥有最大的系统操作权限[而普通用户在许多地方的权限是受限的]</li><li><code>普通用户</code>：一般在其home目录内是不受限的,而一旦出了home目录，大多数地方普通用户仅有只读和执行权限，无修改权限</li></ul><h4 id="32-su和exit切换用户"><a class="markdownIt-Anchor" href="#32-su和exit切换用户"></a> 3.2 su和exit(切换用户)</h4><h5 id="321-su"><a class="markdownIt-Anchor" href="#321-su"></a> 3.2.1 su</h5><ul><li><code>su</code>：用于账户的切换</li><li>用法：<code>su [-] [用户名]</code><br /><code>-</code>：表示是否在切换用户后加载环境变量，<strong>建议带上</strong><br /><code>用户名</code>：表示要切换的用户，如果没有填写，默认切换到root用户</li></ul><h5 id="322-exit"><a class="markdownIt-Anchor" href="#322-exit"></a> 3.2.2 exit</h5><ul><li><code>exit</code>：退回上一个用户</li><li>用法：切换用户后，可以通过<code>exit</code>命令返回上一个用户，也可以使用快捷键<code>Ctrl + d</code></li></ul><blockquote><p><strong>注意：</strong></p><ul><li>使用普通用户，切换到其他用户<strong>需要输入密码</strong>，如切换到root用户(输入的密码要与切换到的用户的密码对应)</li><li>使用root用户切换到其他用户，<strong>无需密码</strong>，可以直接切换</li></ul></blockquote><h4 id="33-sudo获得权限"><a class="markdownIt-Anchor" href="#33-sudo获得权限"></a> 3.3 sudo(获得权限)</h4><ul><li><code>sudo</code>：可以为普通用户的命令授权，临时以<code>root</code>身份执行</li><li>用法：<code>sudo 其它命令</code></li></ul><blockquote><p><strong>注意：</strong></p><ul><li>在其它命令之前，带上<code>sudo</code>,即可为这一条命令临时赋予<code>root</code>授权</li><li>但并不是所有的用户都有权利使用<code>sudo</code>,<mark>我们需要在此之前为普通用户配置sudo认证</mark></li></ul></blockquote><ul><li>配置sudo认证：<ul><li>切换<code>root</code>用户</li><li>执行<code>visudo</code>命令，会自动通过vi编辑器打开：/etc/sudoers</li><li>在文件的最后添加相关指令[<strong>如下</strong>]</li><li>通过<code>wq</code>保存</li></ul></li></ul><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td><code>username</code></td><td>表示将授权信息添加到指定用户的权限列表中</td></tr><tr><td><code>otheruser</code></td><td>指定其他用户的身份。</td></tr><tr><td><code>%groupname</code></td><td>指定要授权的用户组。</td></tr><tr><td><code>ALL</code></td><td>表示将授权信息添加到所有用户或者组的权限列表中</td></tr><tr><td><code>(ALL)</code></td><td>表示可以以任何用户的身份执行命令。</td></tr><tr><td><code>NOPASSWD</code></td><td>表示授权用户在执行该命令时无需输入密码</td></tr><tr><td><code>PASSWD</code></td><td>表示授权用户在执行该命令时需要输入密码</td></tr><tr><td><code>/path/</code></td><td>表示授权用户可以执行的命令路径，必须使用完整的命令路径</td></tr><tr><td><code>/file</code></td><td>表示授权用户可以执行的文件路径，必须使用完整的文件路径</td></tr><tr><td><code>!</code></td><td>表示阻止用户执行某些命令</td></tr><tr><td><code>#</code></td><td>表示注释符号，后面的内容将被视为注释，不起实际作用</td></tr><tr><td><code>Defaults</code></td><td>表示设置sudo的默认配置信息，包括日志路径、运行超时时间等</td></tr></tbody></table><ol><li><p><strong>用户授权</strong>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">username  <span class="token assign-left variable">ALL</span><span class="token operator">=</span><span class="token punctuation">(</span>ALL<span class="token punctuation">)</span> <span class="token punctuation">[</span>NOPASSWD:<span class="token punctuation">]</span> <span class="token builtin class-name">command</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>username</code>：指定要授权的用户名。</li><li><code>ALL</code>：表示可以在任何主机上执行命令。</li><li><code>(ALL)</code>：表示可以以任何用户的身份执行命令。</li><li><code>NOPASSWD</code>：表示无需输入密码。</li></ul><p>例如，允许用户 <code>john</code> 在任何主机上以任何用户的身份执行 <code>/bin/ls</code> 命令，并且无需输入密码：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">john <span class="token assign-left variable">ALL</span><span class="token operator">=</span><span class="token punctuation">(</span>ALL<span class="token punctuation">)</span> NOPASSWD: /bin/ls<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>用户组授权</strong>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">%groupname  <span class="token assign-left variable">ALL</span><span class="token operator">=</span><span class="token punctuation">(</span>ALL<span class="token punctuation">)</span> <span class="token punctuation">[</span>NOPASSWD:<span class="token punctuation">]</span> <span class="token builtin class-name">command</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>%groupname</code>：指定要授权的用户组。</li><li>其他参数的含义同上。</li></ul><p>例如，允许用户组 <code>admins</code> 在任何主机上以任何用户的身份执行 <code>/bin/ls</code> 命令，并且无需输入密码：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">%admins <span class="token assign-left variable">ALL</span><span class="token operator">=</span><span class="token punctuation">(</span>ALL<span class="token punctuation">)</span> NOPASSWD: /bin/ls<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>指定可执行文件路径</strong>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">username  <span class="token assign-left variable">ALL</span><span class="token operator">=</span><span class="token punctuation">(</span>ALL<span class="token punctuation">)</span> <span class="token punctuation">[</span>NOPASSWD:<span class="token punctuation">]</span> /path/to/command<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这将限制用户只能执行指定路径下的命令。</p></li><li><p><strong>禁止某些命令</strong>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">username  <span class="token assign-left variable">ALL</span><span class="token operator">=</span><span class="token punctuation">(</span>ALL<span class="token punctuation">)</span> <span class="token operator">!</span>/path/to/command<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这将阻止用户执行指定的命令。</p></li><li><p><strong>授权指定用户以其他用户的身份执行命令</strong>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">username  <span class="token assign-left variable">ALL</span><span class="token operator">=</span><span class="token punctuation">(</span>otheruser<span class="token punctuation">)</span> <span class="token punctuation">[</span>NOPASSWD:<span class="token punctuation">]</span> /path/to/command<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>允许用户以 <code>otheruser</code> 用户的身份执行命令。</p></li><li><p><strong>别名的使用</strong>：</p><p>你也可以定义别名来使配置文件更加清晰，例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">User_Alias  ADMINS <span class="token operator">=</span> user1, user2Cmnd_Alias  SYSTEM_CMDS <span class="token operator">=</span> /bin/ls, /bin/catADMINS  <span class="token assign-left variable">ALL</span><span class="token operator">=</span><span class="token punctuation">(</span>ALL<span class="token punctuation">)</span> SYSTEM_CMDS<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这样，<code>ADMINS</code> 别名包含了 <code>user1</code> 和 <code>user2</code> 用户，<code>SYSTEM_CMDS</code> 别名包含了 <code>/bin/ls</code> 和 <code>/bin/cat</code> 命令，然后 <code>ADMINS</code> 组可以执行 <code>SYSTEM_CMDS</code> 中的命令。</p></li></ol><blockquote><p><strong>注意：</strong></p><ul><li><p>在编辑 <code>sudoers</code> 文件时，一定要使用 <code>visudo</code> 命令，这样可以在保存文件时检查语法错误，以免导致系统无法启动。</p></li><li><p>在 <code>/etc/sudoers</code> 文件中配置了 <code>username  ALL=(ALL) [NOPASSWD:] command</code> 这样的规则时，这意味着当用户 <code>username</code> 尝试执行 <code>command</code> 时，无论命令是否需要超级用户权限，只有在命令前加上 <code>sudo</code> 才会生效。</p></li><li><p>另一方面，如果配置了阻止用户执行某些命令的规则，比如 <code>username ALL=(ALL) !/path/to/command</code>，即使用户尝试执行该命令时没有使用 <code>sudo</code>，系统也会阻止命令的执行。</p></li></ul><p>所以，在配置了 <code>sudoers</code> 文件后：</p><ul><li>如果某个用户有权限执行某个命令，并且该命令不需要特权，那么用户可以在执行时不加 <code>sudo</code>。</li><li>如果某个用户有权限执行某个命令，但是该命令需要特权，那么用户必须在执行时加上 <code>sudo</code>。</li><li>如果某个用户被明确阻止执行某个命令，那么无论是否使用 <code>sudo</code>，该命令都不会被执行。</li></ul></blockquote><h4 id="34-用户组管理"><a class="markdownIt-Anchor" href="#34-用户组管理"></a> 3.4 用户组管理</h4><p>对一个用户组进行创建和删除操作，都需要<code>root</code>用户的权限[下图是用户与用户组中间的关系图]</p><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-03-19%20222538.png" alt='' style="float: right; margin-right: 150px; margin-top: -5px;width: 350px; height: auto;"><h5 id="341-创建用户组"><a class="markdownIt-Anchor" href="#341-创建用户组"></a> 3.4.1 创建用户组</h5><ul><li>命令：<code>groupadd 用户组名</code></li></ul><h5 id="342-删除用户组"><a class="markdownIt-Anchor" href="#342-删除用户组"></a> 3.4.2 删除用户组</h5><ul><li>命令：<code>groupdel 用户组名</code></li></ul><h4 id="35-用户管理"><a class="markdownIt-Anchor" href="#35-用户管理"></a> 3.5 用户管理</h4><h5 id="351-创建用户"><a class="markdownIt-Anchor" href="#351-创建用户"></a> 3.5.1 创建用户</h5><ul><li>命令：<code>useradd 用户名 [-g 用户组名 -d Linux路径]</code><br /><code>-g</code>：指定用户的组，不指定-g，会创建一个同名组并自动加入，指定-g需要组已经存在，如已存在同名组，必须使用-g<br /><code>-d</code>：指定用户home路径，不指定，home目录默认在：/home/用户名</li></ul><h5 id="352-删除用户"><a class="markdownIt-Anchor" href="#352-删除用户"></a> 3.5.2 删除用户</h5><ul><li>命令：<code>userdel [-r] 用户名</code><br /><code>-r</code>：删除用户的home路径，不是用<code>-r</code>,删除用户时，home目录会被保留</li></ul><h5 id="353-查看用户所属组"><a class="markdownIt-Anchor" href="#353-查看用户所属组"></a> 3.5.3 查看用户所属组</h5><ul><li>命令：<code>id [用户名]</code><br /><code>[用户名]</code>：被查看的用户，如果不提供则查看自身</li></ul><h5 id="354-修改用户所属组"><a class="markdownIt-Anchor" href="#354-修改用户所属组"></a> 3.5.4 修改用户所属组</h5><ul><li>命令：<code>usermod -aG 用户组 用户名</code><br />将指定用户加入指定用户组</li></ul><blockquote><p><strong>注意：</strong><br />原有的所属组也会保留，如要将用户从所属组删除，可以通过下面的命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> gpasswd <span class="token parameter variable">-d</span> 用户名 用户组名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><h4 id="36-查看用户用户组"><a class="markdownIt-Anchor" href="#36-查看用户用户组"></a> 3.6 查看用户/用户组</h4><ul><li>命令：<code>getent passwd</code><br />用于查看当前系统中有哪些用户<br />共有7份信息,分别是:<br />用户名:密码(x):用户ID:组ID:描述信息(无用):HOME目录:执行终端(默认bash)</li><li>命令：<code>getent group</code><br />用于查看当前系统中有哪些用户组<br />共有3份信息,分别是:<br />组名称：组认证(显示为x)：组ID</li></ul><h4 id="37-认知权限信息"><a class="markdownIt-Anchor" href="#37-认知权限信息"></a> 3.7 认知权限信息</h4><p>可以通过<code>ls -l</code>或者<code>ll</code>命令，以列表的形式查看内容，并显示权限细节<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-03-20%20130750.png" alt="" /></p><ul><li>序号1：表示文件/文件夹的权限控制信息</li><li>序号2：表示文件/文件夹所属用户</li><li>序号3：表示文件/文件夹所属用户组</li></ul><blockquote><p>序号1的权限细节总共分为10个槽位<br />第一个槽位表示所属类型：<code>d</code>表示文件夹，<code>-</code>表示文件，<code>l</code>表示软连接<br />后9个槽位分为3组，每组3个槽位，这三组依次是：<code>所属用户权限</code>,<code>所属用户组权限</code>,<code>其他用户权限</code><br />每一组的三个槽位中，每个槽位依次是：<code>r</code>可读[查看文件夹内容]，<code>w</code>可写[创建，删除，改名]，<code>x</code>可执行[可更改工作目录到此文件夹]，<code>-</code>没有这个功能的权限<br /><strong>举例：</strong><br /><mark>drwxr-xr-x</mark></p><ul><li>这是一个文件夹，首字母<code>d</code>表示</li><li>所属用户的权限是：<code>rwx</code></li><li>所属用户组的权限是：<code>r-x</code>,表示有r无w有x</li><li>其他用户的权限是：<code>r-x</code></li></ul></blockquote><h4 id="38-chmod修改权限"><a class="markdownIt-Anchor" href="#38-chmod修改权限"></a> 3.8 chmod(修改权限)</h4><ul><li><code>chmod</code>：修改文件、文件夹的权限信息[<strong>注意</strong>：只有文件、文件夹的所属用户或root用户可以修改]</li><li>用法：<code>chomd [-R] 权限 文件/文件夹</code><br /><code>-R</code>：对文件夹内的全部内容应用同样的操作<br /><code>权限</code>：<code>u=___,g=___,o=___</code><br />其中<code>u</code>表示user所属用户权限，<code>g</code>表示group组权限，<code>o</code>表示other其他用户权限。可以根据自己的需要修改相应权限</li></ul><blockquote><p><strong>举例：</strong><br /><mark>chmod u=rwx,g=rx,o=x hello.txt</mark><br />将hello.txt这个文件修改为所属<strong>用户</strong>可读可写可执行，所属<strong>用户组</strong>可读可执行，<strong>其他用户</strong>只能执行，没有读写权限。</p></blockquote><p><strong>快捷写法：</strong><br /><code>chmod u=rwx,g=rx,o=x hello.txt</code>可以改写成<code>chomd 751 hello.txt</code><br />在书写权限的<strong>可读、可写、可执行</strong>时，可以把<code>r</code>记为4,<code>w</code>记为2，<code>x</code>记为1。<br />所以rwx可以记为7，rx可以记为5，x可以记为1</p><h4 id="39-chown修改所属用户用户组"><a class="markdownIt-Anchor" href="#39-chown修改所属用户用户组"></a> 3.9 chown(修改所属用户/用户组)</h4><ul><li><code>chown</code>：修改文件、文件夹的所属用户和用户组[<strong>普通用户无法修改所属为其他用户或组，所以此命令只适用于root用户</strong>]</li><li>用法：<code>chown [-R] [用户][:][用户组] 文件或文件夹</code><br /><code>-R</code>：对文件夹内的全部内容应用同样的操作<br /><code>用户</code>：修改所属用户<br /><code>用户组</code>：修改所属用户组<br /><code>:</code>：用于分隔用户和用户组[<strong>只有填写了用户组，才需要加上冒号，如果只是修改所属用户，不需要添加</strong>]</li></ul><h3 id="4-快捷键"><a class="markdownIt-Anchor" href="#4-快捷键"></a> 4 快捷键</h3><table><thead><tr><th>命令</th><th>含义</th></tr></thead><tbody><tr><td><code>ctrl+c</code></td><td>强制停止程序，退出命令输入</td></tr><tr><td><code>ctrl+d</code></td><td>退出或登出（不能用于vi/vim）</td></tr><tr><td><code>history</code></td><td>查看历史命令</td></tr><tr><td><code>history ｜grep ch</code></td><td>在历史记录中过滤带有<code>ch</code>命令[<code>ch</code>可换成自己想要过滤的关键词]</td></tr><tr><td><code>！+命令的前缀</code></td><td>自动匹配上一次匹配的前缀命令</td></tr><tr><td><code>ctrl+r</code></td><td>输入内容去匹配历史命令</td></tr><tr><td><code>ctrl+a</code></td><td>调到命令开头</td></tr><tr><td><code>ctrl+e</code></td><td>跳到命令结尾</td></tr><tr><td><code>ctrl+键盘左键</code></td><td>向左跳一个单词</td></tr><tr><td><code>ctrl+键盘右键</code></td><td>向右跳一个单词</td></tr><tr><td><code>ctrl+l或者clear</code></td><td>清空终端内容（清屏）</td></tr></tbody></table><h3 id="5-基础操作"><a class="markdownIt-Anchor" href="#5-基础操作"></a> 5 基础操作</h3><h4 id="51-yum软件安装"><a class="markdownIt-Anchor" href="#51-yum软件安装"></a> 5.1 yum(软件安装)</h4><ul><li><code>yum</code>：RPM包软件管理器，用于自动化安装配置Linux软件，并可以自动解决依赖问题</li><li>用法：<code>yum [-y] [install | remove | search] 软件名称</code><br /><code>-y</code>：自动确认，无需动手确认安装或卸载过程<br /><code>install</code>：安装<br /><code>remove</code>：卸载<br /><code>search</code>：搜索</li></ul><blockquote><p><strong>注意：</strong></p><ul><li>yum命令需要<code>root</code>权限</li><li>yum命令需要<strong>联网</strong></li></ul></blockquote><h4 id="52-systemctl管理软件"><a class="markdownIt-Anchor" href="#52-systemctl管理软件"></a> 5.2 systemctl(管理软件)</h4><ul><li><code>systemctl</code>：启动、停止、开机自启能够被syatemctl管理的软件，一般也称之为服务</li><li>用法：<code>systemctl start | stop | status | enable | disable 服务名</code><br /><code>start</code>：启动<br /><code>stop</code>：关闭<br /><code>status</code>：查看状态<br /><code>enable</code>：开启开机自启<br /><code>disable</code>：关闭开机自启</li></ul><blockquote><p><strong>常见的服务</strong></p><ul><li><code>NetworkManager</code>：主网络服务</li><li><code>network</code>：副网络服务</li><li><code>firewalld</code>：防火墙服务</li><li><code>sshd</code>：ssh服务(FinalShell远程登录Linux使用的就是这个服务)</li></ul></blockquote><h4 id="53-ln软链接"><a class="markdownIt-Anchor" href="#53-ln软链接"></a> 5.3 ln(软链接)</h4><ul><li><code>ln</code>：在系统中创建软链接，可以将文件、文件夹链接到其它位置[类似于Windows中的&quot;快捷方式&quot;]</li><li>用法：<code>ln -s 参数1 参数2</code><br /><code>-s</code>：创建软链接<br /><code>参数1</code>：被链接的文件或文件夹<br /><code>参数2</code>：要链接去的目的地</li></ul><blockquote><p><strong>删除软链接</strong><br />要删除 Linux 中的软链接，可以使用<code>rm</code>命令，其语法为：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> 软链接文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p><strong>图例</strong>：<br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-03-21%20223032.png"/><br />[<code>注意</code>：如果软链接出现爆红现象，那可能是被链接的文件或文件夹并不存在]</p><h4 id="54-网络请求和下载"><a class="markdownIt-Anchor" href="#54-网络请求和下载"></a> 5.4 网络请求和下载</h4><h5 id="541-ping检查服务器是否可联通"><a class="markdownIt-Anchor" href="#541-ping检查服务器是否可联通"></a> 5.4.1 ping(检查服务器是否可联通)</h5><ul><li><code>ping</code>：检查指定的网络服务器是否是可联通状态</li><li>用法：<code>ping [-c num] ip或主机名</code><br /><code>-c num</code>：检查的num次，如果不使用<code>-c</code>，将无限次持续检查[<strong>可用<code>Ctrl + c</code>退出</strong>]<br /><code>ip或主机名</code>：被检查的服务器的IP地址或主机名地址</li></ul><h5 id="542-wget文件下载要先下载过wget插件若之前没有下载可用yum命令下载"><a class="markdownIt-Anchor" href="#542-wget文件下载要先下载过wget插件若之前没有下载可用yum命令下载"></a> 5.4.2 wget(文件下载)[要先下载过wget插件，若之前没有下载，可用yum命令下载]</h5><ul><li><code>wget</code>：是一个非交互式的文件下载器，可以在命令行内下载网络文件</li><li>用法：<code>wget [-b] url</code><br /><code>-b</code>：后台下载，会将日志写入到当前工作目录的wget-log文件<br /><code>url</code>：下载链接</li></ul><blockquote><p><strong>在Linux中，yum 和 wget 是两个不同的工具，用途也不同：</strong></p><ul><li><code>yum</code>：<br />yum 是一个包管理器，通常用于在基于 RPM 的发行版（如 CentOS、Fedora、Red Hat Enterprise Linux 等）上安装、更新和删除软件包。<br />它可以自动解决软件包之间的依赖关系，并下载并安装所有必需的软件包。<br />yum 通常用于管理系统上的软件包，包括安装新软件包、更新已安装的软件包、删除不再需要的软件包等。</li><li><code>wget</code>：<br />wget 是一个命令行工具，用于从网络上下载文件。它支持下载 HTTP、HTTPS 和 FTP 等协议下的文件。<br />wget 可以下载单个文件，也可以通过递归下载整个网站的内容。<br />它是一个简单而强大的工具，通常用于从命令行下载文件，比如下载软件包、下载网站内容、下载备份等。<br />简而言之，yum 是一个软件包管理器，用于管理系统上的软件包，而 wget 则是一个下载工具，用于从网络上下载文件。它们在功能和用途上有很大的区别，但在某些情况下可能会一起使用，比如使用 wget 下载软件包文件，然后使用 yum 安装这些软件包。</li></ul></blockquote><h5 id="543-curl网络请求"><a class="markdownIt-Anchor" href="#543-curl网络请求"></a> 5.4.3 curl(网络请求)</h5><ul><li><code>curl</code>：可以发送http网络请求，可以用于：下载文件，获取信息等</li><li>用法：<code>curl [-O] url</code><br /><code>-O</code>：用于下载文件，当url是下载链接时，可以用此选项进行保存文件<br /><code>url</code>：要发起请求的网络地址</li></ul><p><strong>图例：</strong><br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-03-22%20223228.png" alt="" /></p><h4 id="55-端口"><a class="markdownIt-Anchor" href="#55-端口"></a> 5.5 端口</h4><p><strong>Linux系统是一个超大号小区,可以支持65535个端口,这6万多个端口分为3类进行使用:</strong></p><ul><li>公认端口:1~1023,通常用于一些系统内置或知名程序的预留使用[如SSH服务的22端口,HTTPS服务的443端口]，非特殊需要,不要占用这个范围的端口</li><li>注册端口:1024~49151,通常可以随意使用,用于松散的绑定一些程序/服务</li><li>动态端口:49152~65535,通常不会固定绑定程序,而是当程序对外进行网络链接时,用于临时使用。[如发起访问时，发起方的临时端口]</li></ul><h5 id="551-nmap查看暴露端口插件需要yum命令下载"><a class="markdownIt-Anchor" href="#551-nmap查看暴露端口插件需要yum命令下载"></a> 5.5.1 nmap(查看暴露端口)[插件，需要yum命令下载]</h5><ul><li><code>nmap</code>：可以查看指定IP的<strong>对外暴露端口</strong></li><li>用法：<code>nmap 被查看的ip地址</code></li></ul><h5 id="552-netstat查看端口占用插件yum-y-install-net-tools"><a class="markdownIt-Anchor" href="#552-netstat查看端口占用插件yum-y-install-net-tools"></a> 5.5.2 netstat(查看端口占用)[插件，<code>yum -y install net-tools</code>]</h5><ul><li><code>netstat</code>：查看指定端口的占用情况</li><li>用法：<code>netstat -anp [ | grep 端口号]</code><br /><code>| grep 端口号</code>：用来筛选端口<br /><strong>图例：</strong><br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-03-22%20230843.png" alt="" /></li></ul><h4 id="56-进程管理"><a class="markdownIt-Anchor" href="#56-进程管理"></a> 5.6 进程管理</h4><blockquote><p>程序运行在操作系统中,是被操作系统所管理的。<br />为管理运行的程序,每一个程序在运行的时候,便被操作系统注册为系统中的一个:进程<br />并会为每一个进程都分配一个独有的:进程ID(进程号)</p></blockquote><h5 id="561-ps查看进程"><a class="markdownIt-Anchor" href="#561-ps查看进程"></a> 5.6.1 ps(查看进程)</h5><ul><li><code>ps</code>：查看Linux系统中的进程信息</li><li>用法：<code>ps [-e -f]</code><br /><code>-e</code>：显示出全部的进程<br /><code>-f</code>：以完全格式化的形式展开信息<br />一般来说，固定用法是：<code>ps -ef</code>列出全部进程的全部信息，并配合<code>| grep 关键词</code>使用。</li></ul><span style="display: inline-block; margin-left: 400px;"><ul><li>UID：进程所属的用户ID</li><li>PID：进程的进程号ID</li><li>PPID：进程的父ID(启用此进程的其它进程)</li><li>C：此进程的CPU占用率(百分比)</li><li>STIME：进程的启动时间</li><li>TTY：启动此进程的终端序号，如显示？，表示非终端启动</li><li>TIME：进程占用CPU的时间(累计使用CPU的时间)</li><li>CMD：该进程对应的名字或启动路径或启动命令。</li></ul></span><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-03-22%20232150.png" alt='' style="float: left; margin-top: -270px;width: 400px; height: 250px;"><h5 id="562-kill关闭进程"><a class="markdownIt-Anchor" href="#562-kill关闭进程"></a> 5.6.2 kill(关闭进程)</h5><ul><li><code>kill</code>：关闭指定进程</li><li>用法：<code>kill [-9] 进程ID</code><br /><code>-9</code>：表示强制关闭进程</li></ul><h4 id="57-主机状态监控"><a class="markdownIt-Anchor" href="#57-主机状态监控"></a> 5.7 主机状态监控</h4><h5 id="571-top查看任务管理器"><a class="markdownIt-Anchor" href="#571-top查看任务管理器"></a> 5.7.1 top(查看任务管理器)</h5><ul><li><code>top</code>：查看CPU、内存使用情况，类似windows的任务管理器</li><li>用法：<code>top</code><br />默认<strong>每5秒刷新一次</strong>，可以按<code>q</code>或<code>Ctrl + c</code>退出</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-03-23%20204148.png" alt="" /></p><ul><li>第一行： <code>top</code>：命令名称，<code>20：41：40</code>：当前系统时间，<code>up 1：29</code>：启动了1小时29分钟，<code>2 users</code>：2个用户登录，<code>load average：0.26，0.39，0.40</code>：表示1，5，15分钟的平均负载</li><li>第二行：<code>Tasks</code>：<code>174 total</code>：一共有174个进程，<code>4 running</code>：4个进程在运行，<code>170 sleeping</code>：170个进程睡眠，<code>0 stopped</code>：0个停止进程，<code>0 zombie</code>：-个僵尸进程</li><li>第三行：<code>%Cpu(s)</code>：CPU使用率，<code>us</code>：用户CPU使用率，<code>sy</code>：系统CPU使用率，<code>ni</code>：高优先级进程占用CPU时间百分比，<code>id</code>：空闲CPU率，<code>wa</code>：IO等待CPU占用率，<code>hi</code>：CPU硬件中断率，<code>si</code>：CPU软件中断率，<code>st</code>：强制等待CPU占用率</li><li>第四、五行：<code>Kib Mem</code>:物理内存,<code>total</code>:总量,<code>free</code>:空闲,<code>used</code>:使用,<code>buff/cache</code>:buff和cache占用<br /><code>KibSwap</code>:虚拟内存(交换空间),<code>total</code>:总量,<code>free</code>:空闲,<code>used</code>:使用,<code>buff/cache</code>:buff和cache占用</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-03-23%20210150.png" alt="" /></p><ul><li>PID:进程id</li><li>USER:进程所属用户</li><li>PR:进程优先级,越小越高</li><li>NI:负值表示高优先级,正表示低优先级</li><li>VIRT:进程使用虚拟内存,单位KB</li><li>RES:进程使用物理内存,单位KB</li><li>SHR:进程使用共享内存,单位KB</li><li>S:进程状态(S休眠,R运行,Z僵死状态,N负数优先级,l空闲状态)</li><li>%CPU:进程占用CPU率</li><li>%MEM:进程占用内存率</li><li>TIME+:进程使用CPU时间总计,单位10毫秒</li><li>COMMAND:进程的命令或名称或程序文件路径</li></ul><p><strong>以下是<code>top</code>命令的常用选项及其功能：</strong></p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td><code>-p</code></td><td>只显示某个进程的信息</td></tr><tr><td><code>-d</code></td><td>设置刷新时间，默认是5秒</td></tr><tr><td><code>-c</code></td><td>显示产生进程的完整命令，而不是进程名</td></tr><tr><td><code>-n</code></td><td>指定刷新次数，例如<code>top -n 3</code>刷新输出3次后退出</td></tr><tr><td><code>-b</code></td><td>以非交互非全屏模式运行，以批次的方式执行<code>top</code>，一般配合<code>-n</code>指定输出几次统计信息，将输出重定向到指定文件，例如<code>top -b -n 3 &gt; /tmp/top.tmp</code></td></tr><tr><td><code>-i</code></td><td>不显示任何闲置(idle)或无用(zombie)的进程</td></tr><tr><td><code>-u</code></td><td>查找特定用户启动的进程</td></tr></tbody></table><p><strong>以下是<code>top</code>交互式模式(非-b选项启动)中常用的按键及其功能：</strong></p><table><thead><tr><th>按键</th><th>功能</th></tr></thead><tbody><tr><td>h</td><td>显示帮助画面</td></tr><tr><td>c</td><td>显示产生进程的完整命令，等同于<code>-c</code>参数。再次按下<code>c</code>键，变为默认显示。</td></tr><tr><td>f</td><td>选择需要展示的项目</td></tr><tr><td>M</td><td>根据驻留内存大小(RES)排序</td></tr><tr><td>P</td><td>根据CPU使用百分比大小进行排序</td></tr><tr><td>T</td><td>根据时间/累计时间进行排序</td></tr><tr><td>E</td><td>切换顶部内存显示单位</td></tr><tr><td>e</td><td>切换进程内存显示单位</td></tr><tr><td>1</td><td>切换显示平均负载和启动时间信息</td></tr><tr><td>i</td><td>不显示闲置或无用的进程，等同于<code>-i</code>参数。再次按下，变为默认显示。</td></tr><tr><td>t</td><td>切换显示CPU状态信息</td></tr><tr><td>m</td><td>切换显示内存信息</td></tr></tbody></table><h5 id="572-df磁盘信息监控"><a class="markdownIt-Anchor" href="#572-df磁盘信息监控"></a> 5.7.2 df(磁盘信息监控)</h5><ul><li><code>df</code>：可以查看磁盘的使用情况</li><li>用法：<code>df [-h]</code><br /><code>-h</code>：以更加人性化的单位显示</li></ul><h5 id="573-iostatcpu磁盘信息监控"><a class="markdownIt-Anchor" href="#573-iostatcpu磁盘信息监控"></a> 5.7.3 iostat(CPU,磁盘信息监控)</h5><ul><li><code>iostat</code>：查看CPU、磁盘的相关信息</li><li>用法：<code>iostat [-x] [num1] [num2]</code><br /><code>-x</code>: 显示更多信息<br />[常用：<code>rKB/s</code>:每秒发送到设备的读取请求数，<code>wKB/s</code>:每秒发送到设备的写入请求数， <code>%utill</code>:磁盘利用率]<br /><code>num1</code>: 刷新间隔<br /><code>num2</code>: 刷新次数</li></ul><h5 id="574-sar网络状态监控sar命令非常复杂这里仅简单用于统计网络"><a class="markdownIt-Anchor" href="#574-sar网络状态监控sar命令非常复杂这里仅简单用于统计网络"></a> 5.7.4 sar(网络状态监控)[sar命令非常复杂，这里仅简单用于统计网络]</h5><ul><li><code>sar</code>:查看网络的相关统计</li><li>用法：<code>sar -n DEV num1 num2</code><br /><code>-n</code> 查看网络<br /><code>DEV</code> 查看网络接口<br /><code>num1</code> 刷新间隔<br /><code>num2</code> 查看次数</li><li>[常用信息：<code>IFACE</code>：本地网卡接口的名称，<code>rxKB/s</code>：每秒接收的数据包大小，<code>txKB/s</code>：每秒发送的数据包大小]</li></ul><h4 id="58环境变量"><a class="markdownIt-Anchor" href="#58环境变量"></a> 5.8环境变量</h4><h5 id="581-env查看环境变量"><a class="markdownIt-Anchor" href="#581-env查看环境变量"></a> 5.8.1 env(查看环境变量)</h5><ul><li><code>env</code>：查看当前系统中记录的环境变量</li><li>用法：<code>env</code><br /><strong>PATH(环境变量)：</strong></li><li><code>PATH</code>：记录了系统执行任何命令的搜索路径<br />[当在终端输入命令的时候，他会先从PATH中找这条命令所对应的程序，找不到就从当前路径下找]</li></ul><h5 id="582-取变量的值"><a class="markdownIt-Anchor" href="#582-取变量的值"></a> 5.8.2 $(取&quot;变量&quot;的值)</h5><ul><li><code>$</code>：用于取&quot;变量&quot;的值</li><li>用法：<code>echo $环境变量名</code></li></ul><blockquote><p><strong>举例：</strong><br /><img src="https://cdn.jsdelivr.net/gh/lusy37/Pictures@master/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-03-23%20113912.png" alt="" /><br />如果要在环境变量后面追加上打印的信息，环境变量要用花括号包围起来</p></blockquote><h5 id="583-export设置环境变量"><a class="markdownIt-Anchor" href="#583-export设置环境变量"></a> 5.8.3 export(设置环境变量)</h5><ul><li><code>export</code>：可以自行设置环境变量</li><li>用法:<ul><li><p>临时生效：<br /><code>export 变量名=变量值</code></p></li><li><p>永久生效：<br /><code>export 变量名=变量值</code></p><ul><li>针对<strong>当前用户</strong>生效，配置在当前用户的 <code>~/bashrc</code>文件中</li><li>针对<strong>所有用户</strong>生效，配置在系统的 <code>/etc/profile</code>文件中</li></ul><p>并通过语法：<code>source 配置文件(~/bashrc或者/etc/profile)</code>，进行立即生效，或者重新启动系统</p></li></ul></li></ul><h5 id="584-自定义环境变量path"><a class="markdownIt-Anchor" href="#584-自定义环境变量path"></a> 5.8.4 自定义环境变量PATH</h5><ul><li>创建一个可以执行的文件[自定义想要添加的文件]</li><li><code>vim /etc/profile</code>[编写这个文件]</li><li>在最后面加上 <code>export PATH=$PATH:自己要添加的搜索路径</code></li><li><code>source 配置文件(/etc/profile)</code>，进行立即生效，或者重新启动系统</li></ul><h4 id="59-上传下载"><a class="markdownIt-Anchor" href="#59-上传下载"></a> 5.9 上传/下载</h4><p>可以通过<strong>FinalShell</strong>的下方窗体进行文件的传输，<br />也可以通过<code>rz</code>,<code>sz</code>命令进行文件的传输[插件，<code>yum -y install lrzsz</code>]</p><h5 id="591-rz上传"><a class="markdownIt-Anchor" href="#591-rz上传"></a> 5.9.1 rz(上传)</h5><ul><li><code>rz</code>：进行上传</li><li>用法：<code>rz</code>[会弹出可视窗口]</li></ul><h5 id="592-sz下载"><a class="markdownIt-Anchor" href="#592-sz下载"></a> 5.9.2 sz(下载)</h5><ul><li><code>sz</code>：进行下载</li><li>用法：<code>sz 要下载的文件</code><br />[文件会自动下载到桌面的：<strong>fsdownload</strong>文件夹中]</li></ul><h4 id="510-压缩解压"><a class="markdownIt-Anchor" href="#510-压缩解压"></a> 5.10 压缩/解压</h4><ul><li>Linux和Mac系统常用的2种压缩方式<ul><li><code>.tar</code>：称为<code>tarball</code>，归档文件，简单的将文件组装成一个<code>.tar</code>的文件内，并没有太多文件体积的减少，仅仅是简单的封装</li><li><code>.gz</code>：也称为<code>.tar.gz</code>,<code>gzip</code>格式压缩文件，即使用<strong>gzip</strong>压缩算法将文件压缩到一个文件内可以极大的减少压缩后的体积</li></ul></li></ul><h5 id="5101-tar压缩解压"><a class="markdownIt-Anchor" href="#5101-tar压缩解压"></a> 5.10.1 tar(压缩/解压)</h5><ul><li><code>tar</code>：可以针对上述的两种格式进行压缩和解压操作</li><li>用法：<code>tar [-c -x -v -f -z -C] 参数1 参数2 …… 参数N</code><br /><code>-c</code>：创建归档文件，用于压缩模式<br /><code>-x</code>：解压模式<br /><code>-v</code>：显示压缩，解压过程，用于查看进度<br /><code>-f</code>：指定要创建的文件名或要解压的文件名，<code>-f</code>必须处于选项位最后一个(后面必须紧跟要创建的文件名或要解压的文件名)<br /><code>-z</code>：gzip模式，不使用<code>-z</code>则是普通的tarball格式(如果要用的话，一般放在选项位第一位)<br /><code>-C</code>：选择解压的目的地，用于解压模式。如果没有使用<code>-C</code>,默认解压到当前目录(建议单独使用，和解压所需的其它参数分开)</li></ul><blockquote><p><strong>tar的常用组合：</strong></p><ul><li><code>tar -cvf 压缩的文件名 要压缩的文件</code><ul><li>eg: <mark>tar -cvf test.tar 1.txt 2.txt 3.txt</mark><br />将1.txt 2.txt 3.txt压缩到test.tar文件内</li></ul></li><li><code>tar -zcvf 压缩的文件名 要压缩的文件</code><ul><li>eg: <mark>tar -zcvf test.tar.gz 1.txt 2.txt 3.txt</mark><br />将1.txt 2.txt 3.txt压缩到test.tar.gz文件内,使用gzip模式</li></ul></li><li><code>tar -xvf 解压的文件名</code></li><li><code>tar -xvf 解压的文件名 -C Linux路径</code></li><li><code>tar -zxvf 解压的文件名 -C Linux路径</code></li></ul></blockquote><h5 id="5102-zipunzip压缩解压"><a class="markdownIt-Anchor" href="#5102-zipunzip压缩解压"></a> 5.10.2 zip/unzip(压缩/解压)</h5><ul><li><code>zip</code>：压缩为zip压缩包</li><li>用法：<code>zip [-r] 参数1 参数2 …… 参数N</code><br /><code>-r</code>：被压缩的包含文件夹时，需要使用<br /><code>参数</code>：包含创建的压缩文件名 + 要压缩的文件</li><li><code>unzip</code>：解压zip文件</li><li>用法：<code>zip [-d] 参数1 参数2 …… 参数N</code><br /><code>-d</code>：指定要解压去的位置，同<code>tar</code>的<code>-C</code>文件</li></ul><blockquote><p><strong>注意：</strong><br />以上的解压操作如果指定的解压文件名存在，原来文件中的内容会直接被替换(覆盖)，要注意是否文件名已经存在或文件中的内容是否重要</p></blockquote><h3 id="补充命令-scp"><a class="markdownIt-Anchor" href="#补充命令-scp"></a> 补充命令 - scp</h3><ul><li><code>scp</code>：是cp命令的升级版，即：ssh cp，通过SSH协议完成文件的复制。<br />其主要的功能就是：在不同的Linux服务器之间，通过<code>SSH</code>协议互相传输文件。<br />只要知晓服务器的账户和密码（或密钥），即可通过SCP互传文件。<br />语法：</li><li>用法：<code>scp [-r] 参数1 参数2</code><br /><code>-r</code>：选项用于复制文件夹使用，如果复制文件夹，必须使用-r<br /><code>参数1</code>：本机路径 或 远程目标路径<br /><code>参数2</code>：远程目标路径 或 本机路径</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">scp</span> <span class="token parameter variable">-r</span> /export/server/jdk root@node2:/export/server/将本机上的jdk文件夹， 以root的身份复制到node2的/export/server/内同SSH登陆一样，账户名可以省略（使用本机当前的同名账户登陆）<span class="token function">scp</span> <span class="token parameter variable">-r</span> node2:/export/server/jdk /export/server/将远程node2的jdk文件夹，复制到本机的/export/server/内 <span class="token comment"># scp命令的高级用法</span><span class="token builtin class-name">cd</span> /export/server<span class="token function">scp</span> <span class="token parameter variable">-r</span> jdk node2:<span class="token variable"><span class="token variable">`</span><span class="token builtin class-name">pwd</span><span class="token variable">`</span></span>/    <span class="token comment"># 将本机当前路径的jdk文件夹，复制到node2服务器的同名路径下</span><span class="token function">scp</span> <span class="token parameter variable">-r</span> jdk node2:<span class="token environment constant">$PWD</span>      <span class="token comment"># 将本机当前路径的jdk文件夹，复制到node2服务器的同名路径下</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习总结 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过数据范围判断算法使用</title>
      <link href="/2024/03/10/shi-jian-fu-za-du/"/>
      <url>/2024/03/10/shi-jian-fu-za-du/</url>
      
        <content type="html"><![CDATA[<h2 id="时间复杂度"><a class="markdownIt-Anchor" href="#时间复杂度"></a> 时间复杂度</h2><p>在一般情况下，C/C++的时间限制为1秒:</p><h3 id="数据范围判断时间复杂度"><a class="markdownIt-Anchor" href="#数据范围判断时间复杂度"></a> 数据范围判断时间复杂度:</h3><p><span style="color:rgb(233,105,0)">O(n)</span>的算法能解决的数据范围在 <span style="color:rgb(233,105,0)">n&lt;10<sup>8</sup></span><br /><span style="color:rgb(233,105,0)">O(nlogn)</span>的算法能解决的数据范围在 <span style="color:rgb(233,105,0)">n&lt;10<sup>6</sup></span><br /><span style="color:rgb(233,105,0)">O(n<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msqrt><mi>n</mi></msqrt></mrow><annotation encoding="application/x-tex">\sqrt{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.23972em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8002800000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathnormal">n</span></span></span><span style="top:-2.76028em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.23972em;"><span></span></span></span></span></span></span></span></span>)</span>的算法能解决的数据范围在 <span style="color:rgb(233,105,0)">n&lt;10<sup>5</sup></span><br /><span style="color:rgb(233,105,0)">O(n<sup>2</sup>)</span>的算法能解决的数据范围在 <code>n &lt; 5000</code><br /><span style="color:rgb(233,105,0)">O(n<sup>3</sup>)</span>的算法能解决的数据范围在 <code>n &lt; 300</code><br /><span style="color:rgb(233,105,0)">O(2<sup>n</sup>)</span>的算法能解决的数据范围在 <code>n &lt; 25</code><br /><span style="color:rgb(233,105,0)">O(n!)</span>的算法能解决的数据范围在 <code>n &lt; 11</code></p><h3 id="数据范围判断算法"><a class="markdownIt-Anchor" href="#数据范围判断算法"></a> 数据范围判断算法</h3><p>1.<span style="color:rgb(233,105,0)"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>≤</mo><mn>30</mn></mrow><annotation encoding="application/x-tex">n \leq 30</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span><span class="mord">0</span></span></span></span> =&gt; 指数级别</span>, dfs+剪枝，状态压缩dp<br />2.<span style="color:rgb(233,105,0)">n&lt;100 =&gt; O(n)</span>，floyd，dp，高斯消元<br />3.<span style="color:rgb(233,105,0)">n &lt; 1000 =&gt;O(n?)，O(n²logn)</span>,dp，二分，朴素版Dikstra、朴素版Prim、Bellman-Ford<br />4.<span style="color:rgb(233,105,0)">n&lt; 10000 =&gt;O(n<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msqrt><mi>n</mi></msqrt></mrow><annotation encoding="application/x-tex">\sqrt{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.23972em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8002800000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathnormal">n</span></span></span><span style="top:-2.76028em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.23972em;"><span></span></span></span></span></span></span></span></span>)</span>，块状链表、分块、莫队<br />5.<span style="color:rgb(233,105,0)">n&lt; 100000 =&gt;O(nlogn)</span>,各种sort，线段树、树状数组、setmap、heap、拓扑排序、dikstratheap、prim+heap、Kruskal、spfa、求凸包、求半平面交、二分、CDQ分治、整体二分、后缀数组、树链剖分、动态树<br />6.<span style="color:rgb(233,105,0)">n &lt; 1000000 =&gt; O(n),以及常数较小的 O(nlogn)</span>，单调队列、 hash、双指针扫描、并查集，kmp、AC自动机，<span style="color:rgb(233,105,0)">常数比较小的 O(nlogn)的做法</span>:sort、树状数组、heap、dijkstra、spfa<br />7.<span style="color:rgb(233,105,0)">n &lt; 10000000 =&gt;O(n)</span>，双指针扫描、kmp、AC自动机、线性筛素数<br />8.<span style="color:rgb(233,105,0)">n&lt; 10<sup>9</sup> =&gt;O(<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msqrt><mi>n</mi></msqrt></mrow><annotation encoding="application/x-tex">\sqrt{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.23972em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8002800000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathnormal">n</span></span></span><span style="top:-2.76028em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.23972em;"><span></span></span></span></span></span></span></span></span>)</span>,判断质数<br />9.<span style="color:rgb(233,105,0)">n&lt; 10<sup>18</sup> =&gt;O(logn)</span>，最大公约数，快速幂，数位DP<br />10.<span style="color:rgb(233,105,0)">n&lt; 10<sup>1000</sup> =&gt;O((logn)<sup>2</sup>)</span>，高精度加减乘除<br />11.<span style="color:rgb(233,105,0)">n&lt; 10<sup>100000</sup> =&gt; O(logk xloglogk)，k表示位数</span>，高精度加减、FFT/NTT</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ STL总结</title>
      <link href="/2024/03/06/c-stl/"/>
      <url>/2024/03/06/c-stl/</url>
      
        <content type="html"><![CDATA[<h2 id="1-vector"><a class="markdownIt-Anchor" href="#1-vector"></a> 1 vector</h2><h3 id="11介绍"><a class="markdownIt-Anchor" href="#11介绍"></a> 1.1介绍</h3><p><code>vector</code>为可变长的数组(动态数组)。</p><blockquote><p>注意：<strong>在局部区域中（比如局部函数里面）开vector数组，是在堆空间里面开的。</strong></p><p>在局部区域开数组是在栈空间开的，而栈空间比较小，如果开了非常长的数组就会发生爆栈。</p><p>故局部区域不可以开大长度数组，但是可以开大长度<code>vector</code>。</p></blockquote><ul><li>头文件 ：<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>一位初始化 ：<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> a<span class="token punctuation">;</span> <span class="token comment">//定义了一个名为a的一维数组,数组存储int类型数据</span>vector<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span> b<span class="token punctuation">;</span><span class="token comment">//定义了一个名为b的一维数组，数组存储double类型数据</span>vector<span class="token operator">&lt;</span>node<span class="token operator">></span> c<span class="token punctuation">;</span><span class="token comment">//定义了一个名为c的一维数组，数组存储结构体类型数据，node是结构体类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>指定<strong>长度</strong>和<strong>初始值</strong>的初始化  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">v</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//定义一个长度为n的数组，初始值默认为0，下标范围[0, n - 1]</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">v</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//v[0] 到 v[n - 1]所有的元素初始值均为1</span><span class="token comment">//注意：指定数组长度之后（指定长度后的数组仍可以动态变化）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>初始化数组中的多个元素  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> a<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//数组a中有五个元素，数组长度就为5</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>拷贝初始化  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">a</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">b</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//// 两个数组中的类型必须相同,a和b都是长度为n+1，初始值都为0的数组</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> c <span class="token operator">=</span> a<span class="token punctuation">;</span> <span class="token comment">// 也是拷贝初始化,c和a是完全一样的数组</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>二维初始化 ：<br />行不变列可变<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//定义可变长二维数组</span><span class="token comment">//注意：行不可变（只有5行）, 而列可变,可以在指定行添加元素</span><span class="token comment">//第一维固定长度为5，第二维长度可以改变</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><code>vector&lt;int&gt; v[5]</code>可以这样理解：长度为5的v数组，数组中存储的是<code>vector&lt;int&gt;</code>数据类型，而该类型就是数组形式，故v为二维数组。其中每个数组元素均为空，因为没有指定长度，所以第二维可变长。可以进行下述操作：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote>行列均可变<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> v<span class="token punctuation">;</span><span class="token comment">//定义一个行和列均可变的二维数组</span><span class="token comment">//第一维是一个长度可变的vector&lt;vector>数组，可以存放数量可变的vector&lt;int></span><span class="token comment">//第二维是长度可变的vector&lt;int></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>应用：可以在v数组里面装入多个数组</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> v<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> t1<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> t2<span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>t2<span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">// &#123;3, 4, 5, 6&#125;可以作为vector的初始化,相当于一个无名vector</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote>行列长度可变的二维数组的初始化<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">v</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>m<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="12封装函数"><a class="markdownIt-Anchor" href="#12封装函数"></a> 1.2封装函数</h3><p>知道了如何定义初始化可变数组，下面就需要知道如何添加，删除，修改数据。<br /><strong>c指定为数组名称</strong>，含义中会注明算法复杂度。</p><table><thead><tr><th>代码</th><th>含义</th></tr></thead><tbody><tr><td><code>c.at(x)</code></td><td>访问指定位置<code>c[x]</code>的元素，提供范围检查,如果超过向量的有效范围，则会引发异常</td></tr><tr><td><code>c.front()</code></td><td>返回第一个数据O(1)</td></tr><tr><td><code>c.back()</code></td><td>返回最后一个数据O(1)</td></tr><tr><td><code>c.push_back(element)</code></td><td>在尾部加一个数据element,O(1)</td></tr><tr><td><code>c.pop_back()</code></td><td>删除最后一个数据O(1)</td></tr><tr><td><code>c.size()</code></td><td>返回实际数据个数（unsigned类型）O(1)</td></tr><tr><td><code>c.clear()</code></td><td>清除所有元素O(N),N为元素个数</td></tr><tr><td><code>c.resize(n,v)</code></td><td>调整数组大小为<code>n</code>，空间变多赋值为<code>v</code>，空间变少直接删除。若<code>v</code>没有赋值，默认为<code>0</code></td></tr><tr><td><code>c.insert(it,x)</code></td><td>向任意迭代器<code>it</code>插入一个元素<code>x</code> ，O(N)</td></tr><tr><td>例：<code>c.insert(c.begin() + 3,-1)</code></td><td>将<code>-1</code>插入<code>c[3]</code>的位置,原本在<code>v[3]</code>处的数据往后移一位</td></tr><tr><td><code>c.insert(it,n,x)</code></td><td>向任意迭代器<code>it</code>插入<code>n</code>个元素<code>x</code> ，O(N)</td></tr><tr><td><code>c.insert(it,c.begin(),c.end())</code></td><td>向任意迭代器<code>it</code>插入可变数组<code>c</code> ，O(N)</td></tr><tr><td><code>c.swap(c')</code></td><td>交换数组<code>c</code>,<code>c'</code>的内容</td></tr><tr><td><code>c.erase(first,last)</code></td><td>删除<code>[first,last)</code>的所有元素，O(N)</td></tr><tr><td><code>c.begin()</code></td><td>返回首元素的迭代器（通俗来说就是地址）O(1)</td></tr><tr><td><code>c.end()</code></td><td>返回最后一个元素的<strong>后一个位置</strong>的迭代器（地址）O(1)</td></tr><tr><td><code>c.empty()</code></td><td>判断是否为空，为空返回真，反之返回假O(1)</td></tr></tbody></table><blockquote><p>注意：</p><ul><li><code>end()</code>返回的是最后一个元素的后一个位置的地址，不是最后一个元素的地址，<strong>所有STL容器均是如此</strong></li></ul></blockquote><p><strong>排序：</strong><br />使用<code>sort</code>排序要：<code>sort(c.begin(),c.end())</code>;</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">a</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 对[1, n]区间进行从小到大排序</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="13访问"><a class="markdownIt-Anchor" href="#13访问"></a> 1.3访问</h3><p>共三种方法：</p><ul><li><strong>下标法</strong>：和普通数组一样<br />注意：一维数组的下标是从 <code>0</code> 到 <code>v.size()-1</code> ，访问之外的数会出现越界错误</li><li><strong>迭代器法</strong>：类似指针一样的访问 ，首先需要声明迭代器变量，和声明指针变量一样，可以根据代码进行理解（附有注释）。<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span> <span class="token comment">//定义一个v数组</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//声明一个迭代器指向v的初始位置(v[0])</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><strong>使用auto</strong> ：非常简便，但是会访问数组的所有元素（特别注意0位置元素也会访问到）</li></ul><h4 id="131下标访问"><a class="markdownIt-Anchor" href="#131下标访问"></a> 1.3.1下标访问</h4><p>直接和普通数组一样进行访问即可。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span><span class="token comment">//添加元素</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//下标访问 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="132迭代器访问"><a class="markdownIt-Anchor" href="#132迭代器访问"></a> 1.3.2迭代器访问</h4><p>类似指针，迭代器就是充当指针的作用。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> vi<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//迭代器访问</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it<span class="token punctuation">;</span>   <span class="token comment">// 相当于声明了一个迭代器类型的变量it</span><span class="token comment">// 通俗来说就是声明了一个指针变量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>方式一：</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span><span class="token punctuation">(</span>it <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>方式二：</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it <span class="token operator">++</span><span class="token punctuation">)</span>  cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token comment">//v.end()指向尾元素地址的下一个地址</span><span class="token comment">// 或者</span><span class="token keyword">auto</span> it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>it <span class="token operator">!=</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>    it<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="133智能指针"><a class="markdownIt-Anchor" href="#133智能指针"></a> 1.3.3智能指针</h4><p><strong>只能遍历完数组</strong>，如果要指定的内容进行遍历，需要另选方法。<br /><code>auto</code>能够自动识别并获取数据类型</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 1. 输入</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">a</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>x<span class="token operator">:</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    cin <span class="token operator">>></span> x<span class="token punctuation">;</span> <span class="token comment">// 可以进行输入，注意加引用</span><span class="token punctuation">&#125;</span><span class="token comment">// 2. 输出</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">241</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> val <span class="token operator">:</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> val <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token comment">// 12 241</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>vector</code>注意：</p><ul><li><code>v[i]</code> 和 <code>*(v.begin() + i)</code> 等价，与指针类似。</li><li><code>vector</code>和<code>string</code>的STL容器支持<code>*(it + i)</code>的元素访问，其它容器可能也可以支持这种方式访问，但用的不多，可自行尝试。</li></ul></blockquote><h2 id="2-stack"><a class="markdownIt-Anchor" href="#2-stack"></a> 2 stack</h2><h3 id="21介绍"><a class="markdownIt-Anchor" href="#21介绍"></a> 2.1介绍</h3><p>栈为数据结构的一种，是STL中实现先进后出，后进先出的一种容器。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//头文件需要添加</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack></span></span><span class="token comment">//声明</span>stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> s<span class="token punctuation">;</span>stack<span class="token operator">&lt;</span>string<span class="token operator">></span> s<span class="token punctuation">;</span>stack<span class="token operator">&lt;</span>node<span class="token operator">></span> s<span class="token punctuation">;</span><span class="token comment">//node为结构体类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="22封装函数"><a class="markdownIt-Anchor" href="#22封装函数"></a> 2.2封装函数</h3><table><thead><tr><th>代码</th><th>含义</th></tr></thead><tbody><tr><td><code>s.push(element)</code></td><td>将元素<code>element</code>压入栈中，增加元素，O(1)</td></tr><tr><td><code>s.pop()</code></td><td>移除栈顶元素O(1)</td></tr><tr><td><code>s.top()</code></td><td>返回栈顶元素(但不删除)O(1)</td></tr><tr><td><code>s.empty()</code></td><td>检测栈内是否为空，空为真O(1)</td></tr><tr><td><code>s.size()</code></td><td>返回栈内元素个数，O(1)</td></tr><tr><td>注意没有 <code>s.clear()</code>!</td><td>不提供该函数</td></tr></tbody></table><h3 id="23栈的遍历"><a class="markdownIt-Anchor" href="#23栈的遍历"></a> 2.3栈的遍历</h3><h4 id="231栈遍历"><a class="markdownIt-Anchor" href="#231栈遍历"></a> 2.3.1栈遍历</h4><p>栈只能对栈顶元素进行操作，如果想要进行遍历，只能将栈中元素一个个取出来存在数组中</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> st<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> st<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> tp <span class="token operator">=</span> st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 栈顶元素</span>    st<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="232数组模拟栈进行遍历"><a class="markdownIt-Anchor" href="#232数组模拟栈进行遍历"></a> 2.3.2数组模拟栈进行遍历</h4><p>通过一个<strong>数组</strong>对栈进行模拟，一个存放下标的变量<code>top</code>模拟指向栈顶的指针<br /><strong>特点</strong>：比<code>STL</code>的<code>stack</code>速度更快，遍历元素方便</p><blockquote><p>一般来说单调栈和单调队列写法均可以使用额外变量<code>tt</code>或<code>hh</code>来进行模拟</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> s<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 栈 从左至右为栈底到栈顶</span><span class="token keyword">int</span> tt <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// tt 代表栈顶指针,初始栈内无元素，tt为-1</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//入栈 </span>s<span class="token punctuation">[</span><span class="token operator">++</span>tt<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 出栈</span><span class="token keyword">int</span> top_element <span class="token operator">=</span> s<span class="token punctuation">[</span>tt<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//入栈操作示意</span><span class="token comment">//  0  1  2  3  4  5  </span><span class="token comment">//                tt</span><span class="token comment">//出栈后示意</span><span class="token comment">//  0  1  2  3  4 </span><span class="token comment">//              tt</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-queue"><a class="markdownIt-Anchor" href="#3-queue"></a> 3 queue</h2><h3 id="31介绍"><a class="markdownIt-Anchor" href="#31介绍"></a> 3.1介绍</h3><p>队列为数据结构的一种，是STL中实现先进先出，后进后出的一种容器。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//头文件</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue></span></span><span class="token comment">//初始化定义</span>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="32封装函数"><a class="markdownIt-Anchor" href="#32封装函数"></a> 3.2封装函数</h3><table><thead><tr><th>代码</th><th>含义</th></tr></thead><tbody><tr><td><code>q.front()</code></td><td>返回队首元素O(1)</td></tr><tr><td><code>q.back()</code></td><td>返回队尾元素O(1)</td></tr><tr><td><code>q.push(element)</code></td><td>队尾添加一个元素<code>element</code>O(1)</td></tr><tr><td><code>q.size()</code></td><td>返回队列中元素个数，返回值类型<code>unsigned int</code>O(1)</td></tr><tr><td><code>q.empty()</code></td><td>检测队列是否为空，空为真O(1)</td></tr><tr><td>注意没有 <code>q.clear()</code>!</td><td>不提供该函数</td></tr></tbody></table><h3 id="33队列模拟"><a class="markdownIt-Anchor" href="#33队列模拟"></a> 3.3队列模拟</h3><p>使用数组<code>q[]</code>模拟队列<br /><code>hh</code>表示队首元素的下标，初始值为<code>0</code><br /><code>tt</code>表示队尾元素的下标，初始值为<code>-1</code>,表示<strong>刚开始队列为空</strong></p><blockquote><p>一般来说单调栈和单调队列写法均可以使用额外变量<code>tt</code>或<code>hh</code>来进行模拟</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">int</span> q<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> hh<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>tt<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">// 入队</span>  q<span class="token punctuation">[</span><span class="token operator">++</span>tt<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  q<span class="token punctuation">[</span><span class="token operator">++</span>tt<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">// 将所有元素出队</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>hh<span class="token operator">&lt;=</span>tt<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cout <span class="token operator">&lt;&lt;</span> q<span class="token punctuation">[</span>hh<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token char">' '</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-deque"><a class="markdownIt-Anchor" href="#4-deque"></a> 4 deque</h2><h3 id="41介绍"><a class="markdownIt-Anchor" href="#41介绍"></a> 4.1介绍</h3><p>首尾都可以插入和删除的队列为双端队列。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//添加头文件</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;deque></span></span><span class="token comment">//初始化定义</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> dq<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="42封装函数"><a class="markdownIt-Anchor" href="#42封装函数"></a> 4.2封装函数</h3><blockquote><p>注意双端队列的常数比较大</p></blockquote><table><thead><tr><th>代码</th><th>含义</th></tr></thead><tbody><tr><td><code>dq.push_back(element)/push_front(element)</code></td><td>把<code>element</code>插入队尾后/队首O(1)</td></tr><tr><td><code>dq.back()/dq.front()</code></td><td>返回队尾/队首元素O(1)</td></tr><tr><td><code>dq.pop_back()/dq.pop_front()</code></td><td>删除队尾/队首元素O(1)</td></tr><tr><td><code>dq.erase(iterator it)</code></td><td>删除双端队列中的某一个元素</td></tr><tr><td><code>dq.erase(iterator first,iterator last)</code></td><td>删除双端队列中<code>[first,last)</code>中的元素</td></tr><tr><td><code>dq.size()</code></td><td>返回deque中元素个数O(1)</td></tr><tr><td><code>dq.empty()</code></td><td>检测队列是否为空，空为真O(1)</td></tr><tr><td><code>dq.clear()</code></td><td>清空deque</td></tr></tbody></table><h3 id="43注意点"><a class="markdownIt-Anchor" href="#43注意点"></a> 4.3注意点</h3><p>deque可以进行排序</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//从小到大</span><span class="token function">sort</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> q<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//从大到小排序</span><span class="token function">sort</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> q<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token generic-function"><span class="token function">greater</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//deque里面的类型需要是int型,保证deque的数据类型和greater的数据类型一致</span><span class="token function">sort</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> q<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">greater</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//高版本C++才可以用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-priority_queue"><a class="markdownIt-Anchor" href="#5-priority_queue"></a> 5 priority_queue</h2><h3 id="51介绍"><a class="markdownIt-Anchor" href="#51介绍"></a> 5.1介绍</h3><p>优先队列是在正常队列的基础上加了优先级，保证每次的队首元素都是优先级最高的。<br />可以实现每次从优先队列中取出的元素都是队列中<strong>优先级最高</strong>的一个。<br />它的底层是通过<strong>堆</strong>来实现的。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//头文件</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue></span></span><span class="token comment">//初始化定义</span>priority_queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="52封装函数"><a class="markdownIt-Anchor" href="#52封装函数"></a> 5.2封装函数</h3><table><thead><tr><th>代码</th><th>含义</th></tr></thead><tbody><tr><td><code>q.top()</code></td><td>返回队首元素O(1)</td></tr><tr><td><code>q.push(element)</code></td><td>将<code>element</code>压入队列O(logN)</td></tr><tr><td><code>q.pop()</code></td><td>堆顶（队首）元素出队O(logN)</td></tr><tr><td><code>q.size()</code></td><td>返回队列中元素个数O(1)</td></tr><tr><td><code>q.empty()</code></td><td>检测队列是否为空，空为真O(1)</td></tr><tr><td>注意没有 <code>q.clear()</code>!</td><td>不提供该函数</td></tr><tr><td>优先队列只能通过<code>top()</code>访问队首元素(优先级最高的元素)</td><td></td></tr></tbody></table><h3 id="53设置优先级"><a class="markdownIt-Anchor" href="#53设置优先级"></a> 5.3设置优先级</h3><h4 id="531基本数据类型的优先级"><a class="markdownIt-Anchor" href="#531基本数据类型的优先级"></a> 5.3.1基本数据类型的优先级</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">priority_queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> pq<span class="token punctuation">;</span><span class="token comment">// 默认大根堆，即每次取出的元素是队列中的最大值</span>priority_queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">,</span>less<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> q2<span class="token punctuation">;</span><span class="token comment">// 大根堆每次取出的元素是队列中的最大值，同第一行</span>priority_queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">,</span>greater<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> q3<span class="token comment">// 小根堆，每次取出的元素是队列中的最小值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>参数解释：</p><ul><li><p>第一个参数：就是优先级队列中储存的数据类型</p></li><li><p>第二个参数：</p><p><code>vector&lt;int&gt;</code>是用来承载底层数据结构堆的容器，若优先队列中储存的数据类型是<code>double</code>，就要填<code>vector&lt;double&gt;</code><br /><strong>总之存的是什么类型的数据，就相应的填写对应类型。同时也要改动第三个参数里面的对应类型。</strong></p></li><li><p>第三个参数：<br /><code>less&lt;int&gt;</code> 表示数字大的优先级高，堆顶为最大的数字<br /><code>greater&lt;int&gt;</code> 表示数字小的优先级高,堆顶为最小的数字<br /><strong>int代表的是数据类型，也要填优先队列中存储的数据类型</strong></p></li></ul><hr /><p>下面介绍基础数据类型优先级设置的写法：<br />1.基础写法(非常实用)：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">priority_queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q1<span class="token punctuation">;</span> <span class="token comment">// 默认大根堆, 即每次取出的元素是队列中的最大值</span>priority_queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">,</span> less<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> q2<span class="token punctuation">;</span> <span class="token comment">// 大根堆, 每次取出的元素是队列中的最大值，同第一行</span>priority_queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">,</span> greater<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> q3<span class="token punctuation">;</span> <span class="token comment">// 小根堆, 每次取出的元素是队列中的最小值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2.自定义排序(不常见，比较麻烦)：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">cmp1</span><span class="token punctuation">&#123;</span>  <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> x<span class="token operator">&lt;</span>y<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">cmp2</span><span class="token punctuation">&#123;</span>  <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> x<span class="token operator">></span>y<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>priority_queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">,</span>cmp1<span class="token operator">></span> q1<span class="token punctuation">;</span><span class="token comment">//大根堆</span>priority_queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">,</span>cmp2<span class="token operator">></span> q2<span class="token punctuation">;</span><span class="token comment">//小根堆</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="532高级数据类型结构体优先级"><a class="markdownIt-Anchor" href="#532高级数据类型结构体优先级"></a> 5.3.2高级数据类型(结构体)优先级</h4><blockquote><p>即优先队列中存储结构体类型，必须要设置优先级，即结构体的比较运算（因为优先队列的堆中要比较大小，才能将对应最大或者最小元素移到堆顶）。</p></blockquote><p>优先级设置可以定义在<strong>结构体内</strong>进行小于号重载，也可以定义在<strong>结构体外</strong>。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//要排序的结构体（存储在优先队列里面的）</span><span class="token keyword">struct</span> <span class="token class-name">Point</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>版本一：自定义全局比较规则</strong></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//定义的比较结构体</span><span class="token comment">//注意：cmp是个结构体 </span><span class="token keyword">struct</span> <span class="token class-name">cmp</span> <span class="token punctuation">&#123;</span><span class="token comment">//自定义堆的排序规则 </span><span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">const</span> Point <span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token keyword">const</span> Point <span class="token operator">&amp;</span>b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> a<span class="token punctuation">.</span>x <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//初始化定义， </span>priority_queue<span class="token operator">&lt;</span>Point<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>Point<span class="token operator">></span><span class="token punctuation">,</span> cmp<span class="token operator">></span> q<span class="token punctuation">;</span> <span class="token comment">// x大的在堆顶</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>版本二：直接在结构体内定义</strong></li></ul><blockquote><p>因为是在结构体内部自定义的规则，一旦需要比较结构体，自动调用结构体内部重载运算符规则。<br />比较美观，易查找</p></blockquote><p>结构体内部有两种方式：<br /><strong>方式一：（更清晰）</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>  <span class="token keyword">friend</span> <span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">const</span> node <span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token keyword">const</span> node <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span>x <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>x<span class="token punctuation">;</span><span class="token comment">// 按照x从小到大排序，大根堆</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>方式二：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>  <span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">const</span> node <span class="token operator">&amp;</span>a<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> x <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>x<span class="token punctuation">;</span><span class="token comment">//按照x从小到大排序，大根堆 </span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优先队列的定义</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">priority_queue<span class="token operator">&lt;</span>node<span class="token operator">></span> q<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>注意：<strong>优先队列自定义排序规则和<code>sort()</code>函数定义<code>cmp</code>函数很相似，但最后返回的情况是</strong>相反</strong>的。即相同的符号，最后定义的排列顺序是完全相反的。<br />所以只需要记住<code>sort</code>的排序规则和优先队列的规则是相反的或者堆顶位于最后一个元素就可以了。</p><blockquote><p>当理解了堆的原理就会发现，堆调整时比较顺序是孩子和父亲节点进行比较，如果是<code>&gt;</code>，那么孩子节点要大于父亲节点，堆顶自然是最小值。</p></blockquote><h3 id="54储存特殊类型的优先级"><a class="markdownIt-Anchor" href="#54储存特殊类型的优先级"></a> 5.4储存特殊类型的优先级</h3><h4 id="541储存pair类型"><a class="markdownIt-Anchor" href="#541储存pair类型"></a> 5.4.1储存pair类型</h4><ul><li>排序规则：<br />默认先对<code>pair</code>的<code>first</code>进行降序排序，然后再对<code>second</code>降序排序<br />对<code>first</code>先排序，大的排在前面，如果<code>fiest</code>元素相同，再对<code>second</code>元素排序，大的排在前面。</li></ul><blockquote><p><code>pair</code>请参考下文</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    priority_queue<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span>q<span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>输出结果：<br />8 7<br />7 9<br />7 8</p></blockquote><h2 id="6-map"><a class="markdownIt-Anchor" href="#6-map"></a> 6 map</h2><h3 id="61介绍"><a class="markdownIt-Anchor" href="#61介绍"></a> 6.1介绍</h3><p>映射类似与函数的对应关系，每一个<code>x</code>对应一个<code>y</code>，而<code>map</code>是每一个<strong>键</strong>对应一个<strong>值</strong>，会python的朋友学习后就会知道这和python的字典非常类似。</p><blockquote><p>比如说：学习 对应 看书，学习 是键，看书 是值。<br />学习-&gt;看书<br />玩耍 对应 打游戏，玩耍 是键，打游戏 是值。<br />玩耍-&gt;打游戏</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//头文件</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map></span></span><span class="token comment">//初始化定义</span>map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span>string<span class="token operator">></span> mp<span class="token punctuation">;</span>map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> mp<span class="token punctuation">;</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span>node<span class="token operator">></span> mp<span class="token punctuation">;</span><span class="token comment">//node是结构体</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>map特性：map会按照键的顺序从小到大自动排序，建的类型必须可以比较大小</p></blockquote><h3 id="62封装函数"><a class="markdownIt-Anchor" href="#62封装函数"></a> 6.2封装函数</h3><h4 id="621封装函数"><a class="markdownIt-Anchor" href="#621封装函数"></a> 6.2.1封装函数</h4><table><thead><tr><th>代码</th><th>含义</th></tr></thead><tbody><tr><td><code>mp.find(key)</code></td><td>返回键为key的映射的<code>迭代器</code>O(logN) 注意：用find函数来定位数据出现位置，它返回一个迭代器。当数据存在时，返回数据所在位置的迭代器，数据不存在时，返回mp.end()</td></tr><tr><td><code>mp.erase(it)</code></td><td>删除迭代器对应的键和值O(1)</td></tr><tr><td><code>mp.erase(key)</code></td><td>删除映射的键和值O(logN)</td></tr><tr><td><code>mp.erase(first,last)</code></td><td>删除<code>[first,last)</code>左闭右开迭代器对应的键和值O(last-first)</td></tr><tr><td><code>mp.size()</code></td><td>返回映射的对数O(1)</td></tr><tr><td><code>mp.clear()</code></td><td>清空map中所有的元素O(N)</td></tr><tr><td><code>mp.insert()</code></td><td>插入元素，插入时要构成键值对</td></tr><tr><td><code>mp.empty()</code></td><td>如果map为空，返回true，否则返回false</td></tr><tr><td><code>mp.begin()</code></td><td>返回指向map第一个元素的迭代器(地址)</td></tr><tr><td><code>mp.end()</code></td><td>返回指向map最后一个元素的下一个地址的迭代器</td></tr><tr><td><code>mp.rbegin()</code></td><td>返回指向最后一个元素的逆向迭代器(地址)</td></tr><tr><td><code>mp.rend()</code></td><td>返回指向map第一个元素前面(上一个地址)的逆向迭代器</td></tr><tr><td><code>mp.count(key)</code></td><td>查看元素是否存在，因为map中键是唯一的，所以存在返回1，不存在返回0</td></tr><tr><td><code>mp.lower_bound(key)</code></td><td>返回一个迭代器，指向键值&gt;=<strong>key</strong>的第一个元素</td></tr><tr><td><code>mp.upper_bound(key)</code></td><td>返回一个迭代器，指向键值&gt;<strong>key</strong>的第一个元素</td></tr></tbody></table><h4 id="622注意点"><a class="markdownIt-Anchor" href="#622注意点"></a> 6.2.2注意点</h4><p><strong>下面说明部分封装函数的注意点</strong></p><blockquote><p>注意：</p><ul><li>查找元素是否存在时，可以使用<br />①<code>mp.find()</code> ② <code>mp.count()</code> ③ <code>mp[key]</code><br />但是第三种情况，如果不存在对应的key时，会自动创建一个键值对<code>&lt;key,0&gt;</code>（产生一个额外的键值对空间）<br />所以为了不增加额外的空间负担和避免对下一次查找造成干扰，最好使用前两种方法</li><li>使用逆向迭代器时，遍历也是<code>it++</code>，删除元素需要使用到<code>mp.base()</code>函数，一般不用来插入元素</li></ul></blockquote><h4 id="623迭代器进行正反向遍历"><a class="markdownIt-Anchor" href="#623迭代器进行正反向遍历"></a> 6.2.3迭代器进行正反向遍历</h4><ul><li><code>mp.begin()</code>和<code>mp.end()</code>用法：<br /><strong>用于正向遍历map</strong></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> mp<span class="token punctuation">;</span>mp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>mp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>mp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> it<span class="token operator">=</span>mp<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">!=</span>mp<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  cout <span class="token operator">&lt;&lt;</span> it<span class="token operator">-></span>first <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> it<span class="token operator">-></span>second <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*结果：    1 2    2 3    3 4*/</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>mp.rbegin()</code>和<code>mp.rend()</code><br /><strong>用于逆向遍历map</strong></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> mp<span class="token punctuation">;</span>mp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>mp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>mp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> it<span class="token operator">=</span>mp<span class="token punctuation">.</span><span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">!=</span>mp<span class="token punctuation">.</span><span class="token function">rend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  cout <span class="token operator">&lt;&lt;</span> it<span class="token operator">-></span>first <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> it<span class="token operator">-></span>second <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*结果：    3 4    2 3    1 2*/</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="624二分查找"><a class="markdownIt-Anchor" href="#624二分查找"></a> 6.2.4二分查找</h4><p>二分查找 <code>lower_bound() upper_bound()</code></p><blockquote><p>map的二分查找以第一个元素（即键为准），对键进行二分查找<br />返回值为map迭代器类型</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> m<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//有序</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it1 <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">lower_bound</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> it1<span class="token operator">-></span>first <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token comment">//it1->first=2</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it2 <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">upper_bound</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> it2<span class="token operator">-></span>first <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token comment">//it2->first=6</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="63添加元素"><a class="markdownIt-Anchor" href="#63添加元素"></a> 6.3添加元素</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//先声明</span>map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span>string<span class="token operator">></span> mp<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>方式一：</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">mp<span class="token punctuation">[</span><span class="token string">"学习"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"看书"</span>；mp<span class="token punctuation">[</span><span class="token string">"玩耍"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"打游戏"</span>；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>方式二：</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">mp<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span><span class="token string">"vegetable"</span>，<span class="token string">"蔬菜"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>；<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>方式三：</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">mp<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">pair</span><span class="token generic class-name"><span class="token operator">&lt;</span>string<span class="token punctuation">,</span>string<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token string">"fruit"</span>，<span class="token string">"水果"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>方式四：</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">mp<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"water"</span><span class="token punctuation">,</span><span class="token string">"水"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="64元素访问"><a class="markdownIt-Anchor" href="#64元素访问"></a> 6.4元素访问</h3><ul><li>方式一：迭代器访问</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it<span class="token punctuation">;</span> <span class="token keyword">for</span><span class="token punctuation">(</span>it <span class="token operator">=</span> mp<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> mp<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// it是结构体指针访问所以要用 -> 访问 </span>  cout <span class="token operator">&lt;&lt;</span> it<span class="token operator">-></span>first <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> it<span class="token operator">-></span>second <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>  <span class="token comment">//         键                   值 </span>  <span class="token comment">//*it是结构体变量 访问要用 . 访问 </span>  <span class="token comment">//cout&lt;&lt;(*it).first&lt;&lt;" "&lt;&lt;(*it).second; </span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>方式二：智能指针访问</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> ed <span class="token operator">:</span> mp<span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> ed<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token char">' '</span> <span class="token operator">&lt;&lt;</span> ed<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//键，值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>方式三：对指定单个元素访问</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">map<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> mp<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token char">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> it<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token char">' '</span> <span class="token operator">&lt;&lt;</span> it<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="65与unordered_map的比较"><a class="markdownIt-Anchor" href="#65与unordered_map的比较"></a> 6.5与unordered_map的比较</h3><h4 id="651封装函数"><a class="markdownIt-Anchor" href="#651封装函数"></a> 6.5.1封装函数</h4><table><thead><tr><th>代码</th><th>含义</th></tr></thead><tbody><tr><td><code>ump.find(key)</code></td><td>返回键为key的映射的<code>迭代器</code>O(1) 注意：用find函数来定位数据出现位置，它返回一个迭代器。当数据存在时，返回数据所在位置的迭代器，数据不存在时，返回ump.end()</td></tr><tr><td><code>ump.erase(it)</code></td><td>删除迭代器对应的键和值O(1)</td></tr><tr><td><code>ump.erase(key)</code></td><td>删除映射的键和值O(N)</td></tr><tr><td><code>ump.erase(first,last)</code></td><td>删除<code>[first,last)</code>左闭右开迭代器对应的键和值O(last-first)</td></tr><tr><td><code>ump.size()</code></td><td>返回映射的对数O(1)</td></tr><tr><td><code>ump.clear()</code></td><td>清空unordered_map中所有的元素O(N)</td></tr><tr><td><code>ump.insert()/ump.emplace()</code></td><td>插入元素，插入时要构成键值对</td></tr><tr><td><code>ump.empty()</code></td><td>如果unordered_map为空，返回true，否则返回false</td></tr><tr><td><code>ump.begin()</code></td><td>返回指向unordered_map第一个元素的迭代器(地址)</td></tr><tr><td><code>ump.end()</code></td><td>返回指向unordered_map最后一个元素的下一个地址的迭代器</td></tr><tr><td><code>ump.count(key)</code></td><td>查看元素是否存在，因为unordered_map中键是唯一的，所以存在返回1，不存在返回0</td></tr></tbody></table><blockquote><p>注意：<br /><strong>头文件</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>ump.insert()</strong></p><ul><li>如果插入的键已经存在于 <code>unordered_map</code> 中，<code>insert()</code> 不会添加新的键值对，而是保持原有的键值对不变。如果你希望更新已存在键对应的值，你可以使用 <code>operator[]</code> 或者 <code>at()</code> 函数。</li><li><code>insert()</code> 返回一个 std::pair 对象，其 first 成员指向一个指向插入的元素的迭代器，second 成员表示插入是否成功。如果插入成功，second 将为 true；如果插入失败，second 将为 false</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//方法一：</span>ump<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">pair</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"one"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//方法二：</span>ump<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token class-name">unordered_map</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">value_type</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"one"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//方法三：</span>ump<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"one"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//有花括号</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>ump.emplace()</strong></p><ul><li><code>emplace()</code> 接受参数作为键值对的构造函数的参数。它会在 std::unordered_map 中构造新的元素，而不需要进行拷贝或移动操作。如果指定的键已经存在，它将会失败。如果键不存在，则会插入成功。</li><li><code>emplace()</code> 返回一个 std::pair 对象，与 <code>insert()</code> 类似，但它的 first 成员指向一个指向新插入元素的迭代器。</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//方法一：</span>ump<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">pair</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"one"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//方法二：</span>myMap<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token class-name">unordered_map</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">value_type</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"one"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//方法三：</span>myMap<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"one"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//没有花括号</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>遍历问题</strong><br />对于<code>unordered_map</code>或者<code>unordered_set</code>容器，其遍历顺序与创建该容器时输入元素的顺序是不一定一致的，遍历是按照哈希表从前往后依次遍历的</p></blockquote><h4 id="652内部实现原理"><a class="markdownIt-Anchor" href="#652内部实现原理"></a> 6.5.2内部实现原理</h4><p><strong>map：<strong>内部使用</strong>红黑树</strong>实现，具有<strong>自动排序</strong>(按键从小到大)功能。<br /><strong>unordered_map：<strong>内部使用</strong>哈希表</strong>实现，内部元素无序杂乱。</p><h4 id="653效率比较"><a class="markdownIt-Anchor" href="#653效率比较"></a> 6.5.3效率比较</h4><p><strong>map：</strong></p><ul><li>优点：内部使用红黑树实现，内部元素具有有序性查询删除等操作复杂度为O(logN)</li><li>缺点：占用空间，红黑树里每个节点需要保存父子节点和红黑性质等信息，空间占用较大<br /><strong>unordered_map：</strong></li><li>优点：内部使用哈希表实现，查找速度非常快(适用于大量的查询操作)</li><li>缺点：建立哈希表比较耗时</li></ul><blockquote><p>两者封装函数的使用方法基本一样，差别不大。<br /><strong>注意：</strong></p><ul><li>使用内部元素越来越多，两种容器的插入删除查询操作的时间都会逐渐变大，效率逐渐变低</li><li>使用<code>[]</code>查找元素时，如果元素不存在，两种容器都是<strong>创建一个空的元素</strong>；如果存在，会正常索引对应的值。所以如果查询过多的不存在的元素值，容器内部会创建大量的空的键值对，后续查询创建删除效率会<strong>大大降低</strong>。</li><li>查询容器内部元素的最优方法是：先判断存在与否，再索引对应值（适用于这两种容器）</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//以map为例</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> mp<span class="token punctuation">;</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">999999999</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>mp<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 此处判断是否存在x这个键</span>    cout <span class="token operator">&lt;&lt;</span> mp<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span> <span class="token comment">// 只有存在才会索引对应的值，避免不存在x时多余空元素的创建</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>另外：</p><blockquote><p>还有一种映射：<code>multimap</code><br />键可以重复出现，即一个键对应多个值<br />用法于<code>map</code>类似，也是红黑树实现，如要了解，可以自行搜索</p></blockquote><h2 id="7-set"><a class="markdownIt-Anchor" href="#7-set"></a> 7 set</h2><h3 id="71-介绍"><a class="markdownIt-Anchor" href="#71-介绍"></a> 7.1 介绍</h3><p>set容器的元素<strong>不会重复</strong>,当插入一个集合中已有的元素时,并不会插入就去,而且set容器里的元素会自动<strong>从小到大</strong>排序,即: set里面的元素<strong>不重复</strong>且<strong>有序</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//头文件</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set></span></span><span class="token comment">//初始化定义</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> s<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="72封装函数"><a class="markdownIt-Anchor" href="#72封装函数"></a> 7.2封装函数</h3><table><thead><tr><th>代码</th><th>含义</th></tr></thead><tbody><tr><td><code>s.begin()</code></td><td>返回set容器的第一个元素的地址(迭代器)O(1)</td></tr><tr><td><code>s.end()</code></td><td>返回set容器的最后一个元素的下一个地址(迭代器)O(1)</td></tr><tr><td><code>s.rbegin()</code></td><td>返回逆序迭代器,指向容器元素最后一个位置O(1)</td></tr><tr><td><code>s.rend()</code></td><td>返回逆序迭代器,指向容器第一个元素前面的位置O(1)</td></tr><tr><td><code>s.clear()</code></td><td>删除set容器中的所有的元素,返回unsigned int类型O(N)</td></tr><tr><td><code>s.empty()</code></td><td>判断set容器是否为空O(1)</td></tr><tr><td><code>s.insert(k)</code></td><td>插入一个元素<code>k</code></td></tr><tr><td><code>s.size()</code></td><td>返回当前set容器中的元素个数O(1)</td></tr><tr><td><code>s.erase(iterator)</code></td><td>删除定位器iterator指向的值</td></tr><tr><td><code>s.erase(first,last)</code></td><td>删除定位器<code>[first,last)</code>之间的值</td></tr><tr><td><code>s.erase(key)</code></td><td>删除键值<code>key</code>的值</td></tr><tr><td><code>s.find(element)</code></td><td>查找set中的某一元素，有则返回该元素对应的迭代器，无则返回结束迭代器</td></tr><tr><td><code>s.count(element)</code></td><td>查找set中的元素出现的个数，由于set中元素唯一，此函数相当于查询<code>element</code>是否出现</td></tr><tr><td><code>s.lower_bound(k)</code></td><td>返回<strong>大于等于</strong><code>k</code>的第一个元素的迭代器</td></tr><tr><td><code>s.upper_bound(k)</code></td><td>返回<strong>大于</strong><code>k</code>的第一个元素的迭代器</td></tr></tbody></table><h3 id="73访问"><a class="markdownIt-Anchor" href="#73访问"></a> 7.3访问</h3><ul><li>迭代器访问</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">for</span><span class="token punctuation">(</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>智能指针</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> i <span class="token operator">:</span> s<span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="74重载运算符"><a class="markdownIt-Anchor" href="#74重载运算符"></a> 7.4重载&lt;运算符</h3><ul><li>基础数据类型<br />方式一:改变set排序规则,set中默认使用less比较器,即<strong>从小到大</strong>排序(常用)</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> s1<span class="token punctuation">;</span> <span class="token comment">// 默认从小到大排序</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> greater<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> s2<span class="token punctuation">;</span> <span class="token comment">// 从大到小排序</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>方式二:重载运算符</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//重载 &lt; 运算符</span><span class="token keyword">struct</span> <span class="token class-name">cmp</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> u<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> v<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>       <span class="token comment">// return + 返回条件</span>       <span class="token keyword">return</span> u <span class="token operator">></span> v<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> cmp<span class="token operator">></span> s<span class="token punctuation">;</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> i <span class="token operator">:</span> s<span class="token punctuation">)</span>    cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token comment">// 10 9 8 7 6 5 4 3 2 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方式三:初始化时使用匿名函数定义比较规则</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> function<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">>></span> <span class="token function">s</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> i <span class="token operator">></span> j<span class="token punctuation">;</span> <span class="token comment">// 从大到小</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> x <span class="token operator">:</span> s<span class="token punctuation">)</span>    cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>高级数据结构类型(结构体)<br />直接重载结构体运算符即可,让结构体可以比较</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">Point</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">const</span> Point <span class="token operator">&amp;</span>p<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span><span class="token comment">// 按照点的横坐标从小到大排序,如果横坐标相同,纵坐标从小到大</span><span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">==</span> p<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token keyword">return</span> y <span class="token operator">&lt;</span> p<span class="token punctuation">.</span>y<span class="token punctuation">;</span><span class="token keyword">return</span> x <span class="token operator">&lt;</span> p<span class="token punctuation">.</span>x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>set<span class="token operator">&lt;</span>Point<span class="token operator">></span> s<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>    cin <span class="token operator">>></span> x <span class="token operator">>></span> y<span class="token punctuation">;</span>    s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>x<span class="token punctuation">,</span> y<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 输入5 45 23 73 54 8*/</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> i <span class="token operator">:</span> s<span class="token punctuation">)</span>    cout <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>x <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>y <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token comment">/* 输出3 53 74 85 25 4*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="75其它set"><a class="markdownIt-Anchor" href="#75其它set"></a> 7.5其它set</h3><p><code>multiset</code>:元素可以重复,且元素有序(元素相等时,先插入的排在前面)<br /><code>unordered_set</code>:元素无序且只能出现一次<br /><code>unordered_multiset</code>:元素无序可以多次出现</p><h2 id="8-pair"><a class="markdownIt-Anchor" href="#8-pair"></a> 8 pair</h2><h3 id="81介绍"><a class="markdownIt-Anchor" href="#81介绍"></a> 8.1介绍</h3><p>pair只含有两个元素,可以看作是只有两个元素的结构体<br /><strong>应用:</strong></p><ul><li>替代二元结构体</li><li>支持比较操作符，可以使用 <code>==</code>、<code>!=</code>、<code>&lt;</code>、<code>&lt;=</code>、<code>&gt;</code>、<code>&gt;=</code> 来比较两个<code>pair</code>对象的大小关系。按字典序进行比较，先比较第一个元素，如果相等再比较第二个元素。(可以应用于优先队列,set等)</li><li>作为<code>map</code>键值对进行插入(代码如下)</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span>mp<span class="token punctuation">;</span>mp<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">pair</span><span class="token generic class-name"><span class="token operator">&lt;</span>string<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token string">"xingmaqi"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// mp.insert(make_pair("xingmaqi", 1));</span><span class="token comment">// mp.insert(&#123;"xingmaqi", 1&#125;);</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//头文件</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;utility></span></span><span class="token comment">//1.初始化定义</span>pair<span class="token operator">&lt;</span>string<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">p</span><span class="token punctuation">(</span><span class="token string">"wangyaqi"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//带初始值的</span>pair<span class="token operator">&lt;</span>string<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> p<span class="token punctuation">;</span><span class="token comment">//不带初始值的</span><span class="token comment">//2.赋值</span>p <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"wang"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>p <span class="token operator">=</span> <span class="token function">make_pair</span><span class="token punctuation">(</span><span class="token string">"wang"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p <span class="token operator">=</span> <span class="token generic-function"><span class="token function">pair</span><span class="token generic class-name"><span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token string">"wang"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="82访问"><a class="markdownIt-Anchor" href="#82访问"></a> 8.2访问</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//定义结构体数组</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> p<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//和结构体类似，first代表第一个元素，second代表第二个元素</span>cout <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-string"><a class="markdownIt-Anchor" href="#9-string"></a> 9 string</h2><h3 id="91介绍"><a class="markdownIt-Anchor" href="#91介绍"></a> 9.1介绍</h3><p>string是一个字符串类,和<code>char</code>型字符串类似<br />可以把string理解为一个字符串类型,像int一样可以定义</p><h3 id="92定义及初始化"><a class="markdownIt-Anchor" href="#92定义及初始化"></a> 9.2定义及初始化</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//头文件</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string></span></span><span class="token comment">//1.</span>string str1<span class="token punctuation">;</span> <span class="token comment">//生成空字符串</span><span class="token comment">//2.</span>string <span class="token function">str2</span><span class="token punctuation">(</span><span class="token string">"123456789"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//生成"1234456789"的复制品 </span><span class="token comment">//3.</span>string <span class="token function">str3</span><span class="token punctuation">(</span><span class="token string">"12345"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结果为"123" ，从0位置开始，长度为3</span><span class="token comment">//4.</span>string <span class="token function">str4</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//结果为"12345" ，长度为5</span><span class="token comment">//5.</span>string <span class="token function">str5</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token char">'2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//结果为"22222" ,构造5个字符'2'连接而成的字符串</span><span class="token comment">//6.</span>string <span class="token function">str6</span><span class="token punctuation">(</span>str2<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//结果为"3456789"，截取第三个元素（2对应第三位）到最后</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>简单使用</strong></p><ul><li>访问单个字符:</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>string s <span class="token operator">=</span> <span class="token string">"king mc ws!!!"</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>string</code>数组使用:</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>string s<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"loading...  "</span> <span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">loading<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token number">1</span>loading<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token number">2</span>loading<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token number">3</span>loading<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token number">4</span>loading<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token number">5</span>loading<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token number">6</span>loading<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token number">7</span>loading<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token number">8</span>loading<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token number">9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="93string特性"><a class="markdownIt-Anchor" href="#93string特性"></a> 9.3string特性</h3><ul><li>支持<strong>比较</strong>运算符<br />string字符串支持常见的比较操作符<code>&gt;,&gt;=,&lt;,&lt;=,==,!=</code>，支持<code>string</code>与<code>C-string</code>的比较（如 <code>str</code> &lt; <code>&quot;hello&quot;</code>）。<br />在使用<code>&gt;,&gt;=,&lt;,&lt;=</code>这些操作符的时候是根据“当前字符特性”将字符按<code>字典顺序</code>进行逐一得 比较。字典排序靠前的字符小， 比较的顺序是从前向后比较，遇到不相等的字符就按这个位置上的两个字符的比较结果确定两个字符串的大小（前面减后面）。</li></ul><p>同时，<code>string (&quot;aaaa&quot;) &lt;string(&quot;aaaaa&quot;)</code>。</p><ul><li>支持<code>+</code><strong>运算符</strong>,代表拼接字符串<br />string字符串可以拼接,通过&quot;+&quot;运算符进行拼接</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">string s1 <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span>string s2 <span class="token operator">=</span> <span class="token string">"456"</span><span class="token punctuation">;</span>string s <span class="token operator">=</span> s1 <span class="token operator">+</span> s2<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">;</span>   <span class="token comment">//123456</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="94读入详解"><a class="markdownIt-Anchor" href="#94读入详解"></a> 9.4读入详解</h3><p><strong>读入字符串,遇空格,回车结束</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">string s<span class="token punctuation">;</span>cin <span class="token operator">>></span> s<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>读入一行字符串(包含空格),遇回车结束</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">string s<span class="token punctuation">;</span><span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注意:<code>getline(cin,s)</code>会获取前一个输入的换行符,需要在前面添加读取换行符的语句.如:<code>getchar()</code>或<code>cin.get()</code><br /><strong>错误读取:</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> n<span class="token punctuation">;</span>string s<span class="token punctuation">;</span>cin <span class="token operator">>></span> n<span class="token punctuation">;</span><span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//此时读取相当于读取了前一个回车字符</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>正确读取</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> n<span class="token punctuation">;</span>string s<span class="token punctuation">;</span>cin <span class="token operator">>></span> n<span class="token punctuation">;</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//cin.get()</span><span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//可正确读入下一行的输入</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>cin</code>与<code>getline()</code>混用<br />cin输入完后,回车,cin遇到回车符结束输入,但回车还在输入流中,cin并不会清除,导致<code>getline()</code>读取回车,结束读入.<br />需要在cin后面加上<code>cin.ignore()</code>;主动删除输入流中的换行符(不常用)</p></blockquote><p><strong>cin和cout解锁</strong><br />代码(写在main函数开头):</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>为什么要进行<code>cin</code>和<code>cout</code>的解锁，原因是：<br />在一些题目中，读入的<strong>数据量很大</strong>，往往超过了1e5（10<sup>5</sup>）的数据量,而<code>cin</code>和<code>cout</code>的读入输出的速度很慢（是因为<code>cin</code>和<code>cout</code>为了兼容C语言的读入输出在性能上做了妥协），远不如<code>scanf</code>和<code>printf</code>的速度，具体原因可以搜索相关的博客进行了解。<br />所以对<code>cin</code>和<code>cout</code>进行解锁使<code>cin</code>和<code>cout</code>的速度几乎接近<code>scanf</code>和<code>printf</code>，避免输入输出超时。</p></blockquote><p><strong>注意:</strong>  <code>cin</code>,<code>cout</code>解锁使用时，不能与 <code>scanf</code>,<code>getchar</code>, <code>printf</code>,<code>cin.getline()</code>混用，一定要注意，会出错。</p><blockquote><p><strong>string与C语言字符串（C-string）的区别:</strong></p><ul><li>string<br />是C++的一个类,专门实现字符串的相关操作,具有丰富的操作方法,数据类型为<code>string</code>,字符串的结尾是由类内部管理的，并且不需要显示地添加空字符 <code>\0</code>。</li><li>C-string<br />C语言中的字符串，用char数组实现，类型为const char *,需要程序员手动确保字符串结尾以<code>\0</code>结束</li></ul></blockquote><p>一般来说string向char数组转换会出现一些问题，所以为了能够实现转换，string有一个方法<code>c_str()</code>实现string向char数组的转换。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">string s <span class="token operator">=</span> <span class="token string">"king ws qs"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> s2 <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取指向 C 字符串的指针(不可s2进行修改)</span><span class="token keyword">char</span><span class="token operator">*</span> s2 <span class="token operator">=</span> <span class="token generic-function"><span class="token function">const_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取指向字符串的可修改的字符数组</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>**注意:**这两种方法都是将字符串s的地址赋值给s2,若使用方法二对s2进行修改,对原本的字符串s和其它引用该地址的变量也会造成影响.</p><h3 id="95函数方法"><a class="markdownIt-Anchor" href="#95函数方法"></a> 9.5函数方法</h3><ul><li>获取字符串长度</li></ul><table><thead><tr><th>代码</th><th>含义</th></tr></thead><tbody><tr><td><code>s.size()</code>和<code>s.length()</code></td><td>返回string对象的字符个数,他们执行效果相同</td></tr><tr><td><code>s.max_size()</code></td><td>返回string对象最多包含的字符数，超出会抛出length_error异常</td></tr><tr><td><code>s.capacity()</code></td><td>重新分配内存之前，string对象能包含的最大字符数</td></tr></tbody></table><ul><li>插入</li></ul><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习总结 </tag>
            
            <tag> STL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牛客周赛 Round 34</title>
      <link href="/2024/02/26/niu-ke-zhou-sai-round34/"/>
      <url>/2024/02/26/niu-ke-zhou-sai-round34/</url>
      
        <content type="html"><![CDATA[<h2 id="牛客周赛-round-34"><a class="markdownIt-Anchor" href="#牛客周赛-round-34"></a> 牛客周赛 Round 34</h2><h3 id="a小红的字符串生成"><a class="markdownIt-Anchor" href="#a小红的字符串生成"></a> A小红的字符串生成</h3><blockquote><p>题目描述：<br />小红拿到了两个字符，请你输出这两个字符可以生成的所有字符串。按任意顺序输出均可。<br />输入描述:<br />两个小写字母，用空格隔开。<br />输出描述:<br />第一行输出一个正整数n，代表可以生成的不同字符串数量。<br />接下来的n行，每行输出一个仅由小写字母组成的字符串。</p></blockquote><p>签到题，只需要注意当两个字符相同时只有两种情况即可。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">maxn</span> <span class="token expression"><span class="token number">2000005</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>cin <span class="token operator">>></span> a <span class="token operator">>></span> b<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">!=</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token number">4</span> <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token number">2</span> <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="b小红的非排列构造"><a class="markdownIt-Anchor" href="#b小红的非排列构造"></a> B小红的非排列构造</h3><blockquote><p>题目描述:<br />小红拿到了一个数组,她修改尽可能少的元素使其变成非排列。你能帮帮她吗?<br />定义排列为一个长度为n的数组,其中1到n每个元素恰好出现一次。<br />输入描述:<br />第一行输入一个正整数n,代表数组的大小。<br />第二行输入n个正整数a<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow></mrow><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46166399999999996em;vertical-align:-0.15em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>,用空格隔开。代表数组的元素。<br />1≤n≤10<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mrow></mrow><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span><br />1≤a<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow></mrow><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46166399999999996em;vertical-align:-0.15em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>≤10<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mrow></mrow><mn>9</mn></msup></mrow><annotation encoding="application/x-tex">^9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span></span></span></span><br />输出描述:<br />首先输出一个整数m,代表操作次数。<br />接下来的m行,每行输出两个正整数i,x,用空格隔开,代表将第i个元素修改为x。<br />有多种合法方案时,输出任意一种均可。<br />请注意,输入的i,x必须满足1≤i≤n且1≤x≤10<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mrow></mrow><mn>9</mn></msup></mrow><annotation encoding="application/x-tex">^9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span></span></span></span></p></blockquote><p>脑筋急转弯<br />如果合法，就是0，如果不合法，就把第1项改为n+1（排列外的数）</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">maxn</span> <span class="token expression"><span class="token number">2000005</span></span></span>ll a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> v<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ll n<span class="token punctuation">;</span><span class="token keyword">bool</span> f <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>cin <span class="token operator">>></span> n<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cin <span class="token operator">>></span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>v<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>v<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>f <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>b <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token operator">||</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token char">' '</span> <span class="token operator">&lt;&lt;</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="c小红的数字拆解"><a class="markdownIt-Anchor" href="#c小红的数字拆解"></a> C小红的数字拆解</h3><blockquote><p>越目描述:<br />小红拿到了一个偶数,她希望你将其切割成尽可能多的偶数。你能帮帮她吗?<br />输入描述:<br />一个偶数x。<br />1≤x&lt;<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mrow><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow></msup></mrow><annotation encoding="application/x-tex">10^{10^5}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9869199999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9869199999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight"><span class="mord mtight">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913142857142857em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><br />输出描述:<br />输出若干行,从小到大输出每个偶数。(1个偶数可以重复出现)</p></blockquote><p>贪心思想，从高位到低位贪心即可。<br />注意：测试数据的范围超过了__int128,所以要用字符串或者高精度表示。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">maxn</span> <span class="token expression"><span class="token number">2000005</span></span></span>string sh<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> s<span class="token punctuation">,</span> <span class="token keyword">const</span> string<span class="token operator">&amp;</span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> c<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> c<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> s <span class="token operator">&lt;</span> c<span class="token punctuation">;</span> <span class="token comment">// 长度相等时，按照字符串字典序排序</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>string ch<span class="token punctuation">;</span>cin <span class="token operator">>></span> ch<span class="token punctuation">;</span>ll l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>r <span class="token operator">&lt;</span> ch<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ch<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>sh<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> ch<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> r <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 复制字符串</span>k<span class="token operator">++</span><span class="token punctuation">;</span>l <span class="token operator">=</span> r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>r<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">sort</span><span class="token punctuation">(</span>sh<span class="token punctuation">,</span> sh <span class="token operator">+</span> k<span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> sh<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="d小红的陡峭值"><a class="markdownIt-Anchor" href="#d小红的陡峭值"></a> D小红的陡峭值</h3><blockquote><p>题目描述:<br />小红定义一个数组的陡峭值为相邻两数差的绝对值之和。<br />现在小红拿到了一个长度为n的、仅由正整数组成的数组,但她有一些元素看不清了,只记得数组的陡峭值恰好等于1。<br />小红希望你能还原整个数组,你能帮帮她吗?<br />输入描述:<br />第一行输入一个正整数n,代表数组的大小。<br />第二行输入n个整数a<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow></mrow><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46166399999999996em;vertical-align:-0.15em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>,其中如果a;为0 代表小红看不清该元素,大于 0 代表能看清该元素。<br />2≤n≤10<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mrow></mrow><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span><br />0≤a<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow></mrow><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46166399999999996em;vertical-align:-0.15em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>≤10<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mrow></mrow><mn>9</mn></msup></mrow><annotation encoding="application/x-tex">^9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span></span></span></span><br />输出描述:<br />如果无解,请输出 -1。<br />否则输出n个正整数,用空格隔开,代表小红还原的数组。<br />有多解时输出任意即可。</p></blockquote><p>模拟：因为陡峭值要恰好为1，所以只能有一个分界线。<br />情况1：当a<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow></mrow><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.45110799999999995em;vertical-align:-0.15em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>和a<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow></mrow><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.301392em;vertical-align:-0.15em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>均不等于0时，那只有当<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mi>b</mi><mi>s</mi><mo stretchy="false">(</mo><mi>a</mi><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo>−</mo><mi>a</mi><mo stretchy="false">[</mo><mi>n</mi><mo stretchy="false">]</mo><mo stretchy="false">)</mo><mo>=</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">abs(a[1]-a[n])==1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">a</span><span class="mord mathnormal">b</span><span class="mord mathnormal">s</span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">a</span><span class="mopen">[</span><span class="mord mathnormal">n</span><span class="mclose">]</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>,才有可能满足题目条件，否则直接输出-1；<br />如果满足前面情况，我们可以设ma和mi表示数组a中不等于0时的最大值和最小值。<br />当<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mi>a</mi><mo>−</mo><mi>m</mi><mi>i</mi><mo>=</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">ma-mi==1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>时，判断时mi在ma左边，还是ma在mi左边，并打印出相应的正确答案。如果ma的位置和mi的位置是交错的，那直接输出-1。<br />当ma==mi时，当a[1]==0,那么让a[1]=ma+1,其余的均为ma，否则a[n]=ma+1,其余的均为ma，<br />还有一种全是0的情况，那么mi就还是等于初始值，这种情况直接输出 2 1 1 1 …<br />其他情况直接输出-1。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">maxn</span> <span class="token expression"><span class="token number">2000005</span></span></span>ll a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ll n<span class="token punctuation">;</span>cin <span class="token operator">>></span> n<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> cin <span class="token operator">>></span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>a<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>ll ma<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>mi<span class="token operator">=</span><span class="token number">2e9</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>ma<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ma<span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mi<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>mi<span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>ma<span class="token operator">-</span>mi<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vector<span class="token operator">&lt;</span>ll<span class="token operator">></span>v1<span class="token punctuation">,</span>v2<span class="token punctuation">;</span><span class="token comment">//v1->ma,v2->mi;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>ma<span class="token punctuation">)</span> v1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>mi<span class="token punctuation">)</span> v2<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>v2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>v1<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> ma <span class="token operator">&lt;&lt;</span> <span class="token char">' '</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span>v1<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> mi <span class="token operator">&lt;&lt;</span> <span class="token char">' '</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>v2<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>v1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>v2<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> mi <span class="token operator">&lt;&lt;</span> <span class="token char">' '</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span>v2<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> ma <span class="token operator">&lt;&lt;</span> <span class="token char">' '</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ma<span class="token operator">==</span>mi<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> ma<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token char">' '</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> cout<span class="token operator">&lt;&lt;</span> ma <span class="token operator">&lt;&lt;</span> <span class="token char">' '</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> ma <span class="token operator">&lt;&lt;</span> <span class="token char">' '</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> ma<span class="token operator">+</span><span class="token number">1</span> <span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>mi<span class="token operator">==</span><span class="token number">2e9</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token number">2</span> <span class="token operator">&lt;&lt;</span> <span class="token char">' '</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span> <span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token char">' '</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="e小红的树形-dp"><a class="markdownIt-Anchor" href="#e小红的树形-dp"></a> E小红的树形 dp</h3><blockquote><p>题目描述：<br />小红拿到了一棵树,每个节点上有一个字符,每个节点上的字符为’d’、‘p’、‘?‘这三种。<br />现在请你将所有’?‘字符变成’d’或者’p’字符,需要满足任意两个相邻节点的字符不同。你能帮帮她吗?<br />输入描述:<br />第一行输入一个正整数n,代表节点的数量。<br />第二行输入一个长度为n的、仅包含’?’、'd’和’p’的字符串。第i个字符代表i号节点的初始字符。<br />接下来的n-1行,每行输入两个正整数u,v,代表节点u和节点v有一条边连接。<br />1≤n≤10<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mrow></mrow><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span><br />输出描述:<br />如果无解,请输出 -1。<br />否则输出一个由‘d’和’p’组成的字符串,第i个字符代表最终i号节点上的字符。</p></blockquote><p>图论的基础知识，遍历字符串，找到第一个不是’?‘的作为树的根进行dfs遍历。如果都是’?',那么把第一个字符变成’d’或’p’作为树的根进行遍历。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">maxn</span> <span class="token expression"><span class="token number">2000005</span></span></span>ll a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>ll<span class="token operator">></span>e<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>string ch<span class="token punctuation">;</span><span class="token keyword">bool</span> f<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>ll u<span class="token punctuation">,</span>ll fa<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>f<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> ed<span class="token operator">:</span>e<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>ed<span class="token operator">==</span>fa<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token punctuation">[</span>ed<span class="token punctuation">]</span><span class="token operator">==</span>ch<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>f<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token punctuation">[</span>ed<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'?'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'d'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ch<span class="token punctuation">[</span>ed<span class="token punctuation">]</span><span class="token operator">=</span><span class="token char">'p'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>ch<span class="token punctuation">[</span>ed<span class="token punctuation">]</span><span class="token operator">=</span><span class="token char">'d'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">dfs</span><span class="token punctuation">(</span>ed<span class="token punctuation">,</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ll n<span class="token punctuation">,</span>st<span class="token operator">=</span><span class="token number">1e9</span><span class="token punctuation">;</span>cin <span class="token operator">>></span> n<span class="token punctuation">;</span>cin <span class="token operator">>></span> ch<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ll u<span class="token punctuation">,</span>v<span class="token punctuation">;</span>cin <span class="token operator">>></span> u <span class="token operator">>></span> v<span class="token punctuation">;</span>e<span class="token punctuation">[</span>u<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>v<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>e<span class="token punctuation">[</span>v<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>u<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>ch<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token char">'?'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>st<span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>st<span class="token operator">==</span><span class="token number">1e9</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ch<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token char">'p'</span><span class="token punctuation">;</span><span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">dfs</span><span class="token punctuation">(</span>st<span class="token punctuation">,</span>st<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> ch<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="f小红的矩阵构造"><a class="markdownIt-Anchor" href="#f小红的矩阵构造"></a> F小红的矩阵构造</h3><blockquote><p>题目描述:<br />小红希望你构造一个n行m列的矩阵,满足所有元素之和恰好等于x,且每行、每列的异或和全部相等。你能<br />帮帮她吗?<br />输入描述:<br />三个正整数n,m,xc,用空格隔开。<br />4≤n,m≤ 1000<br />2≤x≤10<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mrow></mrow><mn>9</mn></msup></mrow><annotation encoding="application/x-tex">^9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span></span></span></span><br />保证x是偶数。<br />输出描述:<br />如果无解,请输出 -1。<br />否则输出n行,每行输出m个非负整数,代表一个合法解。有多解时输出任意即可。</p></blockquote><p>模拟，找出一种解决方案。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1e3</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>x<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token operator">>></span>n<span class="token operator">>></span>m<span class="token operator">>></span>x<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">%</span><span class="token number">4</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">></span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span><span class="token punctuation">&#123;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token char">'\n'</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            cout<span class="token operator">&lt;&lt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token char">'\n'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="g小红的元素交换"><a class="markdownIt-Anchor" href="#g小红的元素交换"></a> G小红的元素交换</h3><blockquote><p>题目描述:<br />小红拿到了一个排列,其中初始所有元素都是白色,但有一些元素被染成了红色。<br />小红每次操作可以选择交换任意一个红色元素和一个白色元素的位置。她希望操作尽可能少的次数使得数组<br />变成升序,你能帮帮她吗?<br />排列是指:一个长度为n的数组,其中1到n每个元素恰好出现了一次。<br />输入描述:<br />第一行输入一个正整数n,代表排列的长度。<br />第二行输入n个正整数a<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow></mrow><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46166399999999996em;vertical-align:-0.15em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>,代表排列的元素。<br />第三行输入一个长度为n的字符串,代表数组元素的染色情况。第i个字符为‘R’代表第i个元素被染成红<br />色,为’W’代表初始的白色。<br />1≤n≤10<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mrow></mrow><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span><br />1≤a<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow></mrow><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46166399999999996em;vertical-align:-0.15em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>≤n<br />输出描述:<br />如果无法完成排序,请输出 -1。<br />否则输出一个整数,代表操作的最小次数。</p></blockquote><p>思路: 置换环 + 找规律<br />假如这题没有交换颜色的限制，那这题就是裸的置换环<br />但是实际上，这题的核心框架依旧是<br />置换环。<br />具体情况需要分类讨论<br />同一置换环(a个元素)中存在两种颜色, 则交换的次数一定为a-1<br />同一置换环(a个元素)中只存在1种颜色, 则需要借助外部的非同色形成一个混环，交换次数为1。</p><p>白环+红环=混环。<br />白环+混环=混环。<br />红环+混环=混环。<br />长度大于1的白/红环才需要变成混环。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">1010</span><span class="token punctuation">;</span><span class="token keyword">int</span> n <span class="token punctuation">,</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> cin <span class="token operator">>></span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    string s<span class="token punctuation">;</span>    cin <span class="token operator">>></span> s<span class="token punctuation">;</span>    s <span class="token operator">=</span> <span class="token char">' '</span> <span class="token operator">+</span> s<span class="token punctuation">;</span>        <span class="token keyword">int</span> vis<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> r <span class="token punctuation">,</span> w <span class="token punctuation">,</span> h<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> st<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">!</span>vis<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token punctuation">;</span> j <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                st<span class="token punctuation">[</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'A'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                vis<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                cnt <span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>st<span class="token punctuation">[</span><span class="token char">'W'</span> <span class="token operator">-</span> <span class="token char">'A'</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> st<span class="token punctuation">[</span><span class="token char">'R'</span> <span class="token operator">-</span> <span class="token char">'A'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                h<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">[</span><span class="token char">'W'</span> <span class="token operator">-</span> <span class="token char">'A'</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> st<span class="token punctuation">[</span><span class="token char">'R'</span> <span class="token operator">-</span> <span class="token char">'A'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                r<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">[</span><span class="token char">'R'</span> <span class="token operator">-</span> <span class="token char">'A'</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> st<span class="token punctuation">[</span><span class="token char">'W'</span> <span class="token operator">-</span> <span class="token char">'A'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                w<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> r<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>w<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> w<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 把长度大于1的白环和红环结合为混环</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> w<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> w<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> v1 <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> v2 <span class="token operator">=</span> w<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                r<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        w<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        h<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>v1 <span class="token operator">+</span> v2<span class="token punctuation">)</span><span class="token punctuation">;</span>                res <span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//如果混环不存在，则要拿一个长度为1的白/红环与一个长度大于1的红/白环结合为一个混环</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>h<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> r<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> w<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">||</span> w<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> v1 <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> v2 <span class="token operator">=</span> w<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                r<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        w<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        h<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>v1 <span class="token operator">+</span> v2<span class="token punctuation">)</span><span class="token punctuation">;</span>                res <span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//混环不存在，却存在长度大于1的红/白环，则不满足</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> r<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>h<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>w<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> w<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>h<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//将剩余的白/红环与混环再结合</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> v1 <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> v2 <span class="token operator">=</span> h<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                r<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        h<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        h<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>v1 <span class="token operator">+</span> v2<span class="token punctuation">)</span><span class="token punctuation">;</span>                res <span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>w<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>w<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> v1 <span class="token operator">=</span> w<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> v2 <span class="token operator">=</span> h<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                w<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        h<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        h<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>v1 <span class="token operator">+</span> v2<span class="token punctuation">)</span><span class="token punctuation">;</span>                res <span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//统计，每一个混环调整都是它的长度i的i-1次；</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> i <span class="token operator">:</span> h<span class="token punctuation">)</span> res <span class="token operator">+=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> res<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 牛客 </tag>
            
            <tag> 练习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牛客小白月赛87</title>
      <link href="/2024/02/16/niu-ke-xiao-bai-yue-sai-87/"/>
      <url>/2024/02/16/niu-ke-xiao-bai-yue-sai-87/</url>
      
        <content type="html"><![CDATA[<h2 id="牛客小白月赛87"><a class="markdownIt-Anchor" href="#牛客小白月赛87"></a> 牛客小白月赛87</h2><h3 id="a小苯的石子游戏"><a class="markdownIt-Anchor" href="#a小苯的石子游戏"></a> A小苯的石子游戏</h3><blockquote><p>题目描述：<br />Alice和Bob又在玩石子游戏了。<br />具体的,现在有n堆石子,第i堆石子里面有ai个石子,且石子数量按升序排列。Alice和Bob轮流操<br />作,Alice先手操作,当前玩家从剩余的石子堆中任选一堆石子全部拿走,然后轮下一个玩家拿石子。直到<br />所有的石子都被拿完,游戏结束。<br />当游戏结束时,如果Alice拿到的石子总数严格大于Bob所拿到的石子总数,则Alice获胜,否则Bob<br />获胜。<br />假设 Alice和Bob都绝顶聪明,一定会以最优解拿石子,小苯想知道最终谁会成为最后的赢家,请你帮帮<br />他预测一下吧。<br />输入描述:<br />本题有多组测试数据。<br />第一行一个正整数 t(1≤t≤100),表示测试数据的组数。<br />每组测试数据的第一行包含一个正整数 n(1≤n≤100),表示有 n 堆石子。<br />每组测试数据的第二行包含 n 个正整数 a;(1≤a<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow></mrow><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46166399999999996em;vertical-align:-0.15em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>≤100),表示每堆石子的个数。保证石子数按升序排列,<br />即:对于所有的(1≤i≤n-1)都有(a<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow></mrow><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46166399999999996em;vertical-align:-0.15em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>≤a<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow></mrow><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46166399999999996em;vertical-align:-0.15em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow></mrow><mo>+</mo></msub></mrow><annotation encoding="application/x-tex">_+</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.466662em;vertical-align:-0.208331em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.25833100000000003em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">+</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow></mrow><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.45110799999999995em;vertical-align:-0.15em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>)。<br />输出描述:<br />输出包含 t 行,表示每个测试数据的答案。</p></blockquote><p>由于输入的是升序序列，而我们要最优解，那么Alice和Bob肯定是从最大数开始拿，我们可以倒序输入将其变成一个降序序列，方便后续操作。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span>cin<span class="token operator">>></span>n<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n<span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">110</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> A<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>B<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>cin<span class="token operator">>></span>n<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>n<span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cin<span class="token operator">>></span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>A<span class="token operator">+=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">else</span> B<span class="token operator">+=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>A<span class="token operator">></span>B<span class="token punctuation">)</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"Alice"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token keyword">else</span> cout<span class="token operator">&lt;&lt;</span><span class="token string">"Bob"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="b小苯的排序疑惑"><a class="markdownIt-Anchor" href="#b小苯的排序疑惑"></a> B小苯的排序疑惑</h3><blockquote><p>题目描述:<br />小苯有一个长度为n的数组a,他可以对a进行至多一次以下操作:<br />●选择一段区间[l,r],满足(1≤l≤r≤n),且区间长度严格小于n,将数组a的[l,r]这段区间按非<br />降序排序。<br />换句话说,操作执行完后,区间中的值将满足:a[l≤a[l+1]≤a[l+2]≤ …. ≤a[r]。<br />现在小苯想知道能否通过执行最多一次操作使得数组a按非降序排列。<br />输入描述:<br />本题有多组测试用例。<br />第一行一个正整数 t(1≤t≤10<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mrow></mrow><mn>4</mn></msup></mrow><annotation encoding="application/x-tex">^4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span></span></span></span>)表示测试用例的组数。<br />每组数据第一行一个正整数 n(1≤n≤2×10<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mrow></mrow><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span>),表示数组的长度。<br />每组数据第二行 n 个正整数 a<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow></mrow><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46166399999999996em;vertical-align:-0.15em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>(1≤a<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow></mrow><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46166399999999996em;vertical-align:-0.15em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>≤10<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mrow></mrow><mn>9</mn></msup></mrow><annotation encoding="application/x-tex">^9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span></span></span></span>),表示数组 a 的元素。<br />输入保证所有测试用例中的 n 总和不超过 2×10<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mrow></mrow><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span>。<br />输出描述:<br />输出包含t 行,表示每组用例的答案。<br />如果可以使 a 有序,输出&quot;YES&quot;,否则输出“NO”(输出不含双引号)。</p></blockquote><p>因为可以选择区间长度严格小于n的区域按非降序排列，所以我们就可以选择尽可能大，也就是长度为n-1的区间。<br />此时我们只需要保证（第一个是最小值/最后一个是最大值）即可。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">maxn</span> <span class="token expression"><span class="token number">200005</span></span></span>ll a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ll t<span class="token punctuation">,</span>n<span class="token punctuation">;</span>cin <span class="token operator">>></span> t<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cin <span class="token operator">>></span> n<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cin <span class="token operator">>></span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"YES\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>ll maxv<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>minv<span class="token operator">=</span><span class="token number">1e10</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cin <span class="token operator">>></span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>maxv<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>maxv<span class="token punctuation">)</span><span class="token punctuation">;</span>minv<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>minv<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>maxv<span class="token operator">==</span>a<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">||</span> minv<span class="token operator">==</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"YES\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"NO\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="c小苯的ide括号问题easy"><a class="markdownIt-Anchor" href="#c小苯的ide括号问题easy"></a> C小苯的IDE括号问题（easy）</h3><blockquote><p>题目描述:<br />注:此版本为本问题的easy(简单版),与hard(困难版)不同的是,easy只有两种删除操作。</p><p>众所周知,通常的代码编辑器(如当前页面右侧的牛客在线编辑器)都比较智能。<br />如果您输入一串括号串,例如:(I)其中的I代表鼠标光标。<br />此时如果按下键盘中的backspace键,整个括号都会被删掉,也就是说括号串会变成I,只包含鼠标光标。<br />但是如果按下键盘中的delete键,那么则只会删除括号的右侧部分,也就是说括号串会变为(I。<br />但如果鼠标光标不处于一个匹配的括号串中间,例如:()1<br />此时按下backspace键,括号会变为(I。<br />此时按下delete键,由于光标右侧没有括号,因此括号不会发生变化。<br />类似的,如果括号串为:I()。<br />此时按下backspace键,由于鼠标光标左侧没有括号,因此括号不会发生变化。<br />此时按下delete键,括号会变为:I)。<br />问题:现在小苯给了你一个长度为n的括号串,并且保证其中恰好出现了一个I字符表示鼠标光标。他想知道,在k次<br />指定的删除操作后,括号串最终会是什么样子,请你帮帮他吧。<br />输入描述:<br />输入包含若干行。<br />第一行两个数字 n,k(1≤k≤n≤2×10<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mrow></mrow><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span>),分别表示括号串的长度和操作次数。<br />第二行输入一行字符串表示题目所述的括号串,保证字符串仅含有:“(,),I”(大写的字母i)三种字符之一,且<br />I 字符出现且仅出现一次。<br />接下来 k 行,每行输入一个字符串代表删除操作,保证字符串一定是:delete 或 backspace。<br />输出描述:<br />输出包含一行一个字符串,表示括号串最终的样子。</p></blockquote><p>这是一道简单的模拟题，只需要简单模拟即可。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">maxn</span> <span class="token expression"><span class="token number">200005</span></span></span><span class="token keyword">char</span> ch<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ll n<span class="token punctuation">,</span>k<span class="token punctuation">;</span>ll sl<span class="token punctuation">,</span>sr<span class="token punctuation">;</span>cin <span class="token operator">>></span> n <span class="token operator">>></span> k<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cin <span class="token operator">>></span> ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'I'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>sl<span class="token operator">=</span>i<span class="token punctuation">;</span>sr<span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>string sh<span class="token punctuation">;</span>cin <span class="token operator">>></span> sh<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>sh<span class="token operator">==</span><span class="token string">"backspace"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>sl<span class="token operator">-</span><span class="token number">1</span><span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>sr<span class="token operator">+</span><span class="token number">1</span><span class="token operator">>=</span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ch<span class="token punctuation">[</span>sl<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token char">'.'</span><span class="token punctuation">;</span>sl<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token punctuation">[</span>sl<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'('</span> <span class="token operator">&amp;&amp;</span> ch<span class="token punctuation">[</span>sr<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">')'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ch<span class="token punctuation">[</span>sl<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token char">'.'</span><span class="token punctuation">;</span>ch<span class="token punctuation">[</span>sr<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token char">'.'</span><span class="token punctuation">;</span>sl<span class="token operator">--</span><span class="token punctuation">;</span>sr<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>ch<span class="token punctuation">[</span>sl<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token char">'.'</span><span class="token punctuation">;</span>sl<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>sr<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ch<span class="token punctuation">[</span>sr<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token char">'.'</span><span class="token punctuation">;</span>sr<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token char">'.'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="d小苯的ide括号问题hard"><a class="markdownIt-Anchor" href="#d小苯的ide括号问题hard"></a> D小苯的IDE括号问题（hard）</h3><blockquote><p>题目描述:<br />注:此版本为本问题的hard(困难版),与easy(简单版)不同的是,hard有四种操作。</p><p>众所周知,通常的代码编辑器(如当前页面右侧的牛客在线编辑器)都比较智能。<br />如果您输入一串括号串,例如:(I)其中的I代表鼠标光标。<br />此时如果按下键盘中的backspace键,整个括号都会被删掉,也就是说括号串会变成I,只包含鼠标光标。<br />但是如果按下键盘中的delete键,那么则只会删除括号的右侧部分,也就是说括号串会变为(I。<br />但如果鼠标光标不处于一个匹配的括号串中间,例如:()I<br />此时按下backspace键,括号会变为(I。<br />此时按下delete键,由于光标右侧没有括号,因此括号不会发生变化。<br />类似的,如果括号串为:I()。<br />此时按下backspace键,由于鼠标光标左侧没有括号,因此括号不会发生变化。<br />此时按下delete键,括号会变为:I)。<br />除此之外,小苯还会按下键盘中的←和→键以移动光标。<br />例如括号串为(()(I),此时小苯按下左移键←一次,光标就会左移一次进而使得括号变为:(()I()。同理右移也是类似的。<br />但特别的,如果光标已经在括号串最左侧,此时按下左移键,括号串不会发生变化;同理如果光标位于括号串最右侧时按下右移键,括号串依然不会发生变化。<br />问题:现在小苯给了你一个长度为n的括号串,并且保证其中恰好出现了一个I字符表示鼠标光标。他想知道,在k次指定的操作后,括号串最终会是什么样子,请你帮帮他吧。<br />输入描述:<br />输入包含若干行。<br />第一行两个数字 n,k(1≤k≤n≤2×10<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mrow></mrow><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span>),分别表示括号串的长度和操作次数。<br />第二行输入一行字符串表示题目所述的括号串,保证字符串仅含有:“(,),I&quot;(大写的字母i)三种字符之一,且I 字符出现且<br />仅出现一次。<br />接下来k 行,每行输入一个字符串代表删除操作,保证字符串一定是:delete,backspace, &lt;- 和-&gt;中的一种。<br />输出描述:<br />输出包含一行一个字符串,表示括号串最终的样子。</p></blockquote><p>用c++中的string来模拟解决，要注意的是 “ch.erase(s+1,1);ch.erase(s-1,1);”，位置不能颠倒，如果颠倒的话先ch.erase(s-1,1);光标位置就会变成s-1，此时后面就要变成ch.erase(s,1);</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">maxn</span> <span class="token expression"><span class="token number">200005</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ll n<span class="token punctuation">,</span>k<span class="token punctuation">;</span>string ch<span class="token punctuation">;</span>cin <span class="token operator">>></span> n <span class="token operator">>></span> k<span class="token punctuation">;</span>cin <span class="token operator">>></span> ch<span class="token punctuation">;</span><span class="token keyword">int</span> s<span class="token operator">=</span>ch<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token char">'I'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>string sh<span class="token punctuation">;</span>cin <span class="token operator">>></span> sh<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>sh<span class="token operator">==</span><span class="token string">"backspace"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token operator">-</span><span class="token number">1</span><span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span>n <span class="token operator">&amp;&amp;</span> ch<span class="token punctuation">[</span>s<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'('</span> <span class="token operator">&amp;&amp;</span> ch<span class="token punctuation">[</span>s<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">')'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    ch<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>s<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ch<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>s<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token operator">--</span><span class="token punctuation">;</span>n<span class="token operator">-=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>ch<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>s<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token operator">--</span><span class="token punctuation">;</span>n<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>sh<span class="token operator">==</span><span class="token string">"delete"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ch<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>s<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>n<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>sh<span class="token operator">==</span><span class="token string">"->"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">swap</span><span class="token punctuation">(</span>ch<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">,</span> ch<span class="token punctuation">[</span>s<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token operator">-</span><span class="token number">1</span><span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">swap</span><span class="token punctuation">(</span>ch<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">,</span> ch<span class="token punctuation">[</span>s<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> ch<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="e小苯的数组构造"><a class="markdownIt-Anchor" href="#e小苯的数组构造"></a> E小苯的数组构造</h3><blockquote><p>题目描述：<br />大白熊给了小苯一个长度为n的数组a,他希望小苯将数组a变成有序(非递减)的。具体的,小苯需要进行如下操作:<br />1.任选一个数组b,长度也为n,且元素满足 :- 10<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mrow></mrow><mn>1</mn></msup></mrow><annotation encoding="application/x-tex">^1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mrow></mrow><mn>0</mn></msup></mrow><annotation encoding="application/x-tex">^0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span>≤b;≤10<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mrow></mrow><mn>1</mn></msup></mrow><annotation encoding="application/x-tex">^1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mrow></mrow><mn>0</mn></msup></mrow><annotation encoding="application/x-tex">^0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span>。<br />2.对于所有1≤i≤n,都执行a<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow></mrow><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46166399999999996em;vertical-align:-0.15em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>=a<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow></mrow><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46166399999999996em;vertical-align:-0.15em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>+b<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow></mrow><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46166399999999996em;vertical-align:-0.15em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。<br />大白熊希望在执行完操作后a数组满足有序,同时要最小化数组b的极差,即使得:max(b<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow></mrow><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.45110799999999995em;vertical-align:-0.15em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>,b<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow></mrow><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.45110799999999995em;vertical-align:-0.15em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, …… ,b<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow></mrow><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.301392em;vertical-align:-0.15em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>)-min(b<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow></mrow><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.45110799999999995em;vertical-align:-0.15em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>,b<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow></mrow><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.45110799999999995em;vertical-align:-0.15em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, …… ,b<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow></mrow><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.301392em;vertical-align:-0.15em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>)最小。<br />请你帮小苯找出一个合法的b数组吧。<br />注:如有多解输出任意即可。<br />输入描述:<br />输入包含两行。<br />第一行一个正整数 n(1≤n≤2×10<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mrow></mrow><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span>),表示 a 的长度。<br />第二行 n 个整数 a;(-10<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mrow></mrow><mn>9</mn></msup></mrow><annotation encoding="application/x-tex">^9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span></span></span></span>≤ai≤10<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mrow></mrow><mn>9</mn></msup></mrow><annotation encoding="application/x-tex">^9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span></span></span></span>),表示数组 a 的元素。<br />输出描述:<br />输出包含一行 n 个整数,表示构造出的b 数组(有多解输出任意即可)。<br />如果找不到合法的b 数组,请输出一个整数 -1。</p></blockquote><p>要得到一条非降数组并且要满足b的极差最小。只需要做到非降序数组尽量不升序即可。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">maxn</span> <span class="token expression"><span class="token number">200005</span></span></span>ll a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ll n<span class="token punctuation">;</span>cin <span class="token operator">>></span> n<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cin <span class="token operator">>></span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token char">' '</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="f小苯的数组切分"><a class="markdownIt-Anchor" href="#f小苯的数组切分"></a> F小苯的数组切分</h3><blockquote><p>题目描述:<br />qionghua 给了小苯一个长度为n的数组a,希望小苯将数组a分为恰好非空的三段。即:[1,l-1],[l,r],[r+1,n]这三段,其中1&lt;l≤r&lt;n。接着:<br />●第一段的所有数字做 (按位异或)运算。<br />● 第二段的所有数字做|(按位或)运算。<br />● 第三段的所有数字做 &amp;(按位与)运算。<br />将这三段数字运算的结果做加法求和,作为小苯的得分。<br />小苯想知道他如果以最优的方案切分数组,最多能获得多少得分,请你帮他算一算吧。<br />输入描述:<br />输入包含两行。<br />第一行一个正整数 n(3≤n≤2×10<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mrow></mrow><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span>),表示数组 a 的长度。<br />第二行 n 个正整数 a;(1≤ai≤10<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mrow></mrow><mn>9</mn></msup></mrow><annotation encoding="application/x-tex">^9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span></span></span></span>),表示数组 a 的元素。<br />输出描述:<br />输出包含一行一个正整数,表示小苯的最高得分。</p></blockquote><p>因为and运算[&amp;(按位与)]所得值一定小于原先两个值，属于越算越小的趋势，所以只需要保留最后一个给第三段即可。<br />对于xor 和 or，可以通过枚举进行判断应取什么边界。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> a<span class="token punctuation">[</span><span class="token number">200005</span><span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span><span class="token number">200005</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> n<span class="token punctuation">,</span>ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>cin <span class="token operator">>></span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^=</span> a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>i <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">|=</span> b<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>b<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> ans<span class="token operator">+</span>a<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="g小苯的逆序对"><a class="markdownIt-Anchor" href="#g小苯的逆序对"></a> G小苯的逆序对</h3><blockquote><p>题目描述:<br />小苯有一个长度为n的排列p。他很想知道这个排列中有多少个逆序对满足互素。<br />形式化的,有多少个满足(i&lt;j)且(a<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow></mrow><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46166399999999996em;vertical-align:-0.15em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>&gt;a<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow></mrow><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.597772em;vertical-align:-0.286108em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>)且gcd(a<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow></mrow><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46166399999999996em;vertical-align:-0.15em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>,a<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow></mrow><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.597772em;vertical-align:-0.286108em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>)=1的(i,j)对。<br />输入描述:<br />输入包含两行。<br />第一行一个正整数 n(1≤n≤2×10<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mrow></mrow><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span>)。表示排列的长度<br />第二行 n 个正整数p;(1≤p<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow></mrow><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46166399999999996em;vertical-align:-0.15em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>≤n)表示排列 p,保证 1 到 n 的每个正整数出现且恰好仅出现一次。<br />输出描述:<br />输出包含一行一个整数,表示排列 p 的互素逆序对个数。</p></blockquote><p>考点:莫比乌斯反演,容斥,树状数组,dp。<br />题意:给定长为n的排列,求有多少个排列值互素的逆序对。<br />我们可以定义dp<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow></mrow><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46166399999999996em;vertical-align:-0.15em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>;表示:“所有的gcd可以是i的倍数的数字们组成的数组”的逆序对数,假设我们已经<br />有了这个dp数组,那么我们如何将倍数的值转为其值本身,则只需要从大到小枚举i,并执行:<br />dp<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow></mrow><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46166399999999996em;vertical-align:-0.15em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>=dp<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow></mrow><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46166399999999996em;vertical-align:-0.15em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>-(dp<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow></mrow><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46166399999999996em;vertical-align:-0.15em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>*2dp<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow></mrow><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46166399999999996em;vertical-align:-0.15em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>*3 …),执行了这一步后,dp;就转为了:“所有的gcd可以等于i的数”组<br />成数组的逆序对个数。那么显然dp1就是我们要求的答案。<br />接下来考虑,我们如何获得一开始的dp数组呢,也就是:“所有的gcd可以是i的倍数的数字们组成的<br />数组”的逆序对数。我们只需枚举i,然后对所有是i的倍数的数字们组成的数组求逆序对即可,实现上我<br />们可以开一个二维vector,其中vector;存了所有排列值是i的倍数的排列值,按原排列的下标顺序<br />存。<br />举个例子:如果排列是:[2,3,6,5,4,1],则vector1=[2,3,6,5,4,1],vector2=[2,6,4]。<br />接着我们只需要对所有的vector;都求一遍逆序对,就得到了初始的dpi。而一个数组内求逆序对这一<br />过程我们可以使用树状数组做到n·logn的时间复杂度,其中n是数组长度。<br />得到初始的dp后再做上述的容斥,我们就解决了本问题。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">endl</span> <span class="token char">'\n'</span></span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">2e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>ll dp<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">+=</span>v<span class="token punctuation">;</span>        u<span class="token operator">-=</span>u<span class="token operator">&amp;</span><span class="token operator">-</span>u<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">ask</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>u<span class="token operator">&lt;=</span>n<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        res<span class="token operator">+=</span>c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>        u<span class="token operator">+=</span>u<span class="token operator">&amp;</span><span class="token operator">-</span>u<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> tem<span class="token punctuation">;</span>        cin <span class="token operator">>></span> tem<span class="token punctuation">;</span>        a<span class="token punctuation">[</span>tem<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>n<span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">--</span>i<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">+=</span>i<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+=</span><span class="token function">ask</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j <span class="token operator">+=</span> i<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">!=</span>i<span class="token punctuation">)</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-=</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span>dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 牛客 </tag>
            
            <tag> 练习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牛客练习</title>
      <link href="/2024/02/14/niu-ke-qing-ren-jie-lian-xi/"/>
      <url>/2024/02/14/niu-ke-qing-ren-jie-lian-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="牛客2024年情人节比赛"><a class="markdownIt-Anchor" href="#牛客2024年情人节比赛"></a> 牛客2024年情人节比赛</h2><h3 id="a-第二杯半价"><a class="markdownIt-Anchor" href="#a-第二杯半价"></a> A 第二杯半价</h3><blockquote><p>题目描述：<br />情人节又到了，奶茶店推出了第二杯半价的活动。<br />这意味着，第一杯原价，第二杯半价，第三杯原价，以此类推。<br />如果原价为x ，则半价为⌈x/2⌉。<br />在此佳节，奶茶店里来了 t 批客人。<br />每批客人会点 n 杯奶茶，每杯奶茶原价 x 元。<br />作为奶茶店店长，请统计每单的收款金额。<br />输入描述：<br />第一行有一个整数 t（1≤t≤10<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mrow></mrow><mn>4</mn></msup></mrow><annotation encoding="application/x-tex">^4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span></span></span></span>）。<br />随后 t 行，每行两个整数n (1≤n≤10<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mrow></mrow><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>)和x (1≤x≤10<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mrow></mrow><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>)。<br />输出描述：<br />输出 t 行，每行一个整数，代表收款金额。</p></blockquote><p>这道题明显和奇偶数有关系，当这杯奶茶是奇数杯时为原价，是偶数杯时为半价。<br />我们只需要算出1~n中是奇数杯的数量和偶数杯的数量即可。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ll t<span class="token punctuation">;</span>ll n<span class="token punctuation">,</span>v<span class="token punctuation">;</span>cin <span class="token operator">>></span> t<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cin <span class="token operator">>></span> n <span class="token operator">>></span> v<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>v<span class="token operator">+</span><span class="token punctuation">(</span>v<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>v<span class="token operator">+</span><span class="token punctuation">(</span>v<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span>v <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="b反方向的钟"><a class="markdownIt-Anchor" href="#b反方向的钟"></a> B反方向的钟</h3><blockquote><p>题目描述：<br />你正穿梭于 t 个平行时空，然后重新设定每个时空的时间。<br />非常不妙的是，你只知道24小时制下的时间，而钟却是12小时制 。<br />请确保你转换得到的时间是正确的。<br />输入描述：<br />第一行有一个整数t (1≤t≤1440),代表时空数量。<br />随后 t 行，每行两个整数 h(0≤h≤23 )和 m( 0≤m≤59 ) ，代表24小时制下的小时和分钟。<br />输出描述：<br />输出 t 行，每行两个整数和一个字符串 ( am/pm )，代表12小时制下的小时，分钟，以及上下午指示符。</p></blockquote><p>这道题只需要注意24小时制下的0时和12时分别代表12小时下的12am和12pm即可。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ll t<span class="token punctuation">;</span>ll h<span class="token punctuation">,</span>m<span class="token punctuation">;</span>cin <span class="token operator">>></span> t<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cin <span class="token operator">>></span> h <span class="token operator">>></span> m<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>h<span class="token operator">>=</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>h<span class="token operator">></span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>h<span class="token operator">-=</span><span class="token number">12</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> h <span class="token operator">&lt;&lt;</span> <span class="token char">' '</span> <span class="token operator">&lt;&lt;</span> m <span class="token operator">&lt;&lt;</span> <span class="token string">" pm\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>h<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token number">12</span> <span class="token operator">&lt;&lt;</span> <span class="token char">' '</span> <span class="token operator">&lt;&lt;</span> m <span class="token operator">&lt;&lt;</span> <span class="token string">" am\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> h <span class="token operator">&lt;&lt;</span> <span class="token char">' '</span> <span class="token operator">&lt;&lt;</span> m <span class="token operator">&lt;&lt;</span> <span class="token string">" am\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="c素数三元组"><a class="markdownIt-Anchor" href="#c素数三元组"></a> C素数三元组</h3><blockquote><p>题目描述：<br />给定 t 次查询，每次查询给出一个正整数 n 。<br />请你找出有多少个三元组(i,j,k)，满足 i+j=k。<br />其中 i,j,k 都是素数，并且 i&lt;j&lt;k≤n 。<br />输入描述：<br />第一行有一个整数t(1≤t≤10<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mrow></mrow><mn>6</mn></msup></mrow><annotation encoding="application/x-tex">^6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span></span></span></span></span></span></span></span>) 。<br />随后t行，每行一个整数 n ( 1≤n≤10<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mrow></mrow><mn>6</mn></msup></mrow><annotation encoding="application/x-tex">^6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span></span></span></span></span></span></span></span> ) 。<br />输出描述：<br />输出t行，每行一个整数，代表三元组的数量。</p></blockquote><p>首先我们需要用线性筛筛出1~10<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mrow></mrow><mn>6</mn></msup></mrow><annotation encoding="application/x-tex">^6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span></span></span></span></span></span></span></span>中的素数，用数组a[]来储存每个整数的三元组数量。<br />然后判断每个素数是否可以由另外两个素数相加得到。由于素数除了2以外都是奇数，而奇数+奇数=偶数，所以我们在判断的时候只需要判断（这个素数-2）是不是素数即可。如果是就在对应的a[这个素数]++；<br />最后用前缀和统计最终答案。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">maxn</span> <span class="token expression"><span class="token number">1000005</span></span></span><span class="token keyword">int</span> primes<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">char</span> is_prime<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> primeCount<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">findPrime</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>is_prime<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>is_prime<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>is_prime<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>primes<span class="token punctuation">[</span>primeCount<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>primeCount <span class="token operator">&amp;&amp;</span> i<span class="token operator">*</span>primes<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>is_prime<span class="token punctuation">[</span>i<span class="token operator">*</span>primes<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span>primes<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">findPrime</span><span class="token punctuation">(</span>maxn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>primeCount<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>is_prime<span class="token punctuation">[</span>primes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>a<span class="token punctuation">[</span>primes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>maxn<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+=</span>a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ll t<span class="token punctuation">;</span>ll n<span class="token punctuation">;</span>cin <span class="token operator">>></span> t<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cin <span class="token operator">>></span> n<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="d今日是"><a class="markdownIt-Anchor" href="#d今日是"></a> D今日是？</h3><blockquote><p>题目描述：<br />天外有天。<br />输入描述：<br />无。<br />输出描述：<br />输出四个汉字，表示本题的答案。<br />备注：<br />由于除夕赛被鸡哥卡了，于是我出了这道题。</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"二外有二"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="e时间银河"><a class="markdownIt-Anchor" href="#e时间银河"></a> E时间银河</h3><blockquote><p>题目描述：<br />给定t组询问，每次询问给出一个年份区间[a,b] 。<br />请计算年份区间（包括a和b）内一共有多少天。<br />输入描述：<br />第一行有一个整数 t (1≤t≤10<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mrow></mrow><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span>) 。<br />随后 t 行，每行两个整数 a,b (1≤a≤b≤10<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mrow></mrow><mn>9</mn></msup></mrow><annotation encoding="application/x-tex">^9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span></span></span></span>) ，代表起始的年份和终止的年份。<br />输出描述：<br />输出 t 行，每行一个整数，代表区间内的天数。</p></blockquote><p>先把区间里的每一年看作365天，再加上区间里的闰年数即可。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token keyword">int</span> year<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> year<span class="token operator">/</span><span class="token number">4</span><span class="token operator">-</span>year<span class="token operator">/</span><span class="token number">100</span><span class="token operator">+</span>year<span class="token operator">/</span><span class="token number">400</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> t<span class="token punctuation">;</span>cin<span class="token operator">>></span>t<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>b<span class="token operator">-</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">365</span><span class="token operator">+</span><span class="token function">run</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">run</span><span class="token punctuation">(</span>a<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="f白毛飞飞"><a class="markdownIt-Anchor" href="#f白毛飞飞"></a> F白毛飞飞</h3><blockquote><p>题目描述：<br />因为旅行者是个现充，所以派蒙在提瓦特大陆很无聊。<br />安柏于心不忍，给她安排了一场飞行训练。<br />派蒙需要飞越 n 个障碍点，第 i 个障碍点的高度为 a<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow></mrow><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46166399999999996em;vertical-align:-0.15em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。<br />她会从坐标零点出发，初始高度为 0 ，并且不会走回头路。<br />对于 i∈[1,n] ，只要当前高度大于等于 a<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow></mrow><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46166399999999996em;vertical-align:-0.15em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，派蒙就能越过第i 个障碍。<br />如果对于 i∈[0,n)，从位置 i 到 i+1 最多能上升一格，那么她能否越过所有障碍？<br />输入描述：<br />第一行有一个整数 n ( 1≤n≤10<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mrow></mrow><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span> ) 。<br />第二行有 n 个整数 a<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow></mrow><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46166399999999996em;vertical-align:-0.15em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>(1≤a<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow></mrow><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46166399999999996em;vertical-align:-0.15em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>≤10<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mrow></mrow><mn>9</mn></msup></mrow><annotation encoding="application/x-tex">^9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span></span></span></span>)。<br />输出描述：<br />如果派蒙能越过所有障碍，输出 YES 。<br />否则，输出NO 。<br />你可以输出任意形式的YES 和 NO 。<br />YES ,Yes ,yes ,yEs 都会被视为 YES 。</p></blockquote><p>只要每个障碍物的高度a<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow></mrow><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46166399999999996em;vertical-align:-0.15em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>≤i,那么就可以顺利通过，否则输出no。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> t<span class="token punctuation">;</span>ll a<span class="token punctuation">;</span>cin <span class="token operator">>></span> t<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>t<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cin <span class="token operator">>></span> a<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">></span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"no"</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"yes"</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 牛客 </tag>
            
            <tag> 练习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/02/10/hello-world/"/>
      <url>/2024/02/10/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ cdhsshdfhdj<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><div class='spoiler collapsed'>    <div class='spoiler-title'>        点击显/隐内容    </div>    <div class='spoiler-content'>        <p>内容测试</p>    </div></div><div class='spoiler collapsed'>    <div class='spoiler-title'>        点击显/隐内容    </div>    <div class='spoiler-content'>        <p>内容测试</p>    </div></div><blockquote><p><mark>是可见的是肯定的</mark></p></blockquote><h2 id="如何改变文本的样式"><a class="markdownIt-Anchor" href="#如何改变文本的样式"></a> 如何改变文本的样式</h2><p><em>强调文本</em> <em>强调文本</em></p><p><strong>加粗文本</strong> <strong>加粗文本</strong></p><p><mark>标记文本</mark></p><p><s>删除文本</s></p><p><del><span style="color:orange;">O(n<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msqrt><mi>n</mi></msqrt></mrow><annotation encoding="application/x-tex">\sqrt{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.23972em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8002800000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathnormal">n</span></span></span><span style="top:-2.76028em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.23972em;"><span></span></span></span></span></span></span></span></span>)</span></del><br /><del><code>my</code><del></p><blockquote><p>引用文本<br />引用文本</p></blockquote><p>H<sub>2</sub>O is是液体。</p><p>2<sup>10</sup> 运算结果是 1024.</p><h2 id="生成一个适合你的列表"><a class="markdownIt-Anchor" href="#生成一个适合你的列表"></a> 生成一个适合你的列表</h2><ul><li>项目<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>项目</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>项目</li></ul></li></ul><ol><li>项目1</li><li>项目2</li><li>项目3</li></ol><ul><li>[ ] 计划任务</li><li>[x] 完成任务</li></ul><h2 id="创建一个表格"><a class="markdownIt-Anchor" href="#创建一个表格"></a> 创建一个表格</h2><p>一个简单的表格是这么创建的：</p><table><thead><tr><th>项目</th><th>Value</th></tr></thead><tbody><tr><td>电脑</td><td>$1600</td></tr><tr><td>手机</td><td>$12</td></tr><tr><td>导管</td><td>$1</td></tr></tbody></table><table><thead><tr><th>item\time</th><th>freshman</th><th>sophomore</th><th>junior</th><th>senior</th></tr></thead><tbody><tr><td>study</td><td>Strengthen basic course learning, explore computer science field</td><td>Deepen professional knowledge, start practical projects</td><td>Deepen professional knowledge, participate in research projects</td><td>Perfect professional skills, prepare for graduation design/paper</td></tr><tr><td>interpersonal</td><td>Participate in club activities, make friends with like-minded classmates</td><td>Strengthen communication and cooperation with classmates and teachers</td><td>Participate in academic exchanges, expand social networks</td><td>Attend job fairs, build professional networks</td></tr><tr><td>employment preparation</td><td>Perfect resume, seek internship opportunities</td><td>Gain rich internship experience, prepare job materials</td><td>Actively participate in university-enterprise cooperation, expand employment channels</td><td>Conduct mock interviews, prepare for workplace skills</td></tr><tr><td>leisure</td><td>Participate in campus cultural and sports activities, relax</td><td>Participate in social activities appropriately, maintain a balance between physical and mental health</td><td>Read books, exercise to enrich leisure time</td><td>Plan for the future, enjoy the time before graduation</td></tr><tr><td>health</td><td>Pay attention to daily routines, ensure adequate sleep</td><td>Maintain a balanced diet, exercise regularly</td><td>Regular physical examinations, focus on physical health</td><td>Exercise regularly, maintain physical and mental health</td></tr></tbody></table><h3 id="设定内容居中-居左-居右"><a class="markdownIt-Anchor" href="#设定内容居中-居左-居右"></a> 设定内容居中、居左、居右</h3><p>使用<code>:---------:</code>居中<br />使用<code>:----------</code>居左<br />使用<code>----------:</code>居右</p><table><thead><tr><th style="text-align:center">第一列</th><th style="text-align:right">第二列</th><th style="text-align:left">第三列</th></tr></thead><tbody><tr><td style="text-align:center">第一列文本居中</td><td style="text-align:right">第二列文本居右</td><td style="text-align:left">第三列文本居左</td></tr></tbody></table><h2 id="如何创建一个注脚"><a class="markdownIt-Anchor" href="#如何创建一个注脚"></a> 如何创建一个注脚</h2><p>一个具有注脚的文本。<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></p><h2 id="注释也是必不可少的"><a class="markdownIt-Anchor" href="#注释也是必不可少的"></a> 注释也是必不可少的</h2><p>Markdown将文本转换为 <abbr title="超文本标记语言">HTML</abbr>。</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mi>n</mi></munderover><msup><mi>i</mi><mn>2</mn></msup><mo>=</mo><mfrac><mrow><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>+</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mn>2</mn><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><mn>6</mn></mfrac></mrow><annotation encoding="application/x-tex">\sum_{i=0}^n i^2 = \frac{(n^2+n)(2n+1)}{6}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">i</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.177108em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">6</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord">2</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>Gamma公式展示 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Γ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">!</mo><mspace width="1em"/><mi mathvariant="normal">∀</mi><mi>n</mi><mo>∈</mo><mi mathvariant="double-struck">N</mi></mrow><annotation encoding="application/x-tex">\Gamma(n) = (n-1)!\quad\foralln\in\mathbb N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Γ</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mclose">!</span><span class="mspace" style="margin-right:1em;"></span><span class="mord">∀</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68889em;vertical-align:0em;"></span><span class="mord mathbb">N</span></span></span></span> 是通过欧拉积分</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="normal">Γ</mi><mo stretchy="false">(</mo><mi>z</mi><mo stretchy="false">)</mo><mo>=</mo><msubsup><mo>∫</mo><mn>0</mn><mi mathvariant="normal">∞</mi></msubsup><msup><mi>t</mi><mrow><mi>z</mi><mo>−</mo><mn>1</mn></mrow></msup><msup><mi>e</mi><mrow><mo>−</mo><mi>t</mi></mrow></msup><mi>d</mi><mi>t</mi><mtext> </mtext><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">\Gamma(z) = \int_0^\infty t^{z-1}e^{-t}dt\,.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Γ</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.326242em;vertical-align:-0.9119499999999999em;"></span><span class="mop"><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011249999999999316em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.414292em;"><span style="top:-1.7880500000000001em;margin-left:-0.44445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span><span style="top:-3.8129000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">∞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9119499999999999em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.843556em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight">t</span></span></span></span></span></span></span></span></span><span class="mord mathnormal">d</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span></span></span></span></span></p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msubsup><mo>∫</mo><mi>a</mi><mi>b</mi></msubsup><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><msubsup><mrow><mi>d</mi><mi>x</mi><mo fence="true">∣</mo></mrow><mi>c</mi><mi>d</mi></msubsup></mrow><annotation encoding="application/x-tex">\int_{a}^{b} f(x) \left. dx \right|_{c}^{d}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.5109580000000005em;vertical-align:-0.9119499999999999em;"></span><span class="mop"><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011249999999999316em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5990080000000004em;"><span style="top:-1.7880500000000001em;margin-left:-0.44445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span></span></span></span><span style="top:-3.812900000000001em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">b</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9119499999999999em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="minner"><span class="mopen nulldelimiter"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span><span class="mclose delimcenter" style="top:0em;">∣</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9890079999999999em;"><span style="top:-2.4003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">c</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29969999999999997em;"><span></span></span></span></span></span></span></span></span></span></span></p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mi mathvariant="normal">∞</mi></munderover><msup><mi>i</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">\sum_{i=0}^\infty i^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">∞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">i</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></p><hr /><p><ul class="markdownIt-TOC"><li><a href="#quick-start">Quick Start</a><ul><li><a href="#create-a-new-post">Create a new post</a></li><li><a href="#run-server">Run server</a></li><li><a href="#generate-static-files">Generate static files</a></li><li><a href="#deploy-to-remote-sites">Deploy to remote sites</a></li></ul></li><li><a href="#%E5%A6%82%E4%BD%95%E6%94%B9%E5%8F%98%E6%96%87%E6%9C%AC%E7%9A%84%E6%A0%B7%E5%BC%8F">如何改变文本的样式</a></li><li><a href="#%E7%94%9F%E6%88%90%E4%B8%80%E4%B8%AA%E9%80%82%E5%90%88%E4%BD%A0%E7%9A%84%E5%88%97%E8%A1%A8">生成一个适合你的列表</a></li><li><a href="#%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%A1%A8%E6%A0%BC">创建一个表格</a><ul><li><a href="#%E8%AE%BE%E5%AE%9A%E5%86%85%E5%AE%B9%E5%B1%85%E4%B8%AD-%E5%B1%85%E5%B7%A6-%E5%B1%85%E5%8F%B3">设定内容居中、居左、居右</a></li></ul></li><li><a href="#%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%B3%A8%E8%84%9A">如何创建一个注脚</a></li><li><a href="#%E6%B3%A8%E9%87%8A%E4%B9%9F%E6%98%AF%E5%BF%85%E4%B8%8D%E5%8F%AF%E5%B0%91%E7%9A%84">注释也是必不可少的</a></li><li><a href="#%E6%96%B0%E7%9A%84%E6%94%B9%E5%8F%98">新的改变</a></li><li><a href="#%E5%8A%9F%E8%83%BD%E5%BF%AB%E6%8D%B7%E9%94%AE">功能快捷键</a></li><li><a href="#%E5%90%88%E7%90%86%E7%9A%84%E5%88%9B%E5%BB%BA%E6%A0%87%E9%A2%98%E6%9C%89%E5%8A%A9%E4%BA%8E%E7%9B%AE%E5%BD%95%E7%9A%84%E7%94%9F%E6%88%90">合理的创建标题，有助于目录的生成</a></li><li><a href="#%E5%A6%82%E4%BD%95%E6%94%B9%E5%8F%98%E6%96%87%E6%9C%AC%E7%9A%84%E6%A0%B7%E5%BC%8F-2">如何改变文本的样式</a></li><li><a href="#%E6%8F%92%E5%85%A5%E9%93%BE%E6%8E%A5%E4%B8%8E%E5%9B%BE%E7%89%87">插入链接与图片</a></li><li><a href="#%E5%A6%82%E4%BD%95%E6%8F%92%E5%85%A5%E4%B8%80%E6%AE%B5%E6%BC%82%E4%BA%AE%E7%9A%84%E4%BB%A3%E7%A0%81%E7%89%87">如何插入一段漂亮的代码片</a></li><li><a href="#%E7%94%9F%E6%88%90%E4%B8%80%E4%B8%AA%E9%80%82%E5%90%88%E4%BD%A0%E7%9A%84%E5%88%97%E8%A1%A8-2">生成一个适合你的列表</a></li><li><a href="#%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%A1%A8%E6%A0%BC-2">创建一个表格</a><ul><li><a href="#%E8%AE%BE%E5%AE%9A%E5%86%85%E5%AE%B9%E5%B1%85%E4%B8%AD-%E5%B1%85%E5%B7%A6-%E5%B1%85%E5%8F%B3-2">设定内容居中、居左、居右</a></li><li><a href="#smartypants">SmartyPants</a></li></ul></li><li><a href="#%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%AE%9A%E4%B9%89%E5%88%97%E8%A1%A8">创建一个自定义列表</a></li><li><a href="#%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%B3%A8%E8%84%9A-2">如何创建一个注脚</a></li><li><a href="#%E6%B3%A8%E9%87%8A%E4%B9%9F%E6%98%AF%E5%BF%85%E4%B8%8D%E5%8F%AF%E5%B0%91%E7%9A%84-2">注释也是必不可少的</a></li><li><a href="#katex%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F">KaTeX数学公式</a></li><li><a href="#%E6%96%B0%E7%9A%84%E7%94%98%E7%89%B9%E5%9B%BE%E5%8A%9F%E8%83%BD%E4%B8%B0%E5%AF%8C%E4%BD%A0%E7%9A%84%E6%96%87%E7%AB%A0">新的甘特图功能，丰富你的文章</a></li><li><a href="#uml-%E5%9B%BE%E8%A1%A8">UML 图表</a></li><li><a href="#flowchart%E6%B5%81%E7%A8%8B%E5%9B%BE">FLowchart流程图</a></li><li><a href="#%E5%AF%BC%E5%87%BA%E4%B8%8E%E5%AF%BC%E5%85%A5">导出与导入</a><ul><li><a href="#%E5%AF%BC%E5%87%BA">导出</a></li><li><a href="#%E5%AF%BC%E5%85%A5">导入</a></li><li><a href="#%E6%96%87%E6%9C%AC%E8%B0%83%E8%89%B2">文本调色</a></li></ul></li><li><a href="#markdown%E8%BD%ACpdf%E4%BF%9D%E7%95%99latex%E5%85%AC%E5%BC%8F">markdown转PDF保留Latex公式</a></li></ul></p><h1 id="欢迎使用markdown编辑器"><a class="markdownIt-Anchor" href="#欢迎使用markdown编辑器"></a> 欢迎使用Markdown编辑器</h1><p>你好！ 这是你第一次使用 <strong>Markdown编辑器</strong> 所展示的欢迎页。如果你想学习如何使用Markdown编辑器, 可以仔细阅读这篇文章，了解一下Markdown的基本语法知识。</p><h2 id="新的改变"><a class="markdownIt-Anchor" href="#新的改变"></a> 新的改变</h2><p>我们对Markdown编辑器进行了一些功能拓展与语法支持，除了标准的Markdown编辑器功能，我们增加了如下几点新功能，帮助你用它写博客：</p><ol><li><strong>全新的界面设计</strong> ，将会带来全新的写作体验；</li><li>在创作中心设置你喜爱的代码高亮样式，Markdown <strong>将代码片显示选择的高亮样式</strong> 进行展示；</li><li>增加了 <strong>图片拖拽</strong> 功能，你可以将本地的图片直接拖拽到编辑区域直接展示；</li><li>全新的 <strong>KaTeX数学公式</strong> 语法；</li><li>增加了支持<strong>甘特图的mermaid语法<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup></strong> 功能；</li><li>增加了 <strong>多屏幕编辑</strong> Markdown文章功能；</li><li>增加了 <strong>焦点写作模式、预览模式、简洁写作模式、左右区域同步滚轮设置</strong> 等功能，功能按钮位于编辑区域与预览区域中间；</li><li>增加了 <strong>检查列表</strong> 功能。</li></ol><h2 id="功能快捷键"><a class="markdownIt-Anchor" href="#功能快捷键"></a> 功能快捷键</h2><p>撤销：<kbd>Ctrl/Command</kbd> + <kbd>Z</kbd><br />重做：<kbd>Ctrl/Command</kbd> + <kbd>Y</kbd><br />加粗：<kbd>Ctrl/Command</kbd> + <kbd>B</kbd><br />斜体：<kbd>Ctrl/Command</kbd> + <kbd>I</kbd><br />标题：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>H</kbd><br />无序列表：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>U</kbd><br />有序列表：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>O</kbd><br />检查列表：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>C</kbd><br />插入代码：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>K</kbd><br />插入链接：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>L</kbd><br />插入图片：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>G</kbd><br />查找：<kbd>Ctrl/Command</kbd> + <kbd>F</kbd><br />替换：<kbd>Ctrl/Command</kbd> + <kbd>G</kbd></p><h2 id="合理的创建标题有助于目录的生成"><a class="markdownIt-Anchor" href="#合理的创建标题有助于目录的生成"></a> 合理的创建标题，有助于目录的生成</h2><p>直接输入1次<kbd>#</kbd>，并按下<kbd>space</kbd>后，将生成1级标题。<br />输入2次<kbd>#</kbd>，并按下<kbd>space</kbd>后，将生成2级标题。<br />以此类推，我们支持6级标题。有助于使用<code>TOC</code>语法后生成一个完美的目录。</p><h2 id="如何改变文本的样式-2"><a class="markdownIt-Anchor" href="#如何改变文本的样式-2"></a> 如何改变文本的样式</h2><p><em>强调文本</em> <em>强调文本</em></p><p><strong>加粗文本</strong> <strong>加粗文本</strong></p><p><mark>标记文本</mark></p><p><s>删除文本</s></p><blockquote><p>引用文本</p></blockquote><p>H<sub>2</sub>O is是液体。</p><p>2<sup>10</sup> 运算结果是 1024.</p><h2 id="插入链接与图片"><a class="markdownIt-Anchor" href="#插入链接与图片"></a> 插入链接与图片</h2><p>链接: <a href="https://www.csdn.net/">link</a>.</p><p>图片: <img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw" alt="Alt" /></p><p>带尺寸的图片: ![Alt](<a href="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw">https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw</a> =30x30)</p><p>居中的图片: <img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center" alt="Alt" /></p><p>居中并且带尺寸的图片: ![Alt](<a href="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center">https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center</a> =30x30)</p><p>当然，我们为了让用户更加便捷，我们增加了图片拖拽功能。</p><h2 id="如何插入一段漂亮的代码片"><a class="markdownIt-Anchor" href="#如何插入一段漂亮的代码片"></a> 如何插入一段漂亮的代码片</h2><p>去<a href="https://mp.csdn.net/console/configBlog">博客设置</a>页面，选择一款你喜欢的代码片高亮样式，下面展示同样高亮的 <code>代码片</code>.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// An highlighted block</span><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token string">'bar'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="生成一个适合你的列表-2"><a class="markdownIt-Anchor" href="#生成一个适合你的列表-2"></a> 生成一个适合你的列表</h2><ul><li>项目<ul><li>项目<ul><li>项目</li></ul></li></ul></li></ul><ol><li>项目1</li><li>项目2</li><li>项目3</li></ol><ul><li>[ ] 计划任务</li><li>[x] 完成任务</li></ul><h2 id="创建一个表格-2"><a class="markdownIt-Anchor" href="#创建一个表格-2"></a> 创建一个表格</h2><p>一个简单的表格是这么创建的：</p><table><thead><tr><th>项目</th><th>Value</th></tr></thead><tbody><tr><td>电脑</td><td>$1600</td></tr><tr><td>手机</td><td>$12</td></tr><tr><td>导管</td><td>$1</td></tr></tbody></table><h3 id="设定内容居中-居左-居右-2"><a class="markdownIt-Anchor" href="#设定内容居中-居左-居右-2"></a> 设定内容居中、居左、居右</h3><p>使用<code>:---------:</code>居中<br />使用<code>:----------</code>居左<br />使用<code>----------:</code>居右</p><table><thead><tr><th style="text-align:center">第一列</th><th style="text-align:right">第二列</th><th style="text-align:left">第三列</th></tr></thead><tbody><tr><td style="text-align:center">第一列文本居中</td><td style="text-align:right">第二列文本居右</td><td style="text-align:left">第三列文本居左</td></tr></tbody></table><h3 id="smartypants"><a class="markdownIt-Anchor" href="#smartypants"></a> SmartyPants</h3><p>SmartyPants将ASCII标点字符转换为“智能”印刷标点HTML实体。例如：</p><table><thead><tr><th>TYPE</th><th>ASCII</th><th><abbr title="超文本标记语言">HTML</abbr></th></tr></thead><tbody><tr><td>Single backticks</td><td><code>'Isn't this fun?'</code></td><td>‘Isn’t this fun?’</td></tr><tr><td>Quotes</td><td><code>&quot;Isn't this fun?&quot;</code></td><td>“Isn’t this fun?”</td></tr><tr><td>Dashes</td><td><code>-- is en-dash, --- is em-dash</code></td><td>– is en-dash, — is em-dash</td></tr></tbody></table><h2 id="创建一个自定义列表"><a class="markdownIt-Anchor" href="#创建一个自定义列表"></a> 创建一个自定义列表</h2><dl><dt>Markdown</dt><dd>Text-to-<abbr title="超文本标记语言">HTML</abbr> conversion tool</dd><dt>Authors</dt><dd>John</dd><dd>Luke</dd></dl><h2 id="如何创建一个注脚-2"><a class="markdownIt-Anchor" href="#如何创建一个注脚-2"></a> 如何创建一个注脚</h2><p>一个具有注脚的文本。<sup class="footnote-ref"><a href="#fn1" id="fnref1:1">[1:1]</a></sup></p><h2 id="注释也是必不可少的-2"><a class="markdownIt-Anchor" href="#注释也是必不可少的-2"></a> 注释也是必不可少的</h2><p>Markdown将文本转换为 <abbr title="超文本标记语言">HTML</abbr>。</p><h2 id="katex数学公式"><a class="markdownIt-Anchor" href="#katex数学公式"></a> KaTeX数学公式</h2><p>您可以使用渲染LaTeX数学表达式 <a href="https://khan.github.io/KaTeX/">KaTeX</a>:</p><p>Gamma公式展示 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Γ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">!</mo><mspace width="1em"/><mi mathvariant="normal">∀</mi><mi>n</mi><mo>∈</mo><mi mathvariant="double-struck">N</mi></mrow><annotation encoding="application/x-tex">\Gamma(n) = (n-1)!\quad\foralln\in\mathbb N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Γ</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mclose">!</span><span class="mspace" style="margin-right:1em;"></span><span class="mord">∀</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68889em;vertical-align:0em;"></span><span class="mord mathbb">N</span></span></span></span> 是通过欧拉积分</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="normal">Γ</mi><mo stretchy="false">(</mo><mi>z</mi><mo stretchy="false">)</mo><mo>=</mo><msubsup><mo>∫</mo><mn>0</mn><mi mathvariant="normal">∞</mi></msubsup><msup><mi>t</mi><mrow><mi>z</mi><mo>−</mo><mn>1</mn></mrow></msup><msup><mi>e</mi><mrow><mo>−</mo><mi>t</mi></mrow></msup><mi>d</mi><mi>t</mi><mtext> </mtext><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">\Gamma(z) = \int_0^\infty t^{z-1}e^{-t}dt\,.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Γ</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.326242em;vertical-align:-0.9119499999999999em;"></span><span class="mop"><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011249999999999316em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.414292em;"><span style="top:-1.7880500000000001em;margin-left:-0.44445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span><span style="top:-3.8129000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">∞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9119499999999999em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.843556em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight">t</span></span></span></span></span></span></span></span></span><span class="mord mathnormal">d</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span></span></span></span></span></p><blockquote><p>你可以找到更多关于的信息 <strong>LaTeX</strong> 数学表达式<a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference">here</a>.</p></blockquote><h2 id="新的甘特图功能丰富你的文章"><a class="markdownIt-Anchor" href="#新的甘特图功能丰富你的文章"></a> 新的甘特图功能，丰富你的文章</h2><pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid"><span class="token keyword">gantt</span>        dateFormat  YYYY-MM-DD        title Adding GANTT diagram functionality to mermaid        section 现有任务        已完成               <span class="token operator">:</span>done,    des1, 2014-01-06,2014-01-08        进行中               <span class="token operator">:</span>active,  des2, 2014-01-09, 3d        计划一               <span class="token operator">:</span>         des3, after des2, 5d        计划二               <span class="token operator">:</span>         des4, after des3, 5d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>关于 <strong>甘特图</strong> 语法，参考 <a href="https://mermaidjs.github.io/">这儿</a>,</li></ul><h2 id="uml-图表"><a class="markdownIt-Anchor" href="#uml-图表"></a> UML 图表</h2><p>可以使用UML图表进行渲染。 <a href="https://mermaidjs.github.io/">Mermaid</a>. 例如下面产生的一个序列图：</p><pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid"><span class="token keyword">sequenceDiagram</span>张三 <span class="token arrow operator">->></span> 李四<span class="token operator">:</span> 你好！李四, 最近怎么样?李四<span class="token arrow operator">-->></span>王五<span class="token operator">:</span> 你最近怎么样，王五？李四<span class="token arrow operator">--x</span> 张三<span class="token operator">:</span> 我很好，谢谢!李四<span class="token arrow operator">-x</span> 王五<span class="token operator">:</span> 我很好，谢谢!<span class="token keyword">Note right of</span> 王五<span class="token operator">:</span> 李四想了很长时间, 文字太长了&lt;br/>不适合放在一行.李四<span class="token arrow operator">-->></span>张三<span class="token operator">:</span> 打量着王五...张三<span class="token arrow operator">->></span>王五<span class="token operator">:</span> 很好... 王五, 你怎么样?<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这将产生一个流程图。:</p><pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid"><span class="token keyword">graph</span> LRA<span class="token text string">[长方形]</span> <span class="token inter-arrow-label"><span class="token arrow-head arrow operator">--</span> <span class="token label property">链接</span> <span class="token arrow operator">--></span></span> B<span class="token text string">((圆))</span>A <span class="token arrow operator">--></span> C<span class="token text string">(圆角长方形)</span>B <span class="token arrow operator">--></span> D<span class="token text string">&#123;菱形&#125;</span>C <span class="token arrow operator">--></span> D<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>关于 <strong>Mermaid</strong> 语法，参考 <a href="https://mermaidjs.github.io/">这儿</a>,</li></ul><h2 id="flowchart流程图"><a class="markdownIt-Anchor" href="#flowchart流程图"></a> FLowchart流程图</h2><p>我们依旧会支持flowchart的流程图：</p><pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid">flowchatst=>start<span class="token operator">:</span> 开始e=>end<span class="token operator">:</span> 结束op=>operation<span class="token operator">:</span> 我的操作cond=>condition<span class="token operator">:</span> 确认？st<span class="token arrow operator">-></span>op<span class="token arrow operator">-></span>condcond<span class="token text string">(yes)</span>->econd<span class="token text string">(no)</span>->op<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>关于 <strong>Flowchart流程图</strong> 语法，参考 <a href="http://adrai.github.io/flowchart.js/">这儿</a>.</li></ul><h2 id="导出与导入"><a class="markdownIt-Anchor" href="#导出与导入"></a> 导出与导入</h2><h3 id="导出"><a class="markdownIt-Anchor" href="#导出"></a> 导出</h3><p>如果你想尝试使用此编辑器, 你可以在此篇文章任意编辑。当你完成了一篇文章的写作, 在上方工具栏找到 <strong>文章导出</strong> ，生成一个.md文件或者.html文件进行本地保存。</p><h3 id="导入"><a class="markdownIt-Anchor" href="#导入"></a> 导入</h3><p>如果你想加载一篇你写过的.md文件，在上方工具栏可以选择导入功能进行对应扩展名的文件导入，<br />继续你的创作。</p><h3 id="文本调色"><a class="markdownIt-Anchor" href="#文本调色"></a> 文本调色</h3><p>这是一个示例Markdown文本，其中的一部分文本会被设置为橙色。</p><p>使用 <code>&lt;span style=&quot;color:orange&quot;&gt;vi.resize(n, v)&lt;/span&gt;</code> 函数时，注意确保正确的参数。</p><hr /><p><span style="color:orange">使用 vi.resize(n, v) 函数时</span><br /><span style="color:rgb(233,105,0)">O(n<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msqrt><mi>n</mi></msqrt></mrow><annotation encoding="application/x-tex">\sqrt{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.23972em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8002800000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathnormal">n</span></span></span><span style="top:-2.76028em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.23972em;"><span></span></span></span></span></span></span></span></span>)</span></p><!--rgb调色--><p><code>vi.resize(n, v)</code> <!--直接就是橘色--></p><p>更多信息请参考<a href="https://www.markdownguide.org">Markdown指南</a>。</p><p>\documentclass{article}<br />\usepackage{amsmath} % 使用 amsmath 宏包以支持更多的数学符号</p><p>\begin{document}</p><p>数学中的充分必要条件符号：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo>⇔</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">a \Leftrightarrow b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⇔</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">b</span></span></span></span></p><p>图片: <img src="https://img-home.csdnimg.cn/images/20220524100510.png" alt="Alt" /></p><p>带尺寸的图片: ![Alt](<a href="https://img-home.csdnimg.cn/images/20220524100510.png">https://img-home.csdnimg.cn/images/20220524100510.png</a> =60x60)</p><p>宽度确定高度等比例的图片: ![Alt](<a href="https://img-home.csdnimg.cn/images/20220524100510.png">https://img-home.csdnimg.cn/images/20220524100510.png</a> =60x)</p><p>高度确定宽度等比例的图片: ![Alt](<a href="https://img-home.csdnimg.cn/images/20220524100510.png">https://img-home.csdnimg.cn/images/20220524100510.png</a> =x60)</p><p>居中的图片: <img src="https://img-home.csdnimg.cn/images/20220524100510.png#pic_center" alt="Alt" /></p><p>居中并且带尺寸的图片: ![Alt](<a href="https://img-home.csdnimg.cn/images/20220524100510.png#pic_center">https://img-home.csdnimg.cn/images/20220524100510.png#pic_center</a> =60x60)</p><p>居右的图片: <img src="https://img-home.csdnimg.cn/images/20220524100510.png#pic_right" alt="Alt" /></p><p>dfwefwffdfdfd，dsd</p><h2 id="markdown转pdf保留latex公式"><a class="markdownIt-Anchor" href="#markdown转pdf保留latex公式"></a> markdown转PDF保留Latex公式</h2><p>在markdown文件下添加</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span>script <span class="token assign-left variable">type</span><span class="token operator">=</span><span class="token string">"text/javascript"</span> <span class="token assign-left variable">src</span><span class="token operator">=</span><span class="token string">"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"</span><span class="token operator">></span><span class="token operator">&lt;</span>/script<span class="token operator">></span><span class="token operator">&lt;</span>script <span class="token assign-left variable">type</span><span class="token operator">=</span><span class="token string">"text/x-mathjax-config"</span><span class="token operator">></span>  MathJax.Hub.Config<span class="token punctuation">(</span><span class="token punctuation">&#123;</span> tex2jax: <span class="token punctuation">&#123;</span>inlineMath: <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'$'</span>, <span class="token string">'$'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>, messageStyle: <span class="token string">"none"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span>/script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>用 markdown PDF插件创建</p><hr class="footnotes-sep" /><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>注脚的解释 <a href="#fnref1" class="footnote-backref">↩︎</a> <a href="#fnref1:1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p><a href="https://mermaidjs.github.io/">mermaid语法说明</a> <a href="#fnref2" class="footnote-backref">↩︎</a></p></li></ol></section><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
